From 86b2cef05a3ffe668b6297c526121a814394d081 Mon Sep 17 00:00:00 2001
From: vemacs <d@nkmem.es>
Date: Mon, 27 Jun 2016 17:25:20 -0700
Subject: [PATCH] Add SpawnerPreSpawnEvent


diff --git a/src/main/java/net/techcable/tacospigot/event/entity/SpawnerPreSpawnEvent.java b/src/main/java/net/techcable/tacospigot/event/entity/SpawnerPreSpawnEvent.java
new file mode 100644
index 0000000..efed50a
--- /dev/null
+++ b/src/main/java/net/techcable/tacospigot/event/entity/SpawnerPreSpawnEvent.java
@@ -0,0 +1,71 @@
+package net.techcable.tacospigot.event.entity;
+
+import com.google.common.base.Preconditions;
+
+import org.bukkit.Location;
+import org.bukkit.entity.EntityType;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.Event;
+import org.bukkit.event.HandlerList;
+
+import static com.google.common.base.Preconditions.*;
+
+/**
+ * Fired before a mob spawns and entity data as calculated.
+ * <p>This is a more preformat alternative to {@link org.bukkit.event.entity.SpawnerSpawnEvent}</p>
+ */
+public class SpawnerPreSpawnEvent extends Event implements Cancellable {
+
+    private final Location location;
+    private final EntityType spawnedType;
+
+    public SpawnerPreSpawnEvent(Location location, EntityType spawnedType) {
+        this.location = checkNotNull(location, "Null location").clone(); // Defensive copy
+        this.spawnedType = checkNotNull(spawnedType, "Null spawned type");
+    }
+
+    /**
+     * Get the location of the spawner where the entity is being spawned
+     *
+     * @return the spawner's location
+     */
+    public Location getLocation() {
+        return location.clone(); // Defensive copy
+    }
+
+    /**
+     * Get the type of entity being spawned
+     *
+     * @return the type being spawned
+     */
+    public EntityType getSpawnedType() {
+        return spawnedType;
+    }
+
+    // Cancellable
+
+    private boolean cancelled;
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    // handlers
+
+    private static final HandlerList handlerList = new HandlerList();
+
+    @Override
+    public HandlerList getHandlers() {
+        return handlerList;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlerList;
+    }
+}
-- 
2.9.0

