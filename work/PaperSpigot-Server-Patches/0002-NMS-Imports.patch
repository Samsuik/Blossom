From fd13a74e45fdcfefe0df97b56badb8e8001d32be Mon Sep 17 00:00:00 2001
From: Techcable <Techcable@outlook.com>
Date: Sun, 16 Aug 2015 12:18:44 -0700
Subject: [PATCH] NMS Imports

This must be updated every version
Only use code decompiled with BuildTools

diff --git a/src/main/java/net/minecraft/server/BlockState.java b/src/main/java/net/minecraft/server/BlockState.java
new file mode 100644
index 00000000..3cada5af
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockState.java
@@ -0,0 +1,42 @@
+package net.minecraft.server;
+
+import com.google.common.base.Objects;
+
+public abstract class BlockState<T extends Comparable<T>> implements IBlockState<T> {
+
+    private final Class<T> a;
+    private final String b;
+
+    protected BlockState(String s, Class<T> oclass) {
+        this.a = oclass;
+        this.b = s;
+    }
+
+    public String a() {
+        return this.b;
+    }
+
+    public Class<T> b() {
+        return this.a;
+    }
+
+    public String toString() {
+        return Objects.toStringHelper(this).add("name", this.b).add("clazz", this.a).add("values", this.c()).toString();
+    }
+
+    public boolean equals(Object object) {
+        if (this == object) {
+            return true;
+        } else if (object != null && this.getClass() == object.getClass()) {
+            BlockState blockstate = (BlockState) object;
+
+            return this.a.equals(blockstate.a) && this.b.equals(blockstate.b);
+        } else {
+            return false;
+        }
+    }
+
+    public int hashCode() {
+        return 31 * this.a.hashCode() + this.b.hashCode();
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockStateBoolean.java b/src/main/java/net/minecraft/server/BlockStateBoolean.java
new file mode 100644
index 00000000..7fb09600
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockStateBoolean.java
@@ -0,0 +1,29 @@
+package net.minecraft.server;
+
+import com.google.common.collect.ImmutableSet;
+import java.util.Collection;
+
+public class BlockStateBoolean extends BlockState<Boolean> {
+
+    private final ImmutableSet<Boolean> a = ImmutableSet.of(Boolean.valueOf(true), Boolean.valueOf(false));
+
+    protected BlockStateBoolean(String s) {
+        super(s, Boolean.class);
+    }
+
+    public Collection<Boolean> c() {
+        return this.a;
+    }
+
+    public static BlockStateBoolean of(String s) {
+        return new BlockStateBoolean(s);
+    }
+
+    public String a(Boolean obool) {
+        return obool.toString();
+    }
+
+    public String a(Comparable comparable) {
+        return this.a((Boolean) comparable);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockStateEnum.java b/src/main/java/net/minecraft/server/BlockStateEnum.java
new file mode 100644
index 00000000..0b555dff
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockStateEnum.java
@@ -0,0 +1,63 @@
+package net.minecraft.server;
+
+import com.google.common.base.Predicate;
+import com.google.common.base.Predicates;
+import com.google.common.collect.Collections2;
+import com.google.common.collect.ImmutableSet;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.Map;
+
+public class BlockStateEnum<T extends Enum<T> & INamable> extends BlockState<T> {
+
+    private final ImmutableSet<T> a;
+    private final Map<String, T> b = Maps.newHashMap();
+
+    protected BlockStateEnum(String s, Class<T> oclass, Collection<T> collection) {
+        super(s, oclass);
+        this.a = ImmutableSet.copyOf(collection);
+        Iterator iterator = collection.iterator();
+
+        while (iterator.hasNext()) {
+            Enum oenum = (Enum) iterator.next();
+            String s1 = ((INamable) oenum).getName();
+
+            if (this.b.containsKey(s1)) {
+                throw new IllegalArgumentException("Multiple values have the same name \'" + s1 + "\'");
+            }
+
+            this.b.put(s1, oenum);
+        }
+
+    }
+
+    public Collection<T> c() {
+        return this.a;
+    }
+
+    public String a(T t0) {
+        return ((INamable) t0).getName();
+    }
+
+    public static <T extends Enum<T> & INamable> BlockStateEnum<T> of(String s, Class<T> oclass) {
+        return a(s, oclass, Predicates.alwaysTrue());
+    }
+
+    public static <T extends Enum<T> & INamable> BlockStateEnum<T> a(String s, Class<T> oclass, Predicate<T> predicate) {
+        return a(s, oclass, Collections2.filter(Lists.newArrayList(oclass.getEnumConstants()), predicate));
+    }
+
+    public static <T extends Enum<T> & INamable> BlockStateEnum<T> of(String s, Class<T> oclass, T... at) {
+        return a(s, oclass, (Collection) Lists.newArrayList(at));
+    }
+
+    public static <T extends Enum<T> & INamable> BlockStateEnum<T> a(String s, Class<T> oclass, Collection<T> collection) {
+        return new BlockStateEnum(s, oclass, collection);
+    }
+
+    public String a(Comparable comparable) {
+        return this.a((Enum) comparable);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockStateInteger.java b/src/main/java/net/minecraft/server/BlockStateInteger.java
new file mode 100644
index 00000000..4e7e489c
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockStateInteger.java
@@ -0,0 +1,67 @@
+package net.minecraft.server;
+
+import com.google.common.collect.ImmutableSet;
+import com.google.common.collect.Sets;
+import java.util.Collection;
+import java.util.HashSet;
+
+public class BlockStateInteger extends BlockState<Integer> {
+
+    private final ImmutableSet<Integer> a;
+
+    protected BlockStateInteger(String s, int i, int j) {
+        super(s, Integer.class);
+        if (i < 0) {
+            throw new IllegalArgumentException("Min value of " + s + " must be 0 or greater");
+        } else if (j <= i) {
+            throw new IllegalArgumentException("Max value of " + s + " must be greater than min (" + i + ")");
+        } else {
+            HashSet hashset = Sets.newHashSet();
+
+            for (int k = i; k <= j; ++k) {
+                hashset.add(Integer.valueOf(k));
+            }
+
+            this.a = ImmutableSet.copyOf(hashset);
+        }
+    }
+
+    public Collection<Integer> c() {
+        return this.a;
+    }
+
+    public boolean equals(Object object) {
+        if (this == object) {
+            return true;
+        } else if (object != null && this.getClass() == object.getClass()) {
+            if (!super.equals(object)) {
+                return false;
+            } else {
+                BlockStateInteger blockstateinteger = (BlockStateInteger) object;
+
+                return this.a.equals(blockstateinteger.a);
+            }
+        } else {
+            return false;
+        }
+    }
+
+    public int hashCode() {
+        int i = super.hashCode();
+
+        i = 31 * i + this.a.hashCode();
+        return i;
+    }
+
+    public static BlockStateInteger of(String s, int i, int j) {
+        return new BlockStateInteger(s, i, j);
+    }
+
+    public String a(Integer integer) {
+        return integer.toString();
+    }
+
+    public String a(Comparable comparable) {
+        return this.a((Integer) comparable);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockStateList.java b/src/main/java/net/minecraft/server/BlockStateList.java
new file mode 100644
index 00000000..8a815a64
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockStateList.java
@@ -0,0 +1,191 @@
+package net.minecraft.server;
+
+import com.google.common.base.Function;
+import com.google.common.base.Joiner;
+import com.google.common.base.Objects;
+import com.google.common.collect.HashBasedTable;
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableTable;
+import com.google.common.collect.Iterables;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+
+public class BlockStateList {
+
+    private static final Joiner a = Joiner.on(", ");
+    private static final Function<IBlockState, String> b = new Function() {
+        public String a(IBlockState iblockstate) {
+            return iblockstate == null ? "<NULL>" : iblockstate.a();
+        }
+
+        public Object apply(Object object) {
+            return this.a((IBlockState) object);
+        }
+    };
+    private final Block c;
+    private final ImmutableList<IBlockState> d;
+    private final ImmutableList<IBlockData> e;
+
+    public BlockStateList(Block block, IBlockState... aiblockstate) {
+        this.c = block;
+        Arrays.sort(aiblockstate, new Comparator() {
+            public int a(IBlockState iblockstate, IBlockState iblockstate1) {
+                return iblockstate.a().compareTo(iblockstate1.a());
+            }
+
+            public int compare(Object object, Object object1) {
+                return this.a((IBlockState) object, (IBlockState) object1);
+            }
+        });
+        this.d = ImmutableList.copyOf(aiblockstate);
+        LinkedHashMap linkedhashmap = Maps.newLinkedHashMap();
+        ArrayList arraylist = Lists.newArrayList();
+        Iterable iterable = IteratorUtils.a(this.e());
+        Iterator iterator = iterable.iterator();
+
+        while (iterator.hasNext()) {
+            List list = (List) iterator.next();
+            Map map = MapGeneratorUtils.b(this.d, list);
+            BlockStateList.BlockData blockstatelist_blockdata = new BlockStateList.BlockData(block, ImmutableMap.copyOf(map), null);
+
+            linkedhashmap.put(map, blockstatelist_blockdata);
+            arraylist.add(blockstatelist_blockdata);
+        }
+
+        iterator = arraylist.iterator();
+
+        while (iterator.hasNext()) {
+            BlockStateList.BlockData blockstatelist_blockdata1 = (BlockStateList.BlockData) iterator.next();
+
+            blockstatelist_blockdata1.a((Map) linkedhashmap);
+        }
+
+        this.e = ImmutableList.copyOf(arraylist);
+    }
+
+    public ImmutableList<IBlockData> a() {
+        return this.e;
+    }
+
+    private List<Iterable<Comparable>> e() {
+        ArrayList arraylist = Lists.newArrayList();
+
+        for (int i = 0; i < this.d.size(); ++i) {
+            arraylist.add(((IBlockState) this.d.get(i)).c());
+        }
+
+        return arraylist;
+    }
+
+    public IBlockData getBlockData() {
+        return (IBlockData) this.e.get(0);
+    }
+
+    public Block getBlock() {
+        return this.c;
+    }
+
+    public Collection<IBlockState> d() {
+        return this.d;
+    }
+
+    public String toString() {
+        return Objects.toStringHelper(this).add("block", Block.REGISTRY.c(this.c)).add("properties", Iterables.transform(this.d, BlockStateList.b)).toString();
+    }
+
+    static class BlockData extends BlockDataAbstract {
+
+        private final Block a;
+        private final ImmutableMap<IBlockState, Comparable> b;
+        private ImmutableTable<IBlockState, Comparable, IBlockData> c;
+
+        private BlockData(Block block, ImmutableMap<IBlockState, Comparable> immutablemap) {
+            this.a = block;
+            this.b = immutablemap;
+        }
+
+        public Collection<IBlockState> a() {
+            return Collections.unmodifiableCollection(this.b.keySet());
+        }
+
+        public <T extends Comparable<T>> T get(IBlockState<T> iblockstate) {
+            if (!this.b.containsKey(iblockstate)) {
+                throw new IllegalArgumentException("Cannot get property " + iblockstate + " as it does not exist in " + this.a.P());
+            } else {
+                return (Comparable) iblockstate.b().cast(this.b.get(iblockstate));
+            }
+        }
+
+        public <T extends Comparable<T>, V extends T> IBlockData set(IBlockState<T> iblockstate, V v0) {
+            if (!this.b.containsKey(iblockstate)) {
+                throw new IllegalArgumentException("Cannot set property " + iblockstate + " as it does not exist in " + this.a.P());
+            } else if (!iblockstate.c().contains(v0)) {
+                throw new IllegalArgumentException("Cannot set property " + iblockstate + " to " + v0 + " on block " + Block.REGISTRY.c(this.a) + ", it is not an allowed value");
+            } else {
+                return (IBlockData) (this.b.get(iblockstate) == v0 ? this : (IBlockData) this.c.get(iblockstate, v0));
+            }
+        }
+
+        public ImmutableMap<IBlockState, Comparable> b() {
+            return this.b;
+        }
+
+        public Block getBlock() {
+            return this.a;
+        }
+
+        public boolean equals(Object object) {
+            return this == object;
+        }
+
+        public int hashCode() {
+            return this.b.hashCode();
+        }
+
+        public void a(Map<Map<IBlockState, Comparable>, BlockStateList.BlockData> map) {
+            if (this.c != null) {
+                throw new IllegalStateException();
+            } else {
+                HashBasedTable hashbasedtable = HashBasedTable.create();
+                Iterator iterator = this.b.keySet().iterator();
+
+                while (iterator.hasNext()) {
+                    IBlockState iblockstate = (IBlockState) iterator.next();
+                    Iterator iterator1 = iblockstate.c().iterator();
+
+                    while (iterator1.hasNext()) {
+                        Comparable comparable = (Comparable) iterator1.next();
+
+                        if (comparable != this.b.get(iblockstate)) {
+                            hashbasedtable.put(iblockstate, comparable, map.get(this.b(iblockstate, comparable)));
+                        }
+                    }
+                }
+
+                this.c = ImmutableTable.copyOf(hashbasedtable);
+            }
+        }
+
+        private Map<IBlockState, Comparable> b(IBlockState iblockstate, Comparable comparable) {
+            HashMap hashmap = Maps.newHashMap(this.b);
+
+            hashmap.put(iblockstate, comparable);
+            return hashmap;
+        }
+
+        BlockData(Block block, ImmutableMap immutablemap, Object object) {
+            this(block, immutablemap);
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/CommandScoreboard.java b/src/main/java/net/minecraft/server/CommandScoreboard.java
new file mode 100644
index 00000000..27d08a7d
--- /dev/null
+++ b/src/main/java/net/minecraft/server/CommandScoreboard.java
@@ -0,0 +1,1003 @@
+package net.minecraft.server;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Sets;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+public class CommandScoreboard extends CommandAbstract {
+
+    public CommandScoreboard() {}
+
+    public String getCommand() {
+        return "scoreboard";
+    }
+
+    public int a() {
+        return 2;
+    }
+
+    public String getUsage(ICommandListener icommandlistener) {
+        return "commands.scoreboard.usage";
+    }
+
+    public void execute(ICommandListener icommandlistener, String[] astring) throws CommandException {
+        if (!this.b(icommandlistener, astring)) {
+            if (astring.length < 1) {
+                throw new ExceptionUsage("commands.scoreboard.usage", new Object[0]);
+            } else {
+                if (astring[0].equalsIgnoreCase("objectives")) {
+                    if (astring.length == 1) {
+                        throw new ExceptionUsage("commands.scoreboard.objectives.usage", new Object[0]);
+                    }
+
+                    if (astring[1].equalsIgnoreCase("list")) {
+                        this.d(icommandlistener);
+                    } else if (astring[1].equalsIgnoreCase("add")) {
+                        if (astring.length < 4) {
+                            throw new ExceptionUsage("commands.scoreboard.objectives.add.usage", new Object[0]);
+                        }
+
+                        this.b(icommandlistener, astring, 2);
+                    } else if (astring[1].equalsIgnoreCase("remove")) {
+                        if (astring.length != 3) {
+                            throw new ExceptionUsage("commands.scoreboard.objectives.remove.usage", new Object[0]);
+                        }
+
+                        this.h(icommandlistener, astring[2]);
+                    } else {
+                        if (!astring[1].equalsIgnoreCase("setdisplay")) {
+                            throw new ExceptionUsage("commands.scoreboard.objectives.usage", new Object[0]);
+                        }
+
+                        if (astring.length != 3 && astring.length != 4) {
+                            throw new ExceptionUsage("commands.scoreboard.objectives.setdisplay.usage", new Object[0]);
+                        }
+
+                        this.j(icommandlistener, astring, 2);
+                    }
+                } else if (astring[0].equalsIgnoreCase("players")) {
+                    if (astring.length == 1) {
+                        throw new ExceptionUsage("commands.scoreboard.players.usage", new Object[0]);
+                    }
+
+                    if (astring[1].equalsIgnoreCase("list")) {
+                        if (astring.length > 3) {
+                            throw new ExceptionUsage("commands.scoreboard.players.list.usage", new Object[0]);
+                        }
+
+                        this.k(icommandlistener, astring, 2);
+                    } else if (astring[1].equalsIgnoreCase("add")) {
+                        if (astring.length < 5) {
+                            throw new ExceptionUsage("commands.scoreboard.players.add.usage", new Object[0]);
+                        }
+
+                        this.l(icommandlistener, astring, 2);
+                    } else if (astring[1].equalsIgnoreCase("remove")) {
+                        if (astring.length < 5) {
+                            throw new ExceptionUsage("commands.scoreboard.players.remove.usage", new Object[0]);
+                        }
+
+                        this.l(icommandlistener, astring, 2);
+                    } else if (astring[1].equalsIgnoreCase("set")) {
+                        if (astring.length < 5) {
+                            throw new ExceptionUsage("commands.scoreboard.players.set.usage", new Object[0]);
+                        }
+
+                        this.l(icommandlistener, astring, 2);
+                    } else if (astring[1].equalsIgnoreCase("reset")) {
+                        if (astring.length != 3 && astring.length != 4) {
+                            throw new ExceptionUsage("commands.scoreboard.players.reset.usage", new Object[0]);
+                        }
+
+                        this.m(icommandlistener, astring, 2);
+                    } else if (astring[1].equalsIgnoreCase("enable")) {
+                        if (astring.length != 4) {
+                            throw new ExceptionUsage("commands.scoreboard.players.enable.usage", new Object[0]);
+                        }
+
+                        this.n(icommandlistener, astring, 2);
+                    } else if (astring[1].equalsIgnoreCase("test")) {
+                        if (astring.length != 5 && astring.length != 6) {
+                            throw new ExceptionUsage("commands.scoreboard.players.test.usage", new Object[0]);
+                        }
+
+                        this.o(icommandlistener, astring, 2);
+                    } else {
+                        if (!astring[1].equalsIgnoreCase("operation")) {
+                            throw new ExceptionUsage("commands.scoreboard.players.usage", new Object[0]);
+                        }
+
+                        if (astring.length != 7) {
+                            throw new ExceptionUsage("commands.scoreboard.players.operation.usage", new Object[0]);
+                        }
+
+                        this.p(icommandlistener, astring, 2);
+                    }
+                } else {
+                    if (!astring[0].equalsIgnoreCase("teams")) {
+                        throw new ExceptionUsage("commands.scoreboard.usage", new Object[0]);
+                    }
+
+                    if (astring.length == 1) {
+                        throw new ExceptionUsage("commands.scoreboard.teams.usage", new Object[0]);
+                    }
+
+                    if (astring[1].equalsIgnoreCase("list")) {
+                        if (astring.length > 3) {
+                            throw new ExceptionUsage("commands.scoreboard.teams.list.usage", new Object[0]);
+                        }
+
+                        this.f(icommandlistener, astring, 2);
+                    } else if (astring[1].equalsIgnoreCase("add")) {
+                        if (astring.length < 3) {
+                            throw new ExceptionUsage("commands.scoreboard.teams.add.usage", new Object[0]);
+                        }
+
+                        this.c(icommandlistener, astring, 2);
+                    } else if (astring[1].equalsIgnoreCase("remove")) {
+                        if (astring.length != 3) {
+                            throw new ExceptionUsage("commands.scoreboard.teams.remove.usage", new Object[0]);
+                        }
+
+                        this.e(icommandlistener, astring, 2);
+                    } else if (astring[1].equalsIgnoreCase("empty")) {
+                        if (astring.length != 3) {
+                            throw new ExceptionUsage("commands.scoreboard.teams.empty.usage", new Object[0]);
+                        }
+
+                        this.i(icommandlistener, astring, 2);
+                    } else if (astring[1].equalsIgnoreCase("join")) {
+                        if (astring.length < 4 && (astring.length != 3 || !(icommandlistener instanceof EntityHuman))) {
+                            throw new ExceptionUsage("commands.scoreboard.teams.join.usage", new Object[0]);
+                        }
+
+                        this.g(icommandlistener, astring, 2);
+                    } else if (astring[1].equalsIgnoreCase("leave")) {
+                        if (astring.length < 3 && !(icommandlistener instanceof EntityHuman)) {
+                            throw new ExceptionUsage("commands.scoreboard.teams.leave.usage", new Object[0]);
+                        }
+
+                        this.h(icommandlistener, astring, 2);
+                    } else {
+                        if (!astring[1].equalsIgnoreCase("option")) {
+                            throw new ExceptionUsage("commands.scoreboard.teams.usage", new Object[0]);
+                        }
+
+                        if (astring.length != 4 && astring.length != 5) {
+                            throw new ExceptionUsage("commands.scoreboard.teams.option.usage", new Object[0]);
+                        }
+
+                        this.d(icommandlistener, astring, 2);
+                    }
+                }
+
+            }
+        }
+    }
+
+    private boolean b(ICommandListener icommandlistener, String[] astring) throws CommandException {
+        int i = -1;
+
+        for (int j = 0; j < astring.length; ++j) {
+            if (this.isListStart(astring, j) && "*".equals(astring[j])) {
+                if (i >= 0) {
+                    throw new CommandException("commands.scoreboard.noMultiWildcard", new Object[0]);
+                }
+
+                i = j;
+            }
+        }
+
+        if (i < 0) {
+            return false;
+        } else {
+            ArrayList arraylist = Lists.newArrayList(this.d().getPlayers());
+            String s = astring[i];
+            ArrayList arraylist1 = Lists.newArrayList();
+            Iterator iterator = arraylist.iterator();
+
+            while (iterator.hasNext()) {
+                String s1 = (String) iterator.next();
+
+                astring[i] = s1;
+
+                try {
+                    this.execute(icommandlistener, astring);
+                    arraylist1.add(s1);
+                } catch (CommandException commandexception) {
+                    ChatMessage chatmessage = new ChatMessage(commandexception.getMessage(), commandexception.getArgs());
+
+                    chatmessage.getChatModifier().setColor(EnumChatFormat.RED);
+                    icommandlistener.sendMessage(chatmessage);
+                }
+            }
+
+            astring[i] = s;
+            icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.AFFECTED_ENTITIES, arraylist1.size());
+            if (arraylist1.size() == 0) {
+                throw new ExceptionUsage("commands.scoreboard.allMatchesFailed", new Object[0]);
+            } else {
+                return true;
+            }
+        }
+    }
+
+    protected Scoreboard d() {
+        return MinecraftServer.getServer().getWorldServer(0).getScoreboard();
+    }
+
+    protected ScoreboardObjective a(String s, boolean flag) throws CommandException {
+        Scoreboard scoreboard = this.d();
+        ScoreboardObjective scoreboardobjective = scoreboard.getObjective(s);
+
+        if (scoreboardobjective == null) {
+            throw new CommandException("commands.scoreboard.objectiveNotFound", new Object[] { s});
+        } else if (flag && scoreboardobjective.getCriteria().isReadOnly()) {
+            throw new CommandException("commands.scoreboard.objectiveReadOnly", new Object[] { s});
+        } else {
+            return scoreboardobjective;
+        }
+    }
+
+    protected ScoreboardTeam e(String s) throws CommandException {
+        Scoreboard scoreboard = this.d();
+        ScoreboardTeam scoreboardteam = scoreboard.getTeam(s);
+
+        if (scoreboardteam == null) {
+            throw new CommandException("commands.scoreboard.teamNotFound", new Object[] { s});
+        } else {
+            return scoreboardteam;
+        }
+    }
+
+    protected void b(ICommandListener icommandlistener, String[] astring, int i) throws CommandException {
+        String s = astring[i++];
+        String s1 = astring[i++];
+        Scoreboard scoreboard = this.d();
+        IScoreboardCriteria iscoreboardcriteria = (IScoreboardCriteria) IScoreboardCriteria.criteria.get(s1);
+
+        if (iscoreboardcriteria == null) {
+            throw new ExceptionUsage("commands.scoreboard.objectives.add.wrongType", new Object[] { s1});
+        } else if (scoreboard.getObjective(s) != null) {
+            throw new CommandException("commands.scoreboard.objectives.add.alreadyExists", new Object[] { s});
+        } else if (s.length() > 16) {
+            throw new ExceptionInvalidSyntax("commands.scoreboard.objectives.add.tooLong", new Object[] { s, Integer.valueOf(16)});
+        } else if (s.length() == 0) {
+            throw new ExceptionUsage("commands.scoreboard.objectives.add.usage", new Object[0]);
+        } else {
+            if (astring.length > i) {
+                String s2 = a(icommandlistener, astring, i).c();
+
+                if (s2.length() > 32) {
+                    throw new ExceptionInvalidSyntax("commands.scoreboard.objectives.add.displayTooLong", new Object[] { s2, Integer.valueOf(32)});
+                }
+
+                if (s2.length() > 0) {
+                    scoreboard.registerObjective(s, iscoreboardcriteria).setDisplayName(s2);
+                } else {
+                    scoreboard.registerObjective(s, iscoreboardcriteria);
+                }
+            } else {
+                scoreboard.registerObjective(s, iscoreboardcriteria);
+            }
+
+            a(icommandlistener, this, "commands.scoreboard.objectives.add.success", new Object[] { s});
+        }
+    }
+
+    protected void c(ICommandListener icommandlistener, String[] astring, int i) throws CommandException {
+        String s = astring[i++];
+        Scoreboard scoreboard = this.d();
+
+        if (scoreboard.getTeam(s) != null) {
+            throw new CommandException("commands.scoreboard.teams.add.alreadyExists", new Object[] { s});
+        } else if (s.length() > 16) {
+            throw new ExceptionInvalidSyntax("commands.scoreboard.teams.add.tooLong", new Object[] { s, Integer.valueOf(16)});
+        } else if (s.length() == 0) {
+            throw new ExceptionUsage("commands.scoreboard.teams.add.usage", new Object[0]);
+        } else {
+            if (astring.length > i) {
+                String s1 = a(icommandlistener, astring, i).c();
+
+                if (s1.length() > 32) {
+                    throw new ExceptionInvalidSyntax("commands.scoreboard.teams.add.displayTooLong", new Object[] { s1, Integer.valueOf(32)});
+                }
+
+                if (s1.length() > 0) {
+                    scoreboard.createTeam(s).setDisplayName(s1);
+                } else {
+                    scoreboard.createTeam(s);
+                }
+            } else {
+                scoreboard.createTeam(s);
+            }
+
+            a(icommandlistener, this, "commands.scoreboard.teams.add.success", new Object[] { s});
+        }
+    }
+
+    protected void d(ICommandListener icommandlistener, String[] astring, int i) throws CommandException {
+        ScoreboardTeam scoreboardteam = this.e(astring[i++]);
+
+        if (scoreboardteam != null) {
+            String s = astring[i++].toLowerCase();
+
+            if (!s.equalsIgnoreCase("color") && !s.equalsIgnoreCase("friendlyfire") && !s.equalsIgnoreCase("seeFriendlyInvisibles") && !s.equalsIgnoreCase("nametagVisibility") && !s.equalsIgnoreCase("deathMessageVisibility")) {
+                throw new ExceptionUsage("commands.scoreboard.teams.option.usage", new Object[0]);
+            } else if (astring.length == 4) {
+                if (s.equalsIgnoreCase("color")) {
+                    throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", new Object[] { s, a(EnumChatFormat.a(true, false))});
+                } else if (!s.equalsIgnoreCase("friendlyfire") && !s.equalsIgnoreCase("seeFriendlyInvisibles")) {
+                    if (!s.equalsIgnoreCase("nametagVisibility") && !s.equalsIgnoreCase("deathMessageVisibility")) {
+                        throw new ExceptionUsage("commands.scoreboard.teams.option.usage", new Object[0]);
+                    } else {
+                        throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", new Object[] { s, a((Object[]) ScoreboardTeamBase.EnumNameTagVisibility.a())});
+                    }
+                } else {
+                    throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", new Object[] { s, a((Collection) Arrays.asList(new String[] { "true", "false"}))});
+                }
+            } else {
+                String s1 = astring[i];
+
+                if (s.equalsIgnoreCase("color")) {
+                    EnumChatFormat enumchatformat = EnumChatFormat.b(s1);
+
+                    if (enumchatformat == null || enumchatformat.isFormat()) {
+                        throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", new Object[] { s, a(EnumChatFormat.a(true, false))});
+                    }
+
+                    scoreboardteam.a(enumchatformat);
+                    scoreboardteam.setPrefix(enumchatformat.toString());
+                    scoreboardteam.setSuffix(EnumChatFormat.RESET.toString());
+                } else if (s.equalsIgnoreCase("friendlyfire")) {
+                    if (!s1.equalsIgnoreCase("true") && !s1.equalsIgnoreCase("false")) {
+                        throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", new Object[] { s, a((Collection) Arrays.asList(new String[] { "true", "false"}))});
+                    }
+
+                    scoreboardteam.setAllowFriendlyFire(s1.equalsIgnoreCase("true"));
+                } else if (s.equalsIgnoreCase("seeFriendlyInvisibles")) {
+                    if (!s1.equalsIgnoreCase("true") && !s1.equalsIgnoreCase("false")) {
+                        throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", new Object[] { s, a((Collection) Arrays.asList(new String[] { "true", "false"}))});
+                    }
+
+                    scoreboardteam.setCanSeeFriendlyInvisibles(s1.equalsIgnoreCase("true"));
+                } else {
+                    ScoreboardTeamBase.EnumNameTagVisibility scoreboardteambase_enumnametagvisibility;
+
+                    if (s.equalsIgnoreCase("nametagVisibility")) {
+                        scoreboardteambase_enumnametagvisibility = ScoreboardTeamBase.EnumNameTagVisibility.a(s1);
+                        if (scoreboardteambase_enumnametagvisibility == null) {
+                            throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", new Object[] { s, a((Object[]) ScoreboardTeamBase.EnumNameTagVisibility.a())});
+                        }
+
+                        scoreboardteam.setNameTagVisibility(scoreboardteambase_enumnametagvisibility);
+                    } else if (s.equalsIgnoreCase("deathMessageVisibility")) {
+                        scoreboardteambase_enumnametagvisibility = ScoreboardTeamBase.EnumNameTagVisibility.a(s1);
+                        if (scoreboardteambase_enumnametagvisibility == null) {
+                            throw new ExceptionUsage("commands.scoreboard.teams.option.noValue", new Object[] { s, a((Object[]) ScoreboardTeamBase.EnumNameTagVisibility.a())});
+                        }
+
+                        scoreboardteam.b(scoreboardteambase_enumnametagvisibility);
+                    }
+                }
+
+                a(icommandlistener, this, "commands.scoreboard.teams.option.success", new Object[] { s, scoreboardteam.getName(), s1});
+            }
+        }
+    }
+
+    protected void e(ICommandListener icommandlistener, String[] astring, int i) throws CommandException {
+        Scoreboard scoreboard = this.d();
+        ScoreboardTeam scoreboardteam = this.e(astring[i]);
+
+        if (scoreboardteam != null) {
+            scoreboard.removeTeam(scoreboardteam);
+            a(icommandlistener, this, "commands.scoreboard.teams.remove.success", new Object[] { scoreboardteam.getName()});
+        }
+    }
+
+    protected void f(ICommandListener icommandlistener, String[] astring, int i) throws CommandException {
+        Scoreboard scoreboard = this.d();
+
+        if (astring.length > i) {
+            ScoreboardTeam scoreboardteam = this.e(astring[i]);
+
+            if (scoreboardteam == null) {
+                return;
+            }
+
+            Collection collection = scoreboardteam.getPlayerNameSet();
+
+            icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.QUERY_RESULT, collection.size());
+            if (collection.size() <= 0) {
+                throw new CommandException("commands.scoreboard.teams.list.player.empty", new Object[] { scoreboardteam.getName()});
+            }
+
+            ChatMessage chatmessage = new ChatMessage("commands.scoreboard.teams.list.player.count", new Object[] { Integer.valueOf(collection.size()), scoreboardteam.getName()});
+
+            chatmessage.getChatModifier().setColor(EnumChatFormat.DARK_GREEN);
+            icommandlistener.sendMessage(chatmessage);
+            icommandlistener.sendMessage(new ChatComponentText(a(collection.toArray())));
+        } else {
+            Collection collection1 = scoreboard.getTeams();
+
+            icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.QUERY_RESULT, collection1.size());
+            if (collection1.size() <= 0) {
+                throw new CommandException("commands.scoreboard.teams.list.empty", new Object[0]);
+            }
+
+            ChatMessage chatmessage1 = new ChatMessage("commands.scoreboard.teams.list.count", new Object[] { Integer.valueOf(collection1.size())});
+
+            chatmessage1.getChatModifier().setColor(EnumChatFormat.DARK_GREEN);
+            icommandlistener.sendMessage(chatmessage1);
+            Iterator iterator = collection1.iterator();
+
+            while (iterator.hasNext()) {
+                ScoreboardTeam scoreboardteam1 = (ScoreboardTeam) iterator.next();
+
+                icommandlistener.sendMessage(new ChatMessage("commands.scoreboard.teams.list.entry", new Object[] { scoreboardteam1.getName(), scoreboardteam1.getDisplayName(), Integer.valueOf(scoreboardteam1.getPlayerNameSet().size())}));
+            }
+        }
+
+    }
+
+    protected void g(ICommandListener icommandlistener, String[] astring, int i) throws CommandException {
+        Scoreboard scoreboard = this.d();
+        String s = astring[i++];
+        HashSet hashset = Sets.newHashSet();
+        HashSet hashset1 = Sets.newHashSet();
+        String s1;
+
+        if (icommandlistener instanceof EntityHuman && i == astring.length) {
+            s1 = b(icommandlistener).getName();
+            if (scoreboard.addPlayerToTeam(s1, s)) {
+                hashset.add(s1);
+            } else {
+                hashset1.add(s1);
+            }
+        } else {
+            while (i < astring.length) {
+                s1 = astring[i++];
+                if (s1.startsWith("@")) {
+                    List list = c(icommandlistener, s1);
+                    Iterator iterator = list.iterator();
+
+                    while (iterator.hasNext()) {
+                        Entity entity = (Entity) iterator.next();
+                        String s2 = e(icommandlistener, entity.getUniqueID().toString());
+
+                        if (scoreboard.addPlayerToTeam(s2, s)) {
+                            hashset.add(s2);
+                        } else {
+                            hashset1.add(s2);
+                        }
+                    }
+                } else {
+                    String s3 = e(icommandlistener, s1);
+
+                    if (scoreboard.addPlayerToTeam(s3, s)) {
+                        hashset.add(s3);
+                    } else {
+                        hashset1.add(s3);
+                    }
+                }
+            }
+        }
+
+        if (!hashset.isEmpty()) {
+            icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.AFFECTED_ENTITIES, hashset.size());
+            a(icommandlistener, this, "commands.scoreboard.teams.join.success", new Object[] { Integer.valueOf(hashset.size()), s, a(hashset.toArray(new String[hashset.size()]))});
+        }
+
+        if (!hashset1.isEmpty()) {
+            throw new CommandException("commands.scoreboard.teams.join.failure", new Object[] { Integer.valueOf(hashset1.size()), s, a(hashset1.toArray(new String[hashset1.size()]))});
+        }
+    }
+
+    protected void h(ICommandListener icommandlistener, String[] astring, int i) throws CommandException {
+        Scoreboard scoreboard = this.d();
+        HashSet hashset = Sets.newHashSet();
+        HashSet hashset1 = Sets.newHashSet();
+        String s;
+
+        if (icommandlistener instanceof EntityHuman && i == astring.length) {
+            s = b(icommandlistener).getName();
+            if (scoreboard.removePlayerFromTeam(s)) {
+                hashset.add(s);
+            } else {
+                hashset1.add(s);
+            }
+        } else {
+            while (i < astring.length) {
+                s = astring[i++];
+                if (s.startsWith("@")) {
+                    List list = c(icommandlistener, s);
+                    Iterator iterator = list.iterator();
+
+                    while (iterator.hasNext()) {
+                        Entity entity = (Entity) iterator.next();
+                        String s1 = e(icommandlistener, entity.getUniqueID().toString());
+
+                        if (scoreboard.removePlayerFromTeam(s1)) {
+                            hashset.add(s1);
+                        } else {
+                            hashset1.add(s1);
+                        }
+                    }
+                } else {
+                    String s2 = e(icommandlistener, s);
+
+                    if (scoreboard.removePlayerFromTeam(s2)) {
+                        hashset.add(s2);
+                    } else {
+                        hashset1.add(s2);
+                    }
+                }
+            }
+        }
+
+        if (!hashset.isEmpty()) {
+            icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.AFFECTED_ENTITIES, hashset.size());
+            a(icommandlistener, this, "commands.scoreboard.teams.leave.success", new Object[] { Integer.valueOf(hashset.size()), a(hashset.toArray(new String[hashset.size()]))});
+        }
+
+        if (!hashset1.isEmpty()) {
+            throw new CommandException("commands.scoreboard.teams.leave.failure", new Object[] { Integer.valueOf(hashset1.size()), a(hashset1.toArray(new String[hashset1.size()]))});
+        }
+    }
+
+    protected void i(ICommandListener icommandlistener, String[] astring, int i) throws CommandException {
+        Scoreboard scoreboard = this.d();
+        ScoreboardTeam scoreboardteam = this.e(astring[i]);
+
+        if (scoreboardteam != null) {
+            ArrayList arraylist = Lists.newArrayList(scoreboardteam.getPlayerNameSet());
+
+            icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.AFFECTED_ENTITIES, arraylist.size());
+            if (arraylist.isEmpty()) {
+                throw new CommandException("commands.scoreboard.teams.empty.alreadyEmpty", new Object[] { scoreboardteam.getName()});
+            } else {
+                Iterator iterator = arraylist.iterator();
+
+                while (iterator.hasNext()) {
+                    String s = (String) iterator.next();
+
+                    scoreboard.removePlayerFromTeam(s, scoreboardteam);
+                }
+
+                a(icommandlistener, this, "commands.scoreboard.teams.empty.success", new Object[] { Integer.valueOf(arraylist.size()), scoreboardteam.getName()});
+            }
+        }
+    }
+
+    protected void h(ICommandListener icommandlistener, String s) throws CommandException {
+        Scoreboard scoreboard = this.d();
+        ScoreboardObjective scoreboardobjective = this.a(s, false);
+
+        scoreboard.unregisterObjective(scoreboardobjective);
+        a(icommandlistener, this, "commands.scoreboard.objectives.remove.success", new Object[] { s});
+    }
+
+    protected void d(ICommandListener icommandlistener) throws CommandException {
+        Scoreboard scoreboard = this.d();
+        Collection collection = scoreboard.getObjectives();
+
+        if (collection.size() <= 0) {
+            throw new CommandException("commands.scoreboard.objectives.list.empty", new Object[0]);
+        } else {
+            ChatMessage chatmessage = new ChatMessage("commands.scoreboard.objectives.list.count", new Object[] { Integer.valueOf(collection.size())});
+
+            chatmessage.getChatModifier().setColor(EnumChatFormat.DARK_GREEN);
+            icommandlistener.sendMessage(chatmessage);
+            Iterator iterator = collection.iterator();
+
+            while (iterator.hasNext()) {
+                ScoreboardObjective scoreboardobjective = (ScoreboardObjective) iterator.next();
+
+                icommandlistener.sendMessage(new ChatMessage("commands.scoreboard.objectives.list.entry", new Object[] { scoreboardobjective.getName(), scoreboardobjective.getDisplayName(), scoreboardobjective.getCriteria().getName()}));
+            }
+
+        }
+    }
+
+    protected void j(ICommandListener icommandlistener, String[] astring, int i) throws CommandException {
+        Scoreboard scoreboard = this.d();
+        String s = astring[i++];
+        int j = Scoreboard.getSlotForName(s);
+        ScoreboardObjective scoreboardobjective = null;
+
+        if (astring.length == 4) {
+            scoreboardobjective = this.a(astring[i], false);
+        }
+
+        if (j < 0) {
+            throw new CommandException("commands.scoreboard.objectives.setdisplay.invalidSlot", new Object[] { s});
+        } else {
+            scoreboard.setDisplaySlot(j, scoreboardobjective);
+            if (scoreboardobjective != null) {
+                a(icommandlistener, this, "commands.scoreboard.objectives.setdisplay.successSet", new Object[] { Scoreboard.getSlotName(j), scoreboardobjective.getName()});
+            } else {
+                a(icommandlistener, this, "commands.scoreboard.objectives.setdisplay.successCleared", new Object[] { Scoreboard.getSlotName(j)});
+            }
+
+        }
+    }
+
+    protected void k(ICommandListener icommandlistener, String[] astring, int i) throws CommandException {
+        Scoreboard scoreboard = this.d();
+
+        if (astring.length > i) {
+            String s = e(icommandlistener, astring[i]);
+            Map map = scoreboard.getPlayerObjectives(s);
+
+            icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.QUERY_RESULT, map.size());
+            if (map.size() <= 0) {
+                throw new CommandException("commands.scoreboard.players.list.player.empty", new Object[] { s});
+            }
+
+            ChatMessage chatmessage = new ChatMessage("commands.scoreboard.players.list.player.count", new Object[] { Integer.valueOf(map.size()), s});
+
+            chatmessage.getChatModifier().setColor(EnumChatFormat.DARK_GREEN);
+            icommandlistener.sendMessage(chatmessage);
+            Iterator iterator = map.values().iterator();
+
+            while (iterator.hasNext()) {
+                ScoreboardScore scoreboardscore = (ScoreboardScore) iterator.next();
+
+                icommandlistener.sendMessage(new ChatMessage("commands.scoreboard.players.list.player.entry", new Object[] { Integer.valueOf(scoreboardscore.getScore()), scoreboardscore.getObjective().getDisplayName(), scoreboardscore.getObjective().getName()}));
+            }
+        } else {
+            Collection collection = scoreboard.getPlayers();
+
+            icommandlistener.a(CommandObjectiveExecutor.EnumCommandResult.QUERY_RESULT, collection.size());
+            if (collection.size() <= 0) {
+                throw new CommandException("commands.scoreboard.players.list.empty", new Object[0]);
+            }
+
+            ChatMessage chatmessage1 = new ChatMessage("commands.scoreboard.players.list.count", new Object[] { Integer.valueOf(collection.size())});
+
+            chatmessage1.getChatModifier().setColor(EnumChatFormat.DARK_GREEN);
+            icommandlistener.sendMessage(chatmessage1);
+            icommandlistener.sendMessage(new ChatComponentText(a(collection.toArray())));
+        }
+
+    }
+
+    protected void l(ICommandListener icommandlistener, String[] astring, int i) throws CommandException {
+        String s = astring[i - 1];
+        int j = i;
+        String s1 = e(icommandlistener, astring[i++]);
+
+        if (s1.length() > 40) {
+            throw new ExceptionInvalidSyntax("commands.scoreboard.players.name.tooLong", new Object[] { s1, Integer.valueOf(40)});
+        } else {
+            ScoreboardObjective scoreboardobjective = this.a(astring[i++], true);
+            int k = s.equalsIgnoreCase("set") ? a(astring[i++]) : a(astring[i++], 0);
+
+            if (astring.length > i) {
+                Entity entity = b(icommandlistener, astring[j]);
+
+                try {
+                    NBTTagCompound nbttagcompound = MojangsonParser.parse(a(astring, i));
+                    NBTTagCompound nbttagcompound1 = new NBTTagCompound();
+
+                    entity.e(nbttagcompound1);
+                    if (!GameProfileSerializer.a(nbttagcompound, nbttagcompound1, true)) {
+                        throw new CommandException("commands.scoreboard.players.set.tagMismatch", new Object[] { s1});
+                    }
+                } catch (MojangsonParseException mojangsonparseexception) {
+                    throw new CommandException("commands.scoreboard.players.set.tagError", new Object[] { mojangsonparseexception.getMessage()});
+                }
+            }
+
+            Scoreboard scoreboard = this.d();
+            ScoreboardScore scoreboardscore = scoreboard.getPlayerScoreForObjective(s1, scoreboardobjective);
+
+            if (s.equalsIgnoreCase("set")) {
+                scoreboardscore.setScore(k);
+            } else if (s.equalsIgnoreCase("add")) {
+                scoreboardscore.addScore(k);
+            } else {
+                scoreboardscore.removeScore(k);
+            }
+
+            a(icommandlistener, this, "commands.scoreboard.players.set.success", new Object[] { scoreboardobjective.getName(), s1, Integer.valueOf(scoreboardscore.getScore())});
+        }
+    }
+
+    protected void m(ICommandListener icommandlistener, String[] astring, int i) throws CommandException {
+        Scoreboard scoreboard = this.d();
+        String s = e(icommandlistener, astring[i++]);
+
+        if (astring.length > i) {
+            ScoreboardObjective scoreboardobjective = this.a(astring[i++], false);
+
+            scoreboard.resetPlayerScores(s, scoreboardobjective);
+            a(icommandlistener, this, "commands.scoreboard.players.resetscore.success", new Object[] { scoreboardobjective.getName(), s});
+        } else {
+            scoreboard.resetPlayerScores(s, (ScoreboardObjective) null);
+            a(icommandlistener, this, "commands.scoreboard.players.reset.success", new Object[] { s});
+        }
+
+    }
+
+    protected void n(ICommandListener icommandlistener, String[] astring, int i) throws CommandException {
+        Scoreboard scoreboard = this.d();
+        String s = d(icommandlistener, astring[i++]);
+
+        if (s.length() > 40) {
+            throw new ExceptionInvalidSyntax("commands.scoreboard.players.name.tooLong", new Object[] { s, Integer.valueOf(40)});
+        } else {
+            ScoreboardObjective scoreboardobjective = this.a(astring[i], false);
+
+            if (scoreboardobjective.getCriteria() != IScoreboardCriteria.c) {
+                throw new CommandException("commands.scoreboard.players.enable.noTrigger", new Object[] { scoreboardobjective.getName()});
+            } else {
+                ScoreboardScore scoreboardscore = scoreboard.getPlayerScoreForObjective(s, scoreboardobjective);
+
+                scoreboardscore.a(false);
+                a(icommandlistener, this, "commands.scoreboard.players.enable.success", new Object[] { scoreboardobjective.getName(), s});
+            }
+        }
+    }
+
+    protected void o(ICommandListener icommandlistener, String[] astring, int i) throws CommandException {
+        Scoreboard scoreboard = this.d();
+        String s = e(icommandlistener, astring[i++]);
+
+        if (s.length() > 40) {
+            throw new ExceptionInvalidSyntax("commands.scoreboard.players.name.tooLong", new Object[] { s, Integer.valueOf(40)});
+        } else {
+            ScoreboardObjective scoreboardobjective = this.a(astring[i++], false);
+
+            if (!scoreboard.b(s, scoreboardobjective)) {
+                throw new CommandException("commands.scoreboard.players.test.notFound", new Object[] { scoreboardobjective.getName(), s});
+            } else {
+                int j = astring[i].equals("*") ? Integer.MIN_VALUE : a(astring[i]);
+
+                ++i;
+                int k = i < astring.length && !astring[i].equals("*") ? a(astring[i], j) : Integer.MAX_VALUE;
+                ScoreboardScore scoreboardscore = scoreboard.getPlayerScoreForObjective(s, scoreboardobjective);
+
+                if (scoreboardscore.getScore() >= j && scoreboardscore.getScore() <= k) {
+                    a(icommandlistener, this, "commands.scoreboard.players.test.success", new Object[] { Integer.valueOf(scoreboardscore.getScore()), Integer.valueOf(j), Integer.valueOf(k)});
+                } else {
+                    throw new CommandException("commands.scoreboard.players.test.failed", new Object[] { Integer.valueOf(scoreboardscore.getScore()), Integer.valueOf(j), Integer.valueOf(k)});
+                }
+            }
+        }
+    }
+
+    protected void p(ICommandListener icommandlistener, String[] astring, int i) throws CommandException {
+        Scoreboard scoreboard = this.d();
+        String s = e(icommandlistener, astring[i++]);
+        ScoreboardObjective scoreboardobjective = this.a(astring[i++], true);
+        String s1 = astring[i++];
+        String s2 = e(icommandlistener, astring[i++]);
+        ScoreboardObjective scoreboardobjective1 = this.a(astring[i], false);
+
+        if (s.length() > 40) {
+            throw new ExceptionInvalidSyntax("commands.scoreboard.players.name.tooLong", new Object[] { s, Integer.valueOf(40)});
+        } else if (s2.length() > 40) {
+            throw new ExceptionInvalidSyntax("commands.scoreboard.players.name.tooLong", new Object[] { s2, Integer.valueOf(40)});
+        } else {
+            ScoreboardScore scoreboardscore = scoreboard.getPlayerScoreForObjective(s, scoreboardobjective);
+
+            if (!scoreboard.b(s2, scoreboardobjective1)) {
+                throw new CommandException("commands.scoreboard.players.operation.notFound", new Object[] { scoreboardobjective1.getName(), s2});
+            } else {
+                ScoreboardScore scoreboardscore1 = scoreboard.getPlayerScoreForObjective(s2, scoreboardobjective1);
+
+                if (s1.equals("+=")) {
+                    scoreboardscore.setScore(scoreboardscore.getScore() + scoreboardscore1.getScore());
+                } else if (s1.equals("-=")) {
+                    scoreboardscore.setScore(scoreboardscore.getScore() - scoreboardscore1.getScore());
+                } else if (s1.equals("*=")) {
+                    scoreboardscore.setScore(scoreboardscore.getScore() * scoreboardscore1.getScore());
+                } else if (s1.equals("/=")) {
+                    if (scoreboardscore1.getScore() != 0) {
+                        scoreboardscore.setScore(scoreboardscore.getScore() / scoreboardscore1.getScore());
+                    }
+                } else if (s1.equals("%=")) {
+                    if (scoreboardscore1.getScore() != 0) {
+                        scoreboardscore.setScore(scoreboardscore.getScore() % scoreboardscore1.getScore());
+                    }
+                } else if (s1.equals("=")) {
+                    scoreboardscore.setScore(scoreboardscore1.getScore());
+                } else if (s1.equals("<")) {
+                    scoreboardscore.setScore(Math.min(scoreboardscore.getScore(), scoreboardscore1.getScore()));
+                } else if (s1.equals(">")) {
+                    scoreboardscore.setScore(Math.max(scoreboardscore.getScore(), scoreboardscore1.getScore()));
+                } else {
+                    if (!s1.equals("><")) {
+                        throw new CommandException("commands.scoreboard.players.operation.invalidOperation", new Object[] { s1});
+                    }
+
+                    int j = scoreboardscore.getScore();
+
+                    scoreboardscore.setScore(scoreboardscore1.getScore());
+                    scoreboardscore1.setScore(j);
+                }
+
+                a(icommandlistener, this, "commands.scoreboard.players.operation.success", new Object[0]);
+            }
+        }
+    }
+
+    public List<String> tabComplete(ICommandListener icommandlistener, String[] astring, BlockPosition blockposition) {
+        if (astring.length == 1) {
+            return a(astring, new String[] { "objectives", "players", "teams"});
+        } else {
+            if (astring[0].equalsIgnoreCase("objectives")) {
+                if (astring.length == 2) {
+                    return a(astring, new String[] { "list", "add", "remove", "setdisplay"});
+                }
+
+                if (astring[1].equalsIgnoreCase("add")) {
+                    if (astring.length == 4) {
+                        Set set = IScoreboardCriteria.criteria.keySet();
+
+                        return a(astring, (Collection) set);
+                    }
+                } else if (astring[1].equalsIgnoreCase("remove")) {
+                    if (astring.length == 3) {
+                        return a(astring, (Collection) this.a(false));
+                    }
+                } else if (astring[1].equalsIgnoreCase("setdisplay")) {
+                    if (astring.length == 3) {
+                        return a(astring, Scoreboard.h());
+                    }
+
+                    if (astring.length == 4) {
+                        return a(astring, (Collection) this.a(false));
+                    }
+                }
+            } else if (astring[0].equalsIgnoreCase("players")) {
+                if (astring.length == 2) {
+                    return a(astring, new String[] { "set", "add", "remove", "reset", "list", "enable", "test", "operation"});
+                }
+
+                if (!astring[1].equalsIgnoreCase("set") && !astring[1].equalsIgnoreCase("add") && !astring[1].equalsIgnoreCase("remove") && !astring[1].equalsIgnoreCase("reset")) {
+                    if (astring[1].equalsIgnoreCase("enable")) {
+                        if (astring.length == 3) {
+                            return a(astring, MinecraftServer.getServer().getPlayers());
+                        }
+
+                        if (astring.length == 4) {
+                            return a(astring, (Collection) this.e());
+                        }
+                    } else if (!astring[1].equalsIgnoreCase("list") && !astring[1].equalsIgnoreCase("test")) {
+                        if (astring[1].equalsIgnoreCase("operation")) {
+                            if (astring.length == 3) {
+                                return a(astring, this.d().getPlayers());
+                            }
+
+                            if (astring.length == 4) {
+                                return a(astring, (Collection) this.a(true));
+                            }
+
+                            if (astring.length == 5) {
+                                return a(astring, new String[] { "+=", "-=", "*=", "/=", "%=", "=", "<", ">", "><"});
+                            }
+
+                            if (astring.length == 6) {
+                                return a(astring, MinecraftServer.getServer().getPlayers());
+                            }
+
+                            if (astring.length == 7) {
+                                return a(astring, (Collection) this.a(false));
+                            }
+                        }
+                    } else {
+                        if (astring.length == 3) {
+                            return a(astring, this.d().getPlayers());
+                        }
+
+                        if (astring.length == 4 && astring[1].equalsIgnoreCase("test")) {
+                            return a(astring, (Collection) this.a(false));
+                        }
+                    }
+                } else {
+                    if (astring.length == 3) {
+                        return a(astring, MinecraftServer.getServer().getPlayers());
+                    }
+
+                    if (astring.length == 4) {
+                        return a(astring, (Collection) this.a(true));
+                    }
+                }
+            } else if (astring[0].equalsIgnoreCase("teams")) {
+                if (astring.length == 2) {
+                    return a(astring, new String[] { "add", "remove", "join", "leave", "empty", "list", "option"});
+                }
+
+                if (astring[1].equalsIgnoreCase("join")) {
+                    if (astring.length == 3) {
+                        return a(astring, this.d().getTeamNames());
+                    }
+
+                    if (astring.length >= 4) {
+                        return a(astring, MinecraftServer.getServer().getPlayers());
+                    }
+                } else {
+                    if (astring[1].equalsIgnoreCase("leave")) {
+                        return a(astring, MinecraftServer.getServer().getPlayers());
+                    }
+
+                    if (!astring[1].equalsIgnoreCase("empty") && !astring[1].equalsIgnoreCase("list") && !astring[1].equalsIgnoreCase("remove")) {
+                        if (astring[1].equalsIgnoreCase("option")) {
+                            if (astring.length == 3) {
+                                return a(astring, this.d().getTeamNames());
+                            }
+
+                            if (astring.length == 4) {
+                                return a(astring, new String[] { "color", "friendlyfire", "seeFriendlyInvisibles", "nametagVisibility", "deathMessageVisibility"});
+                            }
+
+                            if (astring.length == 5) {
+                                if (astring[3].equalsIgnoreCase("color")) {
+                                    return a(astring, EnumChatFormat.a(true, false));
+                                }
+
+                                if (astring[3].equalsIgnoreCase("nametagVisibility") || astring[3].equalsIgnoreCase("deathMessageVisibility")) {
+                                    return a(astring, ScoreboardTeamBase.EnumNameTagVisibility.a());
+                                }
+
+                                if (astring[3].equalsIgnoreCase("friendlyfire") || astring[3].equalsIgnoreCase("seeFriendlyInvisibles")) {
+                                    return a(astring, new String[] { "true", "false"});
+                                }
+                            }
+                        }
+                    } else if (astring.length == 3) {
+                        return a(astring, this.d().getTeamNames());
+                    }
+                }
+            }
+
+            return null;
+        }
+    }
+
+    protected List<String> a(boolean flag) {
+        Collection collection = this.d().getObjectives();
+        ArrayList arraylist = Lists.newArrayList();
+        Iterator iterator = collection.iterator();
+
+        while (iterator.hasNext()) {
+            ScoreboardObjective scoreboardobjective = (ScoreboardObjective) iterator.next();
+
+            if (!flag || !scoreboardobjective.getCriteria().isReadOnly()) {
+                arraylist.add(scoreboardobjective.getName());
+            }
+        }
+
+        return arraylist;
+    }
+
+    protected List<String> e() {
+        Collection collection = this.d().getObjectives();
+        ArrayList arraylist = Lists.newArrayList();
+        Iterator iterator = collection.iterator();
+
+        while (iterator.hasNext()) {
+            ScoreboardObjective scoreboardobjective = (ScoreboardObjective) iterator.next();
+
+            if (scoreboardobjective.getCriteria() == IScoreboardCriteria.c) {
+                arraylist.add(scoreboardobjective.getName());
+            }
+        }
+
+        return arraylist;
+    }
+
+    public boolean isListStart(String[] astring, int i) {
+        return !astring[0].equalsIgnoreCase("players") ? (astring[0].equalsIgnoreCase("teams") ? i == 2 : false) : (astring.length > 1 && astring[1].equalsIgnoreCase("operation") ? i == 2 || i == 5 : i == 2);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EULA.java b/src/main/java/net/minecraft/server/EULA.java
new file mode 100644
index 00000000..c872029d
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EULA.java
@@ -0,0 +1,62 @@
+package net.minecraft.server;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.util.Properties;
+import org.apache.commons.io.IOUtils;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class EULA {
+
+    private static final Logger a = LogManager.getLogger();
+    private final File b;
+    private final boolean c;
+
+    public EULA(File file) {
+        this.b = file;
+        this.c = this.a(file);
+    }
+
+    private boolean a(File file) {
+        FileInputStream fileinputstream = null;
+        boolean flag = false;
+
+        try {
+            Properties properties = new Properties();
+
+            fileinputstream = new FileInputStream(file);
+            properties.load(fileinputstream);
+            flag = Boolean.parseBoolean(properties.getProperty("eula", "false"));
+        } catch (Exception exception) {
+            EULA.a.warn("Failed to load " + file);
+            this.b();
+        } finally {
+            IOUtils.closeQuietly(fileinputstream);
+        }
+
+        return flag;
+    }
+
+    public boolean a() {
+        return this.c;
+    }
+
+    public void b() {
+        FileOutputStream fileoutputstream = null;
+
+        try {
+            Properties properties = new Properties();
+
+            fileoutputstream = new FileOutputStream(this.b);
+            properties.setProperty("eula", "false");
+            properties.store(fileoutputstream, "By changing the setting below to TRUE you are indicating your agreement to our EULA (https://account.mojang.com/documents/minecraft_eula).");
+        } catch (Exception exception) {
+            EULA.a.warn("Failed to save " + this.b, exception);
+        } finally {
+            IOUtils.closeQuietly(fileoutputstream);
+        }
+
+    }
+}
diff --git a/src/main/java/net/minecraft/server/IBlockState.java b/src/main/java/net/minecraft/server/IBlockState.java
new file mode 100644
index 00000000..7e35d335
--- /dev/null
+++ b/src/main/java/net/minecraft/server/IBlockState.java
@@ -0,0 +1,14 @@
+package net.minecraft.server;
+
+import java.util.Collection;
+
+public interface IBlockState<T extends Comparable<T>> {
+
+    String a();
+
+    Collection<T> c();
+
+    Class<T> b();
+
+    String a(T t0);
+}
diff --git a/src/main/java/net/minecraft/server/PacketLoginInEncryptionBegin.java b/src/main/java/net/minecraft/server/PacketLoginInEncryptionBegin.java
new file mode 100644
index 00000000..6385ab2d
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketLoginInEncryptionBegin.java
@@ -0,0 +1,39 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+import java.security.PrivateKey;
+import javax.crypto.SecretKey;
+
+public class PacketLoginInEncryptionBegin implements Packet<PacketLoginInListener> {
+
+    private byte[] a = new byte[0];
+    private byte[] b = new byte[0];
+
+    public PacketLoginInEncryptionBegin() {}
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.a();
+        this.b = packetdataserializer.a();
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.a(this.a);
+        packetdataserializer.a(this.b);
+    }
+
+    public void a(PacketLoginInListener packetlogininlistener) {
+        packetlogininlistener.a(this);
+    }
+
+    public SecretKey a(PrivateKey privatekey) {
+        return MinecraftEncryption.a(privatekey, this.a);
+    }
+
+    public byte[] b(PrivateKey privatekey) {
+        return privatekey == null ? this.b : MinecraftEncryption.b(privatekey, this.b);
+    }
+
+    public void a(PacketListener packetlistener) {
+        this.a((PacketLoginInListener) packetlistener);
+    }
+}
-- 
2.13.1

