From 7b28d857f8583773fd4fa1a7a616d7b515dcaa45 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Wed, 4 Jul 2018 02:10:36 -0400
Subject: [PATCH] Store reference to current Chunk for Entity and Block
 Entities

This enables us a fast reference to the entities current chunk instead
of having to look it up by hashmap lookups.

diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 590fab670..193cfe147 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -26,7 +26,7 @@ public class Chunk {
     private final byte[] e;
     private final int[] f;
     private final boolean[] g;
-    private boolean h;
+    private boolean h; public boolean isLoaded() { return h; } // Paper - OBFHELPER
     public final World world;
     public final int[] heightMap;
     public final int locX;
@@ -34,6 +34,30 @@ public class Chunk {
     private boolean k;
     public final Map<BlockPosition, TileEntity> tileEntities;
     public final List<Entity>[] entitySlices; // Spigot
+    // Paper start
+    private class TileEntityHashMap extends java.util.HashMap<BlockPosition, TileEntity> {
+        @Override
+        public TileEntity put(BlockPosition key, TileEntity value) {
+            TileEntity replaced = super.put(key, value);
+            if (replaced != null) {
+                replaced.setCurrentChunk(null);
+            }
+            if (value != null) {
+                value.setCurrentChunk(Chunk.this);
+            }
+            return replaced;
+        }
+
+        @Override
+        public TileEntity remove(Object key) {
+            TileEntity removed = super.remove(key);
+            if (removed != null) {
+                removed.setCurrentChunk(null);
+            }
+            return removed;
+        }
+    }
+    // Paper end
     // PaperSpigot start - track the number of minecarts and items
     // Keep this synced with entitySlices.add() and entitySlices.remove()
     private final int[] itemCounts = new int[16];
@@ -131,7 +155,7 @@ public class Chunk {
         this.e = new byte[256];
         this.f = new int[256];
         this.g = new boolean[256];
-        this.tileEntities = Maps.newHashMap();
+        this.tileEntities = new TileEntityHashMap(); // Paper
         this.v = 4096;
         this.w = Queues.newConcurrentLinkedQueue();
         this.entitySlices = (List[]) (new List[16]); // Spigot
@@ -740,6 +764,7 @@ public class Chunk {
         entity.af = k;
         entity.ag = this.locZ;
         this.entitySlices[k].add(entity);
+        entity.setCurrentChunk(this); // Paper
         // PaperSpigot start - update counts
         if (entity instanceof EntityItem) {
             itemCounts[k]++;
@@ -778,6 +803,7 @@ public class Chunk {
             i = this.entitySlices.length - 1;
         }
 
+        entity.setCurrentChunk(null); // Paper
         if (!this.entitySlices[i].remove(entity)) return; // TacoSpigot
         // PaperSpigot start - update counts
         if (entity instanceof EntityItem) {
@@ -946,6 +972,7 @@ public class Chunk {
                     }
                 }
                 // Spigot End
+                entity.setCurrentChunk(null); // Paper
 
                 // Do not pass along players, as doing so can get them stuck outside of time.
                 // (which for example disables inventory icon updates and prevents block breaking)
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index c4bfd5fe6..c45a57735 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -101,7 +101,7 @@ public abstract class Entity implements ICommandListener {
     protected DataWatcher datawatcher;
     private double ar;
     private double as;
-    public boolean ad;
+    public boolean ad; public boolean isAddedToChunk0() { return ad; } // Paper - OBFHELPER
     // PaperSpigot start - EAR: Fix bug with teleporting entities
     public boolean isAddedToChunk() {
         int chunkX = MathHelper.floor(locX / 16.0D);
@@ -153,6 +153,44 @@ public abstract class Entity implements ICommandListener {
         this.die();
     }
 
+    // Paper start
+    private java.lang.ref.WeakReference<Chunk> currentChunk = null;
+
+    public final void setCurrentChunk(Chunk chunk) {
+        this.currentChunk = chunk != null ? new java.lang.ref.WeakReference<>(chunk) : null;
+    }
+
+    /**
+     * Returns the entities current registered chunk. If the entity is not added to a chunk yet, it will return null
+     */
+    public final Chunk getCurrentChunk() {
+        final Chunk chunk = currentChunk != null ? currentChunk.get() : null;
+        return chunk != null && chunk.isLoaded() ? chunk : (isAddedToChunk0() ? world.getChunkIfLoaded(getChunkX(), getChunkZ()) : null);
+    }
+
+    /**
+     * Returns the chunk at the location, using the entities local cache if avail
+     * Will only return null if the location specified is not loaded
+     */
+    public final Chunk getCurrentChunkAt(int x, int z) {
+        if (getChunkX() == x && getChunkZ() == z) {
+            Chunk chunk = getCurrentChunk();
+            if (chunk != null) {
+                return chunk;
+            }
+        }
+        return world.getChunkIfLoaded(x, z);
+    }
+
+    /**
+     * Returns the chunk at the entities current location, using the entities local cache if avail
+     * Will only return null if the location specified is not loaded
+     */
+    public final Chunk getChunkAtLocation() {
+        return getCurrentChunkAt(MathHelper.floor(locX) >> 4, MathHelper.floor(locZ) >> 4);
+    }
+    // Paper end
+
     public Entity(World world) {
         this.id = Entity.entityCount++;
         this.j = 1.0D;
diff --git a/src/main/java/net/minecraft/server/TileEntity.java b/src/main/java/net/minecraft/server/TileEntity.java
index fdcbf4434..48c6abf58 100644
--- a/src/main/java/net/minecraft/server/TileEntity.java
+++ b/src/main/java/net/minecraft/server/TileEntity.java
@@ -22,6 +22,23 @@ public abstract class TileEntity {
     private int h;
     protected Block e;
 
+    // Paper start
+    private Chunk currentChunk = null;
+
+    public final Chunk getCurrentChunk() {
+        final Chunk chunk = this.currentChunk;
+        return chunk != null && chunk.isLoaded() ? chunk : this.getChunkAtLocation();
+    }
+
+    public final void setCurrentChunk(Chunk chunk) {
+        this.currentChunk = chunk;
+    }
+
+    public final Chunk getChunkAtLocation() {
+        return this.world.getChunkIfLoaded(this.position.getX() >> 4, this.position.getZ() >> 4);
+    }
+    // Paper end
+
     public TileEntity() {
         this.position = BlockPosition.ZERO;
         this.h = -1;
-- 
2.50.1

