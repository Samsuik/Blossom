From 09f08a3a02fdc2f414878e03811b24aa995f41fa Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sun, 5 Feb 2017 19:17:28 -0500
Subject: [PATCH] Shame on you Mojang

Someone wrote some horrible code that throws a world accessing task
onto the HTTP DOWNLOADER Thread Pool, for an activity that is not even
heavy enough to warrant async operation.

This then triggers async chunk loads!

What in the hell were you thinking?

diff --git a/src/main/java/net/minecraft/server/BlockBeacon.java b/src/main/java/net/minecraft/server/BlockBeacon.java
new file mode 100644
index 000000000..b4289c43d
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockBeacon.java
@@ -0,0 +1,96 @@
+package net.minecraft.server;
+
+public class BlockBeacon extends BlockContainer {
+
+    public BlockBeacon() {
+        super(Material.SHATTERABLE, MaterialMapColor.G);
+        this.c(3.0F);
+        this.a(CreativeModeTab.f);
+    }
+
+    public TileEntity a(World world, int i) {
+        return new TileEntityBeacon();
+    }
+
+    public boolean interact(World world, BlockPosition blockposition, IBlockData iblockdata, EntityHuman entityhuman, EnumDirection enumdirection, float f, float f1, float f2) {
+        if (world.isClientSide) {
+            return true;
+        } else {
+            TileEntity tileentity = world.getTileEntity(blockposition);
+
+            if (tileentity instanceof TileEntityBeacon) {
+                entityhuman.openContainer((TileEntityBeacon) tileentity);
+                entityhuman.b(StatisticList.N);
+            }
+
+            return true;
+        }
+    }
+
+    public boolean c() {
+        return false;
+    }
+
+    public boolean d() {
+        return false;
+    }
+
+    public int b() {
+        return 3;
+    }
+
+    public void postPlace(World world, BlockPosition blockposition, IBlockData iblockdata, EntityLiving entityliving, ItemStack itemstack) {
+        super.postPlace(world, blockposition, iblockdata, entityliving, itemstack);
+        if (itemstack.hasName()) {
+            TileEntity tileentity = world.getTileEntity(blockposition);
+
+            if (tileentity instanceof TileEntityBeacon) {
+                ((TileEntityBeacon) tileentity).a(itemstack.getName());
+            }
+        }
+
+    }
+
+    public void doPhysics(World world, BlockPosition blockposition, IBlockData iblockdata, Block block) {
+        TileEntity tileentity = world.getTileEntity(blockposition);
+
+        if (tileentity instanceof TileEntityBeacon) {
+            ((TileEntityBeacon) tileentity).m();
+            world.playBlockAction(blockposition, this, 1, 0);
+        }
+
+    }
+
+    public static void f(final World world, final BlockPosition blockposition) {
+        /*HttpUtilities.a.submit(new Runnable() {
+            public void run() {*/ // Paper
+                Chunk chunk = world.getChunkAtWorldCoords(blockposition);
+
+                for (int i = blockposition.getY() - 1; i >= 0; --i) {
+                    final BlockPosition blockposition1 = new BlockPosition(blockposition.getX(), i, blockposition.getZ());
+
+                    if (!chunk.d(blockposition1)) {
+                        break;
+                    }
+
+                    IBlockData iblockdata = world.getType(blockposition1);
+
+                    if (iblockdata.getBlock() == Blocks.BEACON) {
+                        /*((WorldServer) world).postToMainThread(new Runnable() {
+                            public void run() {*/ // Paper
+                                TileEntity tileentity = world.getTileEntity(blockposition);
+
+                                if (tileentity instanceof TileEntityBeacon) {
+                                    ((TileEntityBeacon) tileentity).m();
+                                    world.playBlockAction(blockposition, Blocks.BEACON, 1, 0);
+                                }
+
+                            /*}
+                        });*/ // Paper
+                    }
+                }
+
+            /*}
+        });*/ // Paper
+    }
+}
-- 
2.40.0.windows.1

