From 254b08554ce9e938fabfa9013fad55d8e5b9a81e Mon Sep 17 00:00:00 2001
From: Samsuik <40902469+Samsuik@users.noreply.github.com>
Date: Fri, 30 Jun 2023 15:13:08 +0100
Subject: [PATCH] AntiXray Replacement: DuskBerry


diff --git a/src/main/java/me/samsuik/blossom/antixray/AntiXrayEngine.java b/src/main/java/me/samsuik/blossom/antixray/AntiXrayEngine.java
new file mode 100644
index 000000000..e0cffcbe3
--- /dev/null
+++ b/src/main/java/me/samsuik/blossom/antixray/AntiXrayEngine.java
@@ -0,0 +1,26 @@
+package me.samsuik.blossom.antixray;
+
+import net.minecraft.server.BlockPosition;
+import net.minecraft.server.World;
+
+public interface AntiXrayEngine {
+
+    static AntiXrayEngine getEngine() {
+        return Properties.berryEngine;
+    }
+
+    static void setEngine(AntiXrayEngine engine) {
+        Properties.berryEngine = engine;
+    }
+
+    void obfuscate(int chunkX, int chunkZ, int bitmask, byte[] buffer, World world);
+
+    void flushUpdates(World world);
+
+    void updateNearbyBlocks(World world, BlockPosition position, boolean player);
+
+    class Properties {
+        static me.samsuik.blossom.antixray.AntiXrayEngine berryEngine;
+    }
+
+}
diff --git a/src/main/java/me/samsuik/blossom/antixray/DuskBerry.java b/src/main/java/me/samsuik/blossom/antixray/DuskBerry.java
new file mode 100644
index 000000000..15251c637
--- /dev/null
+++ b/src/main/java/me/samsuik/blossom/antixray/DuskBerry.java
@@ -0,0 +1,229 @@
+package me.samsuik.blossom.antixray;
+
+import it.unimi.dsi.fastutil.ints.IntArrayList;
+import it.unimi.dsi.fastutil.longs.LongArraySet;
+import it.unimi.dsi.fastutil.longs.LongSet;
+import net.minecraft.server.*;
+import org.spigotmc.AntiXray;
+
+import java.util.List;
+import java.util.concurrent.ThreadLocalRandom;
+
+public class DuskBerry implements AntiXrayEngine {
+
+    private static final int[] LAVA_ID = new int[] {
+            Block.d.b(Blocks.LAVA.getBlockData()),
+            Block.d.b(Blocks.FLOWING_LAVA.getBlockData()),
+            Block.d.b(Blocks.LAVA.getBlockData().set(BlockFluids.LEVEL, 8)),
+            Block.d.b(Blocks.FLOWING_LAVA.getBlockData().set(BlockFluids.LEVEL, 8))
+    };
+
+    private static final int[] WATER_ID = new int[] {
+            Block.d.b(Blocks.WATER.getBlockData()),
+            Block.d.b(Blocks.FLOWING_WATER.getBlockData()),
+            Block.d.b(Blocks.WATER.getBlockData().set(BlockFluids.LEVEL, 1)),
+            Block.d.b(Blocks.FLOWING_WATER.getBlockData().set(BlockFluids.LEVEL, 1))
+    };
+
+    private static final int MOB_SPAWNER = Block.d.b(Blocks.MOB_SPAWNER.getBlockData());
+    private static final int SLIME_BLOCK = Block.d.b(Blocks.SLIME.getBlockData());
+
+    private final EnumDirection[] directions = EnumDirection.values();
+    private final IntArrayList hidden = new IntArrayList();
+    private final DuskBerryIntensity intensity;
+    private final LongSet updates = new LongArraySet();
+    private final int sections, radius;
+
+    public DuskBerry(List<Block> hiddenBlocks, DuskBerryIntensity berryIntensity, int sections, int radius) {
+        for (Block block : hiddenBlocks) {
+            if (block != null) {
+                hidden.add(Block.d.b(block.getBlockData()));
+            }
+        }
+        this.intensity = berryIntensity;
+        this.sections = sections;
+        this.radius = radius;
+    }
+
+    private int recipe(boolean occluded) {
+        // lamb sauce recipe:
+        int rand = ThreadLocalRandom.current().nextInt(100);
+        if (rand < 45 && occluded) {
+            return sauceBase(rand);
+        } else if (rand < 55) {
+            return randomHiddenBlock();
+        } else if (rand < 65 && occluded) {
+            return SLIME_BLOCK;
+        } else if (rand < 66 && occluded) {
+            return MOB_SPAWNER;
+        } else {
+            return 0; // air
+        }
+    }
+
+    private int sauceBase(int rand) {
+        if (rand < 35) {
+            return LAVA_ID[ThreadLocalRandom.current().nextInt(LAVA_ID.length)];
+        } else {
+            return WATER_ID[ThreadLocalRandom.current().nextInt(WATER_ID.length)];
+        }
+    }
+
+    private int randomHiddenBlock() {
+        return hidden.getInt(ThreadLocalRandom.current().nextInt(hidden.size()));
+    }
+
+    @Override
+    public void obfuscate(int chunkX, int chunkZ, int bitmask, byte[] buffer, World world) {
+        if (world.blossomConfig.antiXray) {
+            int section = 0;
+            int light = lightStart(bitmask);
+            for (int i = 0; i < sections; i++) {
+                if ((bitmask & 1 << i) != 0) {
+                    obfuscateSection(section++ * 8192, light, chunkX, i, chunkZ, buffer, world);
+                }
+            }
+        }
+    }
+
+    private void obfuscateSection(int start, int light, int cx, int cy, int cz, byte[] buffer, World world) {
+        boolean occluded = sectionOccluded(start, buffer);
+
+        for (int k = start, end = start + 8192; k < end; k += 2) {
+            if (k >= buffer.length) continue;
+            int id = buffer[k] & 255 | (buffer[k + 1] & 255) << 8;
+            IBlockData iblockdata = Block.d.a(id);
+
+            if (iblockdata == null || !AntiXray.isSolidBlock(iblockdata.getBlock())) {
+                continue;
+            }
+
+            // coordinates in section
+            int p = (k & 8191) >> 1;
+            int rx = p      & 0xf;
+            int ry = p >> 8 & 0xf;
+            int rz = p >> 4 & 0xf;
+
+            if (isObscured(rx, ry, rz, cx, cy, cz, world)) {
+                obfuscateBlock(rx, ry, rz, k, light, occluded, buffer);
+            }
+        }
+    }
+
+    private boolean sectionOccluded(int start, byte[] buf) {
+        if (!intensity.geq(DuskBerryIntensity.MEDIUM)) return false;
+        for (int i = start, end = start + 8192; i < end; i += 2) {
+            int id = buf[i] & 255 | (buf[i + 1] & 255) << 8;
+            IBlockData iblockdata = Block.d.a(id);
+            if (iblockdata == null || !iblockdata.getBlock().isOccluding()) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    private void obfuscateBlock(int rx, int ry, int rz, int index, int light, boolean occluded, byte[] buffer) {
+        if (intensity.geq(DuskBerryIntensity.LOW)) {
+            int lamb = randomHiddenBlock();
+            buffer[index]     = (byte) (lamb      & 255);
+            buffer[index + 1] = (byte) (lamb >> 8 & 255);
+        }
+
+        if (isInside(rx, ry, rz)) { // allows client to cull all this crud we're adding
+            if (intensity.geq(DuskBerryIntensity.HIGH)) {
+                int sauce = recipe(occluded);
+                buffer[index]     = (byte) (sauce      & 255);
+                buffer[index + 1] = (byte) (sauce >> 8 & 255);
+            } else if (intensity.geq(DuskBerryIntensity.MEDIUM) && ThreadLocalRandom.current().nextInt(5) == 0) {
+                buffer[index]     = 0;
+                buffer[index + 1] = 0;
+            }
+
+            if (intensity.geq(DuskBerryIntensity.EXTREME) && occluded) {
+                // let's add *light*
+                int lightOf = (index / 2); // index
+                int k = (lightOf >> 1) + light;
+                int c = ThreadLocalRandom.current().nextInt(15);
+                int shift = (lightOf & 1) << 2;
+                buffer[k] = (byte) (buffer[k] & ~(15 << shift) | (c & 15) << shift);
+            }
+        }
+    }
+
+    private boolean isObscured(int rx, int ry, int rz, int cx, int cy, int cz, World world) {
+        for (EnumDirection dir : directions) {
+            int nx = rx + dir.getAdjacentX();
+            int ny = ry + dir.getAdjacentY();
+            int nz = rz + dir.getAdjacentZ();
+
+            IBlockData neighbor = fromWorld(cx, cy, cz, nx, ny, nz, world);
+            if (neighbor == null || !AntiXray.isSolidBlock(neighbor.getBlock())) {
+                return false;
+            }
+        }
+
+        return true;
+    }
+
+    private IBlockData fromWorld(int cx, int cy, int cz, int rx, int ry, int rz, World world) {
+        int chunkX = (rx + (cx << 4)) >> 4;
+        int chunkZ = (rz + (cz << 4)) >> 4;
+        Chunk chunk = world.getChunkIfLoaded(chunkX, chunkZ);
+        if (chunk == null) return null;
+        int chunkY = (ry + (cy << 4)) >> 4;
+        if (chunkY < 0 || chunkY > 15) return null;
+        ChunkSection section = chunk.getSections()[chunkY];
+        return section.getType(rx & 15, ry & 15, rz & 15);
+    }
+
+    private boolean isInside(int rx, int ry, int rz) {
+//        return (rx | ry | rz) + 1 << 27 > 0x8000001;
+        return rx >= 1 && rx <= 14 && rz >= 1 && rz <= 14 && ry >= 1 && ry <= 14;
+    }
+
+    private int lightStart(int bitmask) {
+        int endOfBlocks = 0;
+        for (int i = 0; i < 16; i++) {
+            if ((bitmask & 1 << i) != 0) {
+                endOfBlocks += 8192;
+            }
+        }
+        return endOfBlocks;
+    }
+
+    @Override
+    public void flushUpdates(World world) {
+        if (world.blossomConfig.antiXray) {
+            for (long pack : updates) {
+                world.notify(BlockPosition.fromLong(pack));
+            }
+            updates.clear();
+        }
+    }
+
+    @Override
+    public void updateNearbyBlocks(World world, BlockPosition position, boolean player) {
+        if (world.blossomConfig.antiXray && (position.getY() >> 4) < sections) {
+            updateBlock(world, position, updates, player ? radius : 1);
+            if (player) {
+                updates.remove(position.asLong()); // don't update self, smh
+                flushUpdates(world);
+            }
+        }
+    }
+
+    private void updateBlock(World world, BlockPosition position, LongSet updates, int radius) {
+        updates.add(position.asLong());
+        if (radius <= 0) return;
+        for (EnumDirection dir : directions) {
+            BlockPosition neighbor = position.shift(dir);
+            IBlockData data = world.getTypeIfLoaded(neighbor);
+            Block block = data.getBlock();
+            long packed = neighbor.asLong();
+            if (block.isOccluding() && !updates.contains(packed)) {
+                updateBlock(world, neighbor, updates, radius - 1);
+            }
+        }
+    }
+
+}
diff --git a/src/main/java/me/samsuik/blossom/antixray/DuskBerryIntensity.java b/src/main/java/me/samsuik/blossom/antixray/DuskBerryIntensity.java
new file mode 100644
index 000000000..412e979df
--- /dev/null
+++ b/src/main/java/me/samsuik/blossom/antixray/DuskBerryIntensity.java
@@ -0,0 +1,18 @@
+package me.samsuik.blossom.antixray;
+
+public enum DuskBerryIntensity {
+    LOW(0),    // fast, quickly obfuscate ores
+    MEDIUM(1), // slow, slight world obfuscation
+    HIGH(2),   // very slow, extensive world obfuscation
+    EXTREME(3) // *ahem*
+    ;
+
+    private final int v;
+    DuskBerryIntensity(int i) {
+        this.v = i;
+    }
+
+    public boolean geq(DuskBerryIntensity intensity) {
+        return v >= intensity.v;
+    }
+}
diff --git a/src/main/java/me/samsuik/blossom/configuration/BlossomWorldConfig.java b/src/main/java/me/samsuik/blossom/configuration/BlossomWorldConfig.java
index ab9a52e80..0f6c4871f 100644
--- a/src/main/java/me/samsuik/blossom/configuration/BlossomWorldConfig.java
+++ b/src/main/java/me/samsuik/blossom/configuration/BlossomWorldConfig.java
@@ -56,4 +56,26 @@ public class BlossomWorldConfig {
         return config.getString("world-settings." + worldName + "." + path, config.getString(path));
     }
 
+    public boolean antiXray;
+    private void DuskBerry() {
+        antiXray = getBoolean("dusk-berry.anti-xray", false);
+        List<String> blocks = getList("dusk-berry.hidden-blocks", java.util.Arrays.asList(
+                "quartz_ore", "diamond_ore", "emerald_ore", "lapis_ore", "redstone_ore", "gold_ore", "iron_ore", "coal_ore"
+        ));
+        List<net.minecraft.server.Block> hiddenBlocks = new java.util.ArrayList<>();
+        for (String block : blocks) {
+            hiddenBlocks.add(net.minecraft.server.Block.getByName(block));
+        }
+        String i = getString("dusk-berry.intensity", "low").toUpperCase(java.util.Locale.ROOT);
+        me.samsuik.blossom.antixray.DuskBerryIntensity berryIntensity;
+        try {
+            berryIntensity = me.samsuik.blossom.antixray.DuskBerryIntensity.valueOf(i);
+        } catch (Throwable e) {
+            berryIntensity = me.samsuik.blossom.antixray.DuskBerryIntensity.LOW;
+        }
+        int sections = getInt("dusk-berry.sections", 3);
+        int radius = getInt("dusk-berry.update-radius", 2);
+        me.samsuik.blossom.antixray.AntiXrayEngine.setEngine(new me.samsuik.blossom.antixray.DuskBerry(hiddenBlocks, berryIntensity, sections, radius));
+    }
+
 }
diff --git a/src/main/java/net/minecraft/server/BlockFlowing.java b/src/main/java/net/minecraft/server/BlockFlowing.java
index 60dc31dd7..c77a46cf1 100644
--- a/src/main/java/net/minecraft/server/BlockFlowing.java
+++ b/src/main/java/net/minecraft/server/BlockFlowing.java
@@ -94,7 +94,6 @@ public class BlockFlowing extends BlockFluids {
                     world.d(blockposition.up(), this);
                     world.d(blockposition.north(), this);
                     world.d(blockposition.south(), this);
-                    world.spigotConfig.antiXrayInstance.updateNearbyBlocks(world, blockposition); // Spigot
                     // PaperSpigot end
                 }
             }
diff --git a/src/main/java/net/minecraft/server/EntityFallingBlock.java b/src/main/java/net/minecraft/server/EntityFallingBlock.java
index 3fe08391b..f1640a7de 100644
--- a/src/main/java/net/minecraft/server/EntityFallingBlock.java
+++ b/src/main/java/net/minecraft/server/EntityFallingBlock.java
@@ -121,7 +121,7 @@ public class EntityFallingBlock extends Entity {
                 blockposition = new BlockPosition(this);
                 if (this.world.getType(blockposition).getBlock() == block && !CraftEventFactory.callEntityChangeBlockEvent(this, blockposition.getX(), blockposition.getY(), blockposition.getZ(), Blocks.AIR, 0).isCancelled()) {
                     this.world.setAir(blockposition);
-                    world.spigotConfig.antiXrayInstance.updateNearbyBlocks(world, blockposition); // Spigot
+                    me.samsuik.blossom.antixray.AntiXrayEngine.getEngine().updateNearbyBlocks(world, blockposition, false); // Blossom // Spigot
                 } else if (!this.world.isClientSide) {
                     this.die();
                     return;
@@ -164,7 +164,7 @@ public class EntityFallingBlock extends Entity {
                                     return;
                                 }
                                 this.world.setTypeAndData(blockposition, this.block, 3);
-                                world.spigotConfig.antiXrayInstance.updateNearbyBlocks(world, blockposition); // Spigot
+                                // world.spigotConfig.antiXrayInstance.updateNearbyBlocks(world, blockposition); // Blossom // Spigot
                                 this.respawn(); // Blossom
                                 // CraftBukkit end
                                 if (block instanceof BlockFalling) {
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index 7fa061dd0..2261cc6c0 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -247,7 +247,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
                 if (chunkcoordintpair != null) {
                     if (this.world.isLoaded(new BlockPosition(chunkcoordintpair.x << 4, 0, chunkcoordintpair.z << 4))) {
                         chunk = this.world.getChunkAt(chunkcoordintpair.x, chunkcoordintpair.z);
-                        if (chunk.isReady()) {
+                        if (chunk.isReady() && (!world.blossomConfig.antiXray || chunk.areNeighborsLoaded(1))) { // Blossom
                             arraylist.add(chunk);
                             arraylist1.addAll(chunk.tileEntities.values()); // CraftBukkit - Get tile entities directly from the chunk instead of the world
                             iterator1.remove();
diff --git a/src/main/java/net/minecraft/server/Explosion.java b/src/main/java/net/minecraft/server/Explosion.java
index 2fd5ab14b..696480d9b 100644
--- a/src/main/java/net/minecraft/server/Explosion.java
+++ b/src/main/java/net/minecraft/server/Explosion.java
@@ -343,7 +343,7 @@ public class Explosion {
                 blockposition = (BlockPosition) iterator.next();
                 Block block = this.world.getType(blockposition).getBlock();
 
-                world.spigotConfig.antiXrayInstance.updateNearbyBlocks(world, blockposition); // Spigot
+                me.samsuik.blossom.antixray.AntiXrayEngine.getEngine().updateNearbyBlocks(world, blockposition, false); // Blossom // Spigot
                 // Blossom - unnecessary
 
                 if (block.getMaterial() != Material.AIR) {
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
index 3f5e89f51..4f3e1cf0d 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
@@ -40,7 +40,7 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
         this.b = chunk.locZ;
         this.d = flag;
         this.c = chunk.getChunkMap(flag, i); // PaperSpigot
-        chunk.world.spigotConfig.antiXrayInstance.obfuscateSync(chunk.locX, chunk.locZ, c.b, c.a, chunk.world);
+        me.samsuik.blossom.antixray.AntiXrayEngine.getEngine().obfuscate(chunk.locX, chunk.locZ, c.b, c.a, chunk.world); // Blossom
     }
 
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutMapChunkBulk.java b/src/main/java/net/minecraft/server/PacketPlayOutMapChunkBulk.java
index e9e8101cf..9851cacce 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutMapChunkBulk.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutMapChunkBulk.java
@@ -80,7 +80,7 @@ public class PacketPlayOutMapChunkBulk implements Packet<PacketListenerPlayOut>
         }
 
         for (i = 0; i < this.a.length; ++i) {
-            world.spigotConfig.antiXrayInstance.obfuscate(this.a[i], this.b[i], this.c[i].b, this.c[i].a, world); // Spigot
+            me.samsuik.blossom.antixray.AntiXrayEngine.getEngine().obfuscate(a[i], b[i], c[i].b, c[i].a, world); // Blossom
             packetdataserializer.writeBytes(this.c[i].a);
         }
 
diff --git a/src/main/java/net/minecraft/server/PlayerInteractManager.java b/src/main/java/net/minecraft/server/PlayerInteractManager.java
index 27d09b102..9b1aeb5ee 100644
--- a/src/main/java/net/minecraft/server/PlayerInteractManager.java
+++ b/src/main/java/net/minecraft/server/PlayerInteractManager.java
@@ -202,7 +202,7 @@ public class PlayerInteractManager {
             }
 
         }
-        world.spigotConfig.antiXrayInstance.updateNearbyBlocks(world, blockposition); // Spigot
+        me.samsuik.blossom.antixray.AntiXrayEngine.getEngine().updateNearbyBlocks(world, blockposition, true); // Blossom // Spigot
     }
 
     public void a(BlockPosition blockposition) {
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index ed84b0a2e..00579836c 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -533,7 +533,7 @@ public abstract class World implements IBlockAccess {
         this.d(blockposition.up(), block);
         this.d(blockposition.north(), block);
         this.d(blockposition.south(), block);
-        spigotConfig.antiXrayInstance.updateNearbyBlocks(this, blockposition); // Spigot
+        // spigotConfig.antiXrayInstance.updateNearbyBlocks(this, blockposition); // Blossom // Spigot
     }
 
     public void a(BlockPosition blockposition, Block block, EnumDirection enumdirection) {
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 10cc04fe5..da93a6626 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -252,7 +252,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         timings.chunkTicks.startTiming(); // Spigot
         this.h();
         timings.chunkTicks.stopTiming(); // Spigot
-        spigotConfig.antiXrayInstance.flushUpdates(this); // PaperSpigot
+        me.samsuik.blossom.antixray.AntiXrayEngine.getEngine().flushUpdates(this); // Blossom // PaperSpigot
         this.methodProfiler.c("chunkMap");
         timings.doChunkMap.startTiming(); // Spigot
         this.manager.flush();
diff --git a/src/main/java/org/spigotmc/AntiXray.java b/src/main/java/org/spigotmc/AntiXray.java
index ec884c625..b4bbb905e 100644
--- a/src/main/java/org/spigotmc/AntiXray.java
+++ b/src/main/java/org/spigotmc/AntiXray.java
@@ -283,7 +283,7 @@ public class AntiXray
         // TacoSpigot end
     }
 
-    private static boolean isSolidBlock(Block block) {
+    public static boolean isSolidBlock(Block block) { // Blossom
         // Mob spawners are treated as solid blocks as far as the
         // game is concerned for lighting and other tasks but for
         // rendering they can be seen through therefor we special
diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
index 8e86212aa..80628e946 100644
--- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
+++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
@@ -221,6 +221,8 @@ public class SpigotWorldConfig
     public List<Integer> hiddenBlocks;
     public List<Integer> replaceBlocks;
     public AntiXray antiXrayInstance;
+    // Blossom start
+    /*
     private void antiXray()
     {
         antiXray = getBoolean( "anti-xray.enabled", true );
@@ -247,6 +249,8 @@ public class SpigotWorldConfig
 
         antiXrayInstance = new AntiXray( this );
     }
+    */
+    // Blossom end
 
     public boolean zombieAggressiveTowardsVillager;
     private void zombieAggressiveTowardsVillager()
-- 
2.50.0

