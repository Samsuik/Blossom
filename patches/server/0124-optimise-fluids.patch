From 0e58c8e490d36eab35dbd40d0b7a1ae34d46c52f Mon Sep 17 00:00:00 2001
From: Samsuik <kfian294ma4@gmail.com>
Date: Sat, 19 Jul 2025 16:04:51 +0100
Subject: [PATCH] optimise fluids


diff --git a/src/main/java/net/minecraft/server/BlockFlowing.java b/src/main/java/net/minecraft/server/BlockFlowing.java
index 85874326b..42f6149ee 100644
--- a/src/main/java/net/minecraft/server/BlockFlowing.java
+++ b/src/main/java/net/minecraft/server/BlockFlowing.java
@@ -55,8 +55,11 @@ public class BlockFlowing extends BlockFluids {
                 i1 = -1;
             }
 
-            if (this.e(world, blockposition.up()) >= 0) {
-                k = this.e(world, blockposition.up());
+            // Blossom start - optimise fluids
+            int fluidLevelAbove = this.e(world, blockposition.up());
+            if (fluidLevelAbove >= 0) {
+                k = fluidLevelAbove;
+                // Blossom end - optimise fluids
                 if (k >= 8) {
                     i1 = k;
                 } else {
@@ -82,7 +85,7 @@ public class BlockFlowing extends BlockFluids {
                 this.f(world, blockposition, iblockdata);
             } else {
                 i = i1;
-                if (i1 < 0 || canFastDrain(world, blockposition)) { // PaperSpigot - Fast draining
+                if (i1 < 0 || canFastDrain(world, blockposition, iblockdata)) { // Blossom - optimise fluids // PaperSpigot - Fast draining
                     world.setAir(blockposition);
                 } else {
                     iblockdata = iblockdata.set(BlockFlowing.LEVEL, Integer.valueOf(i1));
@@ -205,6 +208,18 @@ public class BlockFlowing extends BlockFluids {
     }
 
     private int a(World world, BlockPosition blockposition, int i, EnumDirection enumdirection) {
+        // Blossom start - optimise fluids
+        return this.distanceToTheClosestHole(world, blockposition, i, enumdirection, new it.unimi.dsi.fastutil.objects.ObjectOpenHashSet<>());
+    }
+
+    private int distanceToTheClosestHole(
+            World world,
+            BlockPosition blockposition,
+            int i,
+            EnumDirection enumdirection,
+            it.unimi.dsi.fastutil.objects.ObjectOpenHashSet<BlockPosition> checked
+    ) {
+        // Blossom end - optimise fluids
         int j = 1000;
         Iterator iterator = EnumDirection.EnumDirectionLimit.HORIZONTAL.iterator();
 
@@ -214,6 +229,11 @@ public class BlockFlowing extends BlockFluids {
             if (enumdirection1 != enumdirection) {
                 BlockPosition blockposition1 = blockposition.shift(enumdirection1);
                 IBlockData iblockdata = world.getType(blockposition1);
+                // Blossom start - optimise fluids
+                if (!checked.add(blockposition1)) {
+                    continue;
+                }
+                // Blossom end - optimise fluids
 
                 if (!this.g(world, blockposition1, iblockdata) && (iblockdata.getBlock().getMaterial() != this.material || ((Integer) iblockdata.get(BlockFlowing.LEVEL)).intValue() > 0)) {
                     if (!this.g(world, blockposition1.down(), iblockdata)) {
@@ -221,7 +241,7 @@ public class BlockFlowing extends BlockFluids {
                     }
 
                     if (i < 4) {
-                        int k = this.a(world, blockposition1, i + 1, enumdirection1.opposite());
+                        int k = this.distanceToTheClosestHole(world, blockposition1, i + 1, enumdirection1.opposite(), checked); // Blossom - optimise fluids
 
                         if (k < j) {
                             j = k;
@@ -317,15 +337,24 @@ public class BlockFlowing extends BlockFluids {
         if (this.getMaterial() == Material.LAVA) {
             return world.worldProvider.o() ? world.paperSpigotConfig.lavaFlowSpeedNether : world.paperSpigotConfig.lavaFlowSpeedNormal;
         }
-        if (this.getMaterial() == Material.WATER && (
-                world.getType(blockposition.north(1)).getBlock().getMaterial() == Material.LAVA ||
-                        world.getType(blockposition.south(1)).getBlock().getMaterial() == Material.LAVA ||
-                        world.getType(blockposition.west(1)).getBlock().getMaterial() == Material.LAVA ||
-                        world.getType(blockposition.east(1)).getBlock().getMaterial() == Material.LAVA)) {
+        // Blossom start - optimise fluids
+        int waterOverLavaFlowSpeed = world.paperSpigotConfig.waterOverLavaFlowSpeed;
+        int actualFlowSpeed = super.a(world);
+        if (this.getMaterial() == Material.WATER && waterOverLavaFlowSpeed != actualFlowSpeed && isAdjacentToMaterial(world, blockposition, Material.LAVA)) {
             return world.paperSpigotConfig.waterOverLavaFlowSpeed;
         }
-        return super.a(world);
+        return actualFlowSpeed;
+    }
+
+    private static boolean isAdjacentToMaterial(World world, BlockPosition blockposition, Material material) {
+        for (EnumDirection direction : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
+            if (world.getType(blockposition.shift(direction)).getBlock().getMaterial() == material) {
+                return true;
+            }
+        }
+        return false;
     }
+    // Blossom end - optimise fluids
 
     /**
      * PaperSpigot - Data check method for fast draining
@@ -338,40 +367,24 @@ public class BlockFlowing extends BlockFluids {
     /**
      * PaperSpigot - Checks surrounding blocks to determine if block can be fast drained
      */
-    public boolean canFastDrain(World world, BlockPosition position) {
-        boolean result = false;
-        int data = getData(world, position);
-        if (this.material == Material.WATER) {
-            if (world.paperSpigotConfig.fastDrainWater) {
-                result = true;
-                if (getData(world, position.down()) < 0) {
-                    result = false;
-                } else if (world.getType(position.north()).getBlock().getMaterial() == Material.WATER && getData(world, position.north()) < data) {
-                    result = false;
-                } else if (world.getType(position.south()).getBlock().getMaterial() == Material.WATER && getData(world, position.south()) < data) {
-                    result = false;
-                } else if (world.getType(position.west()).getBlock().getMaterial() == Material.WATER && getData(world, position.west()) < data) {
-                    result = false;
-                } else if (world.getType(position.east()).getBlock().getMaterial() == Material.WATER && getData(world, position.east()) < data) {
-                    result = false;
-                }
+    public boolean canFastDrain(World world, BlockPosition position, IBlockData iblockdata) {
+        Material material = this.material;
+        if (material == Material.WATER && world.paperSpigotConfig.fastDrainWater || material == Material.LAVA && world.paperSpigotConfig.fastDrainLava) {
+            if (this.getFlowingFluidLevel(world, position.down()) < 0) {
+                return false;
             }
-        } else if (this.material == Material.LAVA) {
-            if (world.paperSpigotConfig.fastDrainLava) {
-                result = true;
-                if (getData(world, position.down()) < 0 || world.getType(position.up()).getBlock().getMaterial() != Material.AIR) {
-                    result = false;
-                } else if (world.getType(position.north()).getBlock().getMaterial() == Material.LAVA && getData(world, position.north()) < data) {
-                    result = false;
-                } else if (world.getType(position.south()).getBlock().getMaterial() == Material.LAVA && getData(world, position.south()) < data) {
-                    result = false;
-                } else if (world.getType(position.west()).getBlock().getMaterial() == Material.LAVA && getData(world, position.west()) < data) {
-                    result = false;
-                } else if (world.getType(position.east()).getBlock().getMaterial() == Material.LAVA && getData(world, position.east()) < data) {
-                    result = false;
+
+            int data = this.getFlowingFluidLevel(iblockdata);
+            for (EnumDirection direction : EnumDirection.EnumDirectionLimit.HORIZONTAL) {
+                IBlockData adjacentBlockData = world.getType(position.shift(direction));
+                if (adjacentBlockData.getBlock().getMaterial() == material && this.getFlowingFluidLevel(adjacentBlockData) < data) {
+                    return false;
                 }
             }
+
+            return true;
         }
-        return result;
+        return false;
+        // Blossom end - optimise fluids
     }
 }
diff --git a/src/main/java/net/minecraft/server/BlockFluids.java b/src/main/java/net/minecraft/server/BlockFluids.java
index 058cf11b4..a74d8bfd9 100644
--- a/src/main/java/net/minecraft/server/BlockFluids.java
+++ b/src/main/java/net/minecraft/server/BlockFluids.java
@@ -27,11 +27,22 @@ public abstract class BlockFluids extends Block {
     }
 
     protected int e(IBlockAccess iblockaccess, BlockPosition blockposition) {
-        return iblockaccess.getType(blockposition).getBlock().getMaterial() == this.material ? ((Integer) iblockaccess.getType(blockposition).get(BlockFluids.LEVEL)).intValue() : -1;
+        // Blossom start - optimise fluids
+        return this.getFluidLevel(iblockaccess.getType(blockposition));
     }
 
+    protected final int getFluidLevel(IBlockData iblockdata) {
+        return iblockdata.getBlock().getMaterial() == this.material ? ((Integer) iblockdata.get(BlockFluids.LEVEL)).intValue() : -1;
+    }
+
+    protected final int getFlowingFluidLevel(IBlockAccess iblockaccess, BlockPosition blockposition) { return this.f(iblockaccess, blockposition); } // Blossom - OBFHELPER
     protected int f(IBlockAccess iblockaccess, BlockPosition blockposition) {
-        int i = this.e(iblockaccess, blockposition);
+        return this.getFlowingFluidLevel(iblockaccess.getType(blockposition));
+    }
+
+    protected final int getFlowingFluidLevel(IBlockData iblockdata) {
+        int i = this.getFluidLevel(iblockdata);
+        // Blossom end - optimise fluids
 
         return i >= 8 ? 0 : i;
     }
-- 
2.50.1

