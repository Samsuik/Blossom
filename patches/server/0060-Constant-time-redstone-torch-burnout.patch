From adaf17023047c7b38771194f0f10bab10d2ad9fa Mon Sep 17 00:00:00 2001
From: Samsuik <40902469+Samsuik@users.noreply.github.com>
Date: Wed, 14 Jun 2023 18:48:51 +0100
Subject: [PATCH] Constant time redstone torch burnout


diff --git a/src/main/java/net/minecraft/server/BlockRedstoneTorch.java b/src/main/java/net/minecraft/server/BlockRedstoneTorch.java
index 78c6d195a..07afa5295 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneTorch.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneTorch.java
@@ -10,35 +10,32 @@ import org.bukkit.event.block.BlockRedstoneEvent; // CraftBukkit
 
 public class BlockRedstoneTorch extends BlockTorch {
 
-    private static Map<World, List<BlockRedstoneTorch.RedstoneUpdateInfo>> b = new java.util.WeakHashMap(); // Spigot
+    // Blossom start
+    // private static Map<World, List<BlockRedstoneTorch.RedstoneUpdateInfo>> b = new java.util.WeakHashMap(); // Spigot
     private final boolean isOn;
 
     private boolean a(World world, BlockPosition blockposition, boolean flag) {
-        if (!BlockRedstoneTorch.b.containsKey(world)) {
-            BlockRedstoneTorch.b.put(world, Lists.<BlockRedstoneTorch.RedstoneUpdateInfo>newArrayList()); // CraftBukkit - fix decompile error
-        }
-
-        List list = (List) BlockRedstoneTorch.b.get(world);
+        long packed = blockposition.asLong();
+        RedstoneUpdateInfo info = world.redstoneTorchMap.get(packed);
 
         if (flag) {
-            list.add(new BlockRedstoneTorch.RedstoneUpdateInfo(blockposition, world.getTime()));
+            info = world.redstoneTorchMap.computeIfAbsent(packed, owo -> new RedstoneUpdateInfo(blockposition, world.getTime()));
+            info.count++;
         }
 
-        int i = 0;
-
-        for (int j = 0; j < list.size(); ++j) {
-            BlockRedstoneTorch.RedstoneUpdateInfo blockredstonetorch_redstoneupdateinfo = (BlockRedstoneTorch.RedstoneUpdateInfo) list.get(j);
+        return info != null && info.count >= 8;
+    }
 
-            if (blockredstonetorch_redstoneupdateinfo.a.equals(blockposition)) {
-                ++i;
-                if (i >= 8) {
-                    return true;
-                }
+    public void removeExpiredEntries(World world) {
+        for (java.util.Iterator<RedstoneUpdateInfo> it = world.redstoneTorchMap.values().iterator(); it.hasNext();) {
+            if (world.getTime() - it.next().b > 60L) {
+                it.remove();
+            } else {
+                break;
             }
         }
-
-        return false;
     }
+    // Blossom end
 
     protected BlockRedstoneTorch(boolean flag) {
         this.isOn = flag;
@@ -114,11 +111,7 @@ public class BlockRedstoneTorch extends BlockTorch {
 
     public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
         boolean flag = this.g(world, blockposition, iblockdata);
-        List list = (List) BlockRedstoneTorch.b.get(world);
-
-        while (list != null && !list.isEmpty() && world.getTime() - ((BlockRedstoneTorch.RedstoneUpdateInfo) list.get(0)).b > 60L) {
-            list.remove(0);
-        }
+        this.removeExpiredEntries(world); // Blossom
 
         // CraftBukkit start
         org.bukkit.plugin.PluginManager manager = world.getServer().getPluginManager();
@@ -198,6 +191,7 @@ public class BlockRedstoneTorch extends BlockTorch {
 
         BlockPosition a;
         long b;
+        int count; // Blossom
 
         public RedstoneUpdateInfo(BlockPosition blockposition, long i) {
             this.a = blockposition;
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index a891a5967..27248a774 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -166,6 +166,7 @@ public abstract class World implements IBlockAccess {
     }
     // Blossom end
     public final me.samsuik.blossom.explosions.cache.DensityCache densityCache = new me.samsuik.blossom.explosions.cache.DensityCache(); // Blossom - optimise explosions
+    public final it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap<BlockRedstoneTorch.RedstoneUpdateInfo> redstoneTorchMap = new it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap<>(); // Blossom
 
     protected World(IDataManager idatamanager, WorldData worlddata, WorldProvider worldprovider, MethodProfiler methodprofiler, boolean flag, ChunkGenerator gen, org.bukkit.World.Environment env) {
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig( worlddata.getName() ); // Spigot
-- 
2.40.0.windows.1

