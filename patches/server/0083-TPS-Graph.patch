From d270435ad30c57b8859040c077f2fabd99683c89 Mon Sep 17 00:00:00 2001
From: Samsuik <40902469+Samsuik@users.noreply.github.com>
Date: Sat, 8 Jul 2023 13:26:34 +0100
Subject: [PATCH] TPS Graph


diff --git a/src/main/java/me/samsuik/blossom/commands/subcommands/TPSCommand.java b/src/main/java/me/samsuik/blossom/commands/subcommands/TPSCommand.java
new file mode 100644
index 000000000..b7d741908
--- /dev/null
+++ b/src/main/java/me/samsuik/blossom/commands/subcommands/TPSCommand.java
@@ -0,0 +1,73 @@
+package me.samsuik.blossom.commands.subcommands;
+
+import me.samsuik.blossom.commands.BaseCommand;
+import me.samsuik.blossom.utils.tps.TPSGraph;
+import me.samsuik.blossom.utils.tps.TickTracking;
+import net.md_5.bungee.api.ChatColor;
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.api.chat.ComponentBuilder;
+import net.md_5.bungee.api.chat.TextComponent;
+import net.minecraft.server.MathHelper;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.command.CommandSender;
+
+public class TPSCommand extends BaseCommand {
+
+    public TPSCommand() {
+        super("tps");
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        TickTracking tracking = MinecraftServer.getServer().tickTracking;
+
+        double average = tracking.averageTps(10) * 1.75;
+        int lines = 10;
+
+        try {
+            average = Double.parseDouble(args[0]);
+            lines = MathHelper.clamp(Integer.parseInt(args[1]), 1, 18);
+        } catch (NumberFormatException | ArrayIndexOutOfBoundsException ignored) {}
+
+        sender.sendMessage(ChatColor.GRAY + ".");
+        sender.sendMessage(createInformationComponent(tracking));
+
+        TPSGraph graph = new TPSGraph(tracking, lines, 50, average);
+
+        for (BaseComponent[] components : graph.components()) {
+            sender.sendMessage(merge(TextComponent.fromLegacyText(ChatColor.GRAY + "| "), components));
+        }
+
+        sender.sendMessage(ChatColor.GRAY + "'");
+        return false;
+    }
+
+    // bungee api sucks: exhibit #2
+    private BaseComponent[] merge(BaseComponent[] a1, BaseComponent[] a2) {
+        BaseComponent[] c = new BaseComponent[a1.length + a2.length];
+        System.arraycopy(a1, 0, c, 0, a1.length);
+        System.arraycopy(a2, 0, c, a1.length, a2.length);
+        return c;
+    }
+
+    private BaseComponent[] createInformationComponent(TickTracking tracking) {
+        return TextComponent.fromLegacyText(String.format(ChatColor.translateAlternateColorCodes('&',
+                        "&7| &8-------------- ( &fNow&8: %s%.1f&8, &fMem&8: %s%.1f &8) ---------------"
+                ),
+                TPSGraph.colour(tracking.averageTps(1) / 20.0),
+                Math.min(tracking.averageTps(1), 99.9),
+                TPSGraph.colour(1.0 - memoryUsage()),
+                memoryUsage() * 100
+        ));
+    }
+
+    private double memoryUsage() {
+        Runtime runtime = Runtime.getRuntime();
+        double free  = runtime.freeMemory();
+        double max   = runtime.maxMemory();
+        double alloc = runtime.totalMemory();
+        return (alloc - free) / max;
+    }
+
+}
diff --git a/src/main/java/me/samsuik/blossom/configuration/BlossomConfig.java b/src/main/java/me/samsuik/blossom/configuration/BlossomConfig.java
index ad8693587..fb3ab5717 100644
--- a/src/main/java/me/samsuik/blossom/configuration/BlossomConfig.java
+++ b/src/main/java/me/samsuik/blossom/configuration/BlossomConfig.java
@@ -4,6 +4,7 @@ import com.google.common.base.Throwables;
 import me.samsuik.blossom.commands.BlossomCommand;
 import me.samsuik.blossom.commands.subcommands.ConfigCommand;
 import me.samsuik.blossom.commands.subcommands.FPSCommand;
+import me.samsuik.blossom.commands.subcommands.TPSCommand;
 import me.samsuik.blossom.commands.subcommands.VisualCommand;
 import me.samsuik.blossom.visuals.Visuals;
 import net.minecraft.server.MinecraftServer;
@@ -58,6 +59,7 @@ public class BlossomConfig {
         commands.put("tntvisibility", new VisualCommand(Visuals.VisualType.TNT_VISIBILITY, "tnttoggle"));
         commands.put("sandvisibility", new VisualCommand(Visuals.VisualType.SAND_VISIBILITY, "sandtoggle"));
         commands.put("minimal", new VisualCommand(Visuals.VisualType.MINIMAL, "minimaltnt", "tntlag"));
+        commands.put("tps", new TPSCommand());
 
         version = getInt("config-version", 2);
         set("config-version", 2);
diff --git a/src/main/java/me/samsuik/blossom/utils/tps/TPSGraph.java b/src/main/java/me/samsuik/blossom/utils/tps/TPSGraph.java
new file mode 100644
index 000000000..9b29241ce
--- /dev/null
+++ b/src/main/java/me/samsuik/blossom/utils/tps/TPSGraph.java
@@ -0,0 +1,208 @@
+package me.samsuik.blossom.utils.tps;
+
+import net.md_5.bungee.api.ChatColor;
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.api.chat.ComponentBuilder;
+import net.md_5.bungee.api.chat.HoverEvent;
+import net.md_5.bungee.api.chat.TextComponent;
+import net.minecraft.server.MathHelper;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class TPSGraph {
+
+    private final Parts[][] parts;
+    private final TickTracking tracked;
+    private final int lines;
+    private final int length;
+    private final double ceiling;
+
+    public TPSGraph(TickTracking tracked, int lines, int length, double ceiling) {
+        this.parts = new Parts[lines][length];
+        this.tracked = tracked;
+        this.lines = lines;
+        this.length = length;
+        this.ceiling = ceiling;
+        this.map();
+    }
+
+    public void map() {
+        // Create the background
+        for (int line = 0; line < lines; ++line) {
+            for (int column = 0; column < length; ++column) {
+                parts[line][column] = Parts.BACKGROUND;
+            }
+        }
+
+        // Create normal points on the graph
+        for (int column = 0; column < length; ++column) {
+            double tps = tracked.point(column).tps;
+            if (tps == 0.0) break;
+            // Create normal point for column
+            int line = getLine(tps);
+            Parts[] lineParts = parts[line];
+            lineParts[column] = Parts.NORMAL;
+        }
+
+        // Create spikes on the graph. Huh, did you say "what is a spike?"
+        // By "spike" I am referring to a situation where the point would be
+        // travelling more than 2 lines, skipping those lines looks awful.
+        for (int column = 0; column < length; ++column) {
+            double nextTps = tracked.point(column + 1).tps;
+            if (nextTps == 0.0) break;
+            int curr = getLine(tracked.point(column).tps);
+            int prev = getLine(tracked.point(Math.max(column - 1, 0)).tps);
+            int next = getLine(nextTps);
+            int min  = Math.min(curr, next);
+            int max  = Math.max(curr, next);
+
+            if (max - min < 2) {
+                continue;
+            }
+
+            // Create vertical parts between the two points
+            for (int line = min; line < max; ++line) {
+                parts[line][column] = Parts.VERTICAL;
+            }
+
+            parts[min][column] = Parts.TOP;
+            parts[max][column] = Parts.BOTTOM;
+
+            if (column > 0 && column + 1 < length) {
+                if (prev == curr + 1 && next < curr) {
+                    parts[max][column] = Parts.DECLINING;
+                }
+
+                if (min == next) {
+                    parts[min][column] = Parts.DECLINING; // '!
+                } else if (prev <= min) { // has to be <= due to the issue I noted above
+                    parts[min][column] = Parts.RISING; // !'
+                }
+
+                // cone on the top of a spike
+                // if (max == curr && Math.abs(next - max) > 1 && Math.abs(prev - max) > 1 && prev < max) {
+                //    this.parts[max][column - 1] = Parts.RISING;
+                //    this.parts[max][column] = Parts.DECLINING;
+                // }
+
+                // cone on the bottom of a spike
+                if (min == curr && Math.abs(next - min) > 1 && Math.abs(prev - min) > 1 && prev > min) {
+                    parts[min][column - 1] = Parts.TOP_RIGHT;
+                    parts[min][column] = Parts.TOP_LEFT;
+                }
+            }
+        }
+
+        // Create special points on the graph, this
+        // is to handle slopes and slight differences
+        // that show up, anything else should be too
+        // extreme and get treated as a spike instead.
+        for (int column = 0; column < length; ++column) {
+            double tps = tracked.point(column).tps;
+            if (tps == 0.0) break;
+            int curr = getLine(tps);
+            int prev = getLine(tracked.point(Math.max(column - 1, 0)).tps);
+            int next = getLine(tracked.point(column + 1).tps);
+
+            // Ignore spikes, it'd mess up and be a waste of time
+            if (Math.abs(curr - next) >= 2) {
+                continue;
+            }
+
+            // SANITY: positive = rising, negative = declining
+            int direction = next - prev;
+            int change = Math.abs(direction);
+
+            if (change >= 2 && Math.max(next, prev) == curr + 1) {
+                // Create slopes, only requirement is that the highest point
+                // and the current are one line away from one another.
+                if (direction < 0) {
+                    parts[curr][column] = Parts.DECLINING;
+                } else {
+                    parts[curr][column] = Parts.RISING;
+                }
+            } else if (Math.abs(curr - next) == 1 || direction == 0) {
+                // if we have no direction always do this as a special case for slight dips and rises
+                if (curr < next) {
+                    parts[curr][column] = direction == 0 ? Parts.TOP : Parts.TOP_LEFT;
+                } else if (curr > next) {
+                    parts[curr][column] = Parts.BOTTOM;
+                }
+            } else if (Math.abs(curr - prev) == 1) {
+                if (prev > curr) {
+                    parts[curr][column] = Parts.TOP_RIGHT;
+                } else if (prev < curr) {
+                    parts[curr][column] = Parts.BOTTOM;
+                }
+            }
+        }
+    }
+
+    private int getLine(double tps) {
+        double per = (ceiling / 10); // How many lines 1 tick should display
+        int line = (int) (tps / per);
+        return MathHelper.clamp(line, 0, lines - 1);
+    }
+
+    public BaseComponent[][] components() {
+        BaseComponent[][] graph = new BaseComponent[lines][];
+
+        for (int line = 0; line < lines; ++line) {
+            List<BaseComponent> componentLine = new ArrayList<>();
+
+            for (int column = 0; column < length; ++column) {
+                double tps = tracked.point(column).tps;
+                double mspt = tracked.point(column).mspt();
+                Parts part = parts[line][column];
+
+                ChatColor tpsColour = colour(tps / 20.0);
+                BaseComponent component = new TextComponent(part.component());
+                component.setColor(tpsColour); // bungee api is awful, why not return self?
+                component.setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, TextComponent.fromLegacyText(String.format(
+                        ChatColor.WHITE + "TPS: " + tpsColour + "%.1f\n" +
+                        ChatColor.WHITE + "MS: " + tpsColour + "%.1f",
+                        tps, mspt
+                ))));
+                componentLine.add(component);
+            }
+
+            graph[lines - 1 - line] = componentLine.toArray(new BaseComponent[0]);
+        }
+
+        return graph;
+    }
+
+    public static ChatColor colour(double p) {
+        if (p > 0.85) return ChatColor.GREEN;
+        if (p > 0.7) return ChatColor.YELLOW;
+        if (p > 0.5) return ChatColor.GOLD;
+        if (p > 0.2) return ChatColor.RED;
+        if (p > 0.05) return ChatColor.DARK_GRAY;
+        return ChatColor.BLACK;
+    }
+
+    private enum Parts {
+        BACKGROUND(new ComponentBuilder(":::").color(ChatColor.BLACK).create()),
+        NORMAL(new ComponentBuilder("-").strikethrough(true).create()),
+        VERTICAL(new TextComponent("|||")),
+        RISING(new TextComponent("/")),
+        DECLINING(new TextComponent("\\")),
+        TOP_LEFT(new TextComponent("''")),
+        TOP_RIGHT(new TextComponent("``")),
+        TOP(new TextComponent("`'")),
+        BOTTOM(new TextComponent("...")),
+        ;
+
+        private final BaseComponent[] base;
+
+        Parts(BaseComponent... base) {
+            this.base = base;
+        }
+
+        BaseComponent[] component() {
+            return base;
+        }
+    }
+
+}
diff --git a/src/main/java/me/samsuik/blossom/utils/tps/TickTracking.java b/src/main/java/me/samsuik/blossom/utils/tps/TickTracking.java
new file mode 100644
index 000000000..f25d1aca2
--- /dev/null
+++ b/src/main/java/me/samsuik/blossom/utils/tps/TickTracking.java
@@ -0,0 +1,69 @@
+package me.samsuik.blossom.utils.tps;
+
+import net.minecraft.server.WorldServer;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.stream.IntStream;
+
+public class TickTracking {
+
+    private final List<Point> history = new ArrayList<>();
+
+    public TickTracking(int samples) {
+        for (int i = 0; i < samples; ++i) {
+            history.add(new Point(0.0, 0));
+        }
+    }
+
+    public Point point(int at) {
+        return history.get(at);
+    }
+
+    public double averageTps(int samples) {
+        return IntStream.range(0, samples)
+                .mapToDouble(i -> history.get(i).tps)
+                .average()
+                .orElse(0.0);
+    }
+
+    public void secondSample(List<WorldServer> server, double tps) {
+        history.remove(history.size() - 1);
+
+        int entities = server.stream()
+                .mapToInt((world) -> world.entityList.size())
+                .sum();
+
+        history.add(0, new Point(tps, entities));
+    }
+
+    public void tickSample(long mspt) {
+        history.get(0).sample(mspt);
+    }
+
+    // records! ...don't exist in java
+    static class Point {
+        final double tps;
+        final int entities;
+        final double[] msptSamples = new double[20];
+
+        Point(double tps, int entities) {
+            this.tps = tps;
+            this.entities = entities;
+        }
+
+        public void sample(long mspt) {
+            for (int i = 0; i < msptSamples.length - 1; ++i)
+                msptSamples[i + 1] = msptSamples[i];
+            msptSamples[0] = mspt;
+        }
+
+        public double mspt() {
+            return Arrays.stream(msptSamples)
+                    .average()
+                    .orElse(0);
+        }
+    }
+
+}
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 579bf3ce5..3e28eab9d 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -559,6 +559,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         }
     }
     // PaperSpigot End
+    public final me.samsuik.blossom.utils.tps.TickTracking tickTracking = new me.samsuik.blossom.utils.tps.TickTracking(120); // Blossom
  
     public void run() {
         try {
@@ -605,6 +606,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
                     {
                         final long diff = curTime - tickSection;
                         double currentTps = 1E9 / diff * SAMPLE_INTERVAL;
+                        tickTracking.secondSample(worlds, currentTps); // Blossom
                         tps1.add(currentTps, diff);
                         tps5.add(currentTps, diff);
                         tps15.add(currentTps, diff);
@@ -618,6 +620,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
                     lastTick = curTime;
 
                     this.A();
+                    tickTracking.tickSample((System.nanoTime() - curTime) / 1_000_000L); // Blossom
                     this.Q = true;
                 }
                 // Spigot end
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index b9d185d99..e1be19ad2 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -310,7 +310,7 @@ public class SpigotConfig
 
     private static void tpsCommand()
     {
-        commands.put( "tps", new TicksPerSecondCommand( "tps" ) );
+        // commands.put( "tps", new TicksPerSecondCommand( "tps" ) ); // Blossom
     }
 
     public static int playerSample;
-- 
2.50.1

