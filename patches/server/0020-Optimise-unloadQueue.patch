From 3f8b6b552b58158fa219a3fedadb9f0e7af5f590 Mon Sep 17 00:00:00 2001
From: Samsuik <40902469+Samsuik@users.noreply.github.com>
Date: Mon, 28 Sep 2020 18:27:04 +0100
Subject: [PATCH] Optimise unloadQueue

Reverts TacoSpigots change to use a ArraySet.

An ArraySet is not the correct collection for this job. It provides o(n)
add and remove it also provides fast iteration which is severely limited
to 100 actions in this case. Chunk Loading and Unloading modify this set
which can be a hotspot when theres a lot of players loading chunks.

diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 9753401b4..243e3bfa1 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -33,7 +33,7 @@ import it.unimi.dsi.fastutil.longs.LongSet;
 public class ChunkProviderServer implements IChunkProvider {
 
     private static final Logger b = LogManager.getLogger();
-    public LongSet unloadQueue = new LongArraySet(); // CraftBukkit - LongHashSet // TacoSpigot - LongHashSet -> HashArraySet
+    public final LongSet unloadQueue = it.unimi.dsi.fastutil.longs.LongSets.synchronize(new it.unimi.dsi.fastutil.longs.LongLinkedOpenHashSet()); // CraftBukkit - LongHashSet // TacoSpigot - LongHashSet -> HashArraySet // Blossom - optimise unloadQueue
     public Chunk emptyChunk;
     public IChunkProvider chunkProvider;
     private IChunkLoader chunkLoader;
@@ -363,16 +363,28 @@ public class ChunkProviderServer implements IChunkProvider {
 
     }
 
+    // Blossom start - optimise unloadQueue
+    private it.unimi.dsi.fastutil.longs.LongArrayList getChunksToUnload(int maxUnloads) {
+        it.unimi.dsi.fastutil.longs.LongArrayList toUnload = new it.unimi.dsi.fastutil.longs.LongArrayList();
+
+        synchronized (this.unloadQueue) {
+            LongIterator itr = this.unloadQueue.iterator();
+            for (int chunks = 0; chunks < maxUnloads && itr.hasNext(); chunks++) {
+                long chunkCoord = itr.nextLong();
+                itr.remove();
+                toUnload.add(chunkCoord);
+            }
+        }
+
+        return toUnload;
+    }
+    // Blossom end - optimise unloadQueue
+
     public boolean unloadChunks() {
         if (!this.world.savingDisabled) {
             // CraftBukkit start
             Server server = this.world.getServer();
-            // TacoSpigot start - use iterator for unloadQueue
-            LongIterator iterator = unloadQueue.iterator();
-            for (int i = 0; i < 100 && iterator.hasNext(); ++i) {
-                long chunkcoordinates = iterator.next();
-                iterator.remove();
-                // TacoSpigot end
+            for (long chunkcoordinates : this.getChunksToUnload(100)) { // Blossom - optimise unloadQueue
                 Chunk chunk = this.chunks.get(chunkcoordinates);
                 if (chunk == null) continue;
 
-- 
2.50.1

