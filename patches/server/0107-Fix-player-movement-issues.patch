From 06477f0f33692a9bc0c35d959210b7649f2172e7 Mon Sep 17 00:00:00 2001
From: Samsuik <40902469+Samsuik@users.noreply.github.com>
Date: Tue, 18 Jul 2023 15:54:26 +0100
Subject: [PATCH] Fix player movement issues

Hard limit on top of spigots threshold is required.

If you stack enough momentum with methods such as knockback, explosions and jumping you can bypass the moved too quickly check and can make a teleport hack.

Vertical moved wrongly checks are broken.

Players can move inside blocks if they clip less than the moved wrongly threshold into another block.

Clients can clip up to 0.0625 inside a block causing moved wrongly check to fail.

TacoSpigots east west patch affects player movement causing a desync

diff --git a/src/main/java/me/samsuik/blossom/configuration/BlossomConfig.java b/src/main/java/me/samsuik/blossom/configuration/BlossomConfig.java
index fda4efb65..b82d68b71 100644
--- a/src/main/java/me/samsuik/blossom/configuration/BlossomConfig.java
+++ b/src/main/java/me/samsuik/blossom/configuration/BlossomConfig.java
@@ -511,4 +511,11 @@ public class BlossomConfig {
         delayChunkUnloads = getInt("chunk.chunk-unload-delay", 100);
     }
 
+    public static double hardMovementSpeedLimit;
+    public static boolean disallowSuspiciousMovements;
+    private static void PlayerMovement() {
+        hardMovementSpeedLimit = getDouble("player.hard-movement-speed-limit", 10.0);
+        disallowSuspiciousMovements = getBoolean("player.disallow-suspicious-movement", true);
+    }
+
 }
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 354ff7252..87b967807 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -637,7 +637,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                     double d15 = d11 * d11 + d12 * d12 + d13 * d13;
 
                     // Spigot: make "moved too quickly" limit configurable
-                    if (d15 - d14 > org.spigotmc.SpigotConfig.movedTooQuicklyThreshold && this.checkMovement && (!this.minecraftServer.T() || !this.minecraftServer.S().equals(this.player.getName()))) { // CraftBukkit - Added this.checkMovement condition to solve this check being triggered by teleports
+                    if ((d15 > Math.pow(me.samsuik.blossom.configuration.BlossomConfig.hardMovementSpeedLimit, 2) || d15 - d14 > org.spigotmc.SpigotConfig.movedTooQuicklyThreshold) && this.checkMovement && (!this.minecraftServer.T() || !this.minecraftServer.S().equals(this.player.getName()))) { // Blossom // CraftBukkit - Added this.checkMovement condition to solve this check being triggered by teleports
                         PlayerConnection.c.warn(this.player.getName() + " moved too quickly! " + d11 + "," + d12 + "," + d13 + " (" + d11 + ", " + d12 + ", " + d13 + ")");
                         this.a(this.o, this.p, this.q, this.player.yaw, this.player.pitch);
                         return;
@@ -650,32 +650,50 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
                         this.player.bF();
                     }
 
+                    this.player.eastWestPatched = false; // Blossom - TacoSpigot bug
                     this.player.move(d11, d12, d13);
                     this.player.onGround = packetplayinflying.f();
                     double d16 = d12;
 
                     d11 = d7 - this.player.locX;
                     d12 = d8 - this.player.locY;
-                    if (d12 > -0.5D || d12 < 0.5D) {
-                        d12 = 0.0D;
-                    }
-
+                    // Blossom - previously vertical moved wrongly checks didn't work
                     d13 = d9 - this.player.locZ;
-                    d15 = d11 * d11 + d12 * d12 + d13 * d13;
+                    d15 = d11 * d11 + d13 * d13; // Blossom
                     boolean flag1 = false;
 
+                    // Blossom start
+                    double desync = d15 + d12 * d12;
+                    if (me.samsuik.blossom.configuration.BlossomConfig.disallowSuspiciousMovements && this.player.positionChanged && desync != 0.0) {
+                        flag1 = true;
+                    }
+                    // Blossom end
+
                     // Spigot: make "moved wrongly" limit configurable
-                    if (d15 > org.spigotmc.SpigotConfig.movedWronglyThreshold && !this.player.isSleeping() && !this.player.playerInteractManager.isCreative()) {
+                    if (d15 > org.spigotmc.SpigotConfig.movedWronglyThreshold && !this.player.isSleeping()) { // Blossom - treat creative players equally
                         flag1 = true;
                         PlayerConnection.c.warn(this.player.getName() + " moved wrongly!");
                     }
 
+                    // Blossom start
+                    // Any floating point errors could allow a client to clip inside blocks,
+                    // which would mean all the fixes implemented for clipping hacks would go to waste.
+                    //
+                    // The reason this line of code exists is to keep the server position in sync
+                    // with the client, even if there is a difference between servers approximation
+                    // of the client's movement and what the client provided in this packet.
+                    //
+                    // If you need accurate server-side player positions, for example a plugin that tries
+                    // to verify player movement, disallowSuspiciousMovements should be disabled.
+                    if (!me.samsuik.blossom.configuration.BlossomConfig.disallowSuspiciousMovements) {
                     this.player.setLocation(d7, d8, d9, f2, f3);
+                    }
+                    // Blossom end
                     this.player.checkMovement(this.player.locX - d0, this.player.locY - d1, this.player.locZ - d2);
                     if (!this.player.noclip) {
                         boolean flag2 = worldserver.getCubes(this.player, this.player.getBoundingBox().shrink((double) f4, (double) f4, (double) f4)).isEmpty();
 
-                        if (flag && (flag1 || !flag2) && !this.player.isSleeping()) {
+                        if ((flag && !flag2 || flag1) && !this.player.isSleeping()) { // Blossom - always tp back when moving wrongly
                             this.a(this.o, this.p, this.q, f2, f3);
                             return;
                         }
-- 
2.40.0.windows.1

