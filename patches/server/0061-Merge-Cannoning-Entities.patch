From 978d2fddd538e862dc88622262f3b954862da5b1 Mon Sep 17 00:00:00 2001
From: Samsuik <40902469+Samsuik@users.noreply.github.com>
Date: Fri, 16 Jun 2023 20:18:04 +0100
Subject: [PATCH] Merge Cannoning Entities


diff --git a/src/main/java/me/samsuik/blossom/configuration/BlossomConfig.java b/src/main/java/me/samsuik/blossom/configuration/BlossomConfig.java
index 5da9a6957..e0a4326c3 100644
--- a/src/main/java/me/samsuik/blossom/configuration/BlossomConfig.java
+++ b/src/main/java/me/samsuik/blossom/configuration/BlossomConfig.java
@@ -351,4 +351,11 @@ public class BlossomConfig {
         hopperOnlyPushIntoEmptyContainer = getBoolean("hoppers.only-push-into-empty-containers", false);
     }
 
+    public static boolean mergeCannonEntities;
+    public static boolean mergeEntitiesOnSpawn;
+    private static void MergeCannoningEntities() {
+        mergeCannonEntities = getBoolean("tnt.merging.enabled", true);
+        mergeEntitiesOnSpawn = getBoolean("tnt.merging.on-spawn", true);
+    }
+
 }
diff --git a/src/main/java/me/samsuik/blossom/entity/MergeHistory.java b/src/main/java/me/samsuik/blossom/entity/MergeHistory.java
new file mode 100644
index 000000000..829a35358
--- /dev/null
+++ b/src/main/java/me/samsuik/blossom/entity/MergeHistory.java
@@ -0,0 +1,46 @@
+package me.samsuik.blossom.entity;
+
+import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
+import net.minecraft.server.MinecraftServer;
+
+public class MergeHistory {
+
+    private final LongOpenHashSet spawnLocations = new LongOpenHashSet();
+    private long spawnLocation;
+    private int lastUsed = MinecraftServer.currentTick;
+
+    public boolean mergeOnSpawn() {
+        return spawnLocations.size() >= 1;
+    }
+
+    public boolean storeHistory() {
+        return spawnLocations.size() >= 2;
+    }
+
+    public long spawnLocation() {
+        return spawnLocation;
+    }
+
+    public void spawnLocation(long packed) {
+        spawnLocations.add(packed);
+        spawnLocation = packed;
+    }
+
+    public boolean includes(long packed) {
+        return spawnLocations.contains(packed);
+    }
+
+    public void merge(MergeHistory history) {
+        spawnLocations.addAll(history.spawnLocations);
+        history.spawnLocations.clear();
+    }
+
+    public void update() {
+        lastUsed = MinecraftServer.currentTick;
+    }
+
+    public boolean remove() {
+        return MinecraftServer.currentTick - lastUsed >= 200;
+    }
+
+}
diff --git a/src/main/java/me/samsuik/blossom/explosions/BlossomExplosion.java b/src/main/java/me/samsuik/blossom/explosions/BlossomExplosion.java
index 6f9c07c00..70d1349af 100644
--- a/src/main/java/me/samsuik/blossom/explosions/BlossomExplosion.java
+++ b/src/main/java/me/samsuik/blossom/explosions/BlossomExplosion.java
@@ -130,7 +130,7 @@ public class BlossomExplosion extends Explosion {
     private int collectExplosionPotential() {
         List<Entity> entityList = world.entityList;
         int index = entityList.indexOf(source);
-        int count = 1;
+        int count = source.getStacked(); // Blossom
 
         for (int i = index + 1; i < entityList.size(); ++i) {
             Entity entity = entityList.get(i);
@@ -139,7 +139,7 @@ public class BlossomExplosion extends Explosion {
                 break;
             }
 
-            count += 1;
+            count += entity.getStacked(); // Blossom
             entity.die();
         }
 
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 575078165..2f7ccceef 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -179,6 +179,61 @@ public abstract class Entity implements ICommandListener {
         this.lastPosition = pos;
     }
     // Blossom end
+    // Blossom start
+    protected final me.samsuik.blossom.entity.MergeHistory mergeHistory = new me.samsuik.blossom.entity.MergeHistory();
+    protected int stacked = 1;
+
+    public final int getStacked() {
+        return stacked;
+    }
+
+    public final boolean tryMergeInto(Entity entity) {
+        if (isLastPosition(entity) && isSafeToMergeWith(entity)) {
+            mergeInto(entity);
+            return true;
+        } else if (me.samsuik.blossom.configuration.BlossomConfig.mergeEntitiesOnSpawn && mergeHistory.mergeOnSpawn() && ticksLived == 1) {
+            long spawnLocation = mergeHistory.spawnLocation();
+            if (world.mergeHistory != null && world.mergeHistory.includes(spawnLocation) && isSafeToMergeWith(world.mergingEntity)) {
+                mergeInto(world.mergingEntity);
+                return true;
+            } else {
+                world.mergeHistory = world.mergeHistoryMap.get(spawnLocation);
+                world.mergingEntity = this;
+            }
+        }
+
+        return false;
+    }
+
+    protected void respawn() {}
+
+    protected boolean isSafeToMergeWith(Entity entity) {
+        return false;
+    }
+
+    protected void mergeInto(Entity entity) {
+        entity.mergeHistory.merge(mergeHistory);
+        entity.stacked += stacked;
+        die();
+    }
+
+    protected final boolean isSamePosition(Entity entity) {
+        AxisAlignedBB bba = getBoundingBox();
+        AxisAlignedBB bbc = entity.getBoundingBox(); // c stands for compare, btw
+        return entity.motX == motX && entity.motY == motZ && entity.motZ == motZ
+            && bba.a == bbc.a && bba.b == bbc.b && bba.c == bbc.c
+            && bba.d == bbc.d && bba.e == bbc.e && bba.f == bbc.f;
+    }
+
+    private void storeMergeHistoryInWorld() {
+        long packed = mergeHistory.spawnLocation();
+        if (world.mergeHistoryMap.containsKey(packed)) {
+            world.mergeHistoryMap.get(packed).merge(mergeHistory);
+        } else {
+            world.mergeHistoryMap.put(packed, mergeHistory);
+        }
+    }
+    // Blossom end
 
     // Spigot start
     public Timing tickTimer = SpigotTimings.getEntityTimings(this); // Spigot
@@ -352,6 +407,11 @@ public abstract class Entity implements ICommandListener {
     }
 
     public void die() {
+        // Blossom start
+        if (mergeHistory.storeHistory()) {
+            storeMergeHistoryInWorld();
+        }
+        // Blossom end
         this.dead = true;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityFallingBlock.java b/src/main/java/net/minecraft/server/EntityFallingBlock.java
index e3bfd8683..f0e3a96e3 100644
--- a/src/main/java/net/minecraft/server/EntityFallingBlock.java
+++ b/src/main/java/net/minecraft/server/EntityFallingBlock.java
@@ -48,6 +48,7 @@ public class EntityFallingBlock extends Entity {
         this.lastY = d1;
         this.lastZ = d2;
         this.loadChunks = world.paperSpigotConfig.loadUnloadedFallingBlocks; // PaperSpigot
+        this.mergeHistory.spawnLocation(blockposition.asLong()); // Blossom
     }
 
     protected boolean s_() {
@@ -60,6 +61,30 @@ public class EntityFallingBlock extends Entity {
         return !this.dead;
     }
 
+    // Blossom start
+    @Override
+    protected boolean isSafeToMergeWith(Entity entity) {
+        if (!(entity instanceof EntityFallingBlock))
+            return false;
+        EntityFallingBlock efb = (EntityFallingBlock) entity;
+        return efb.block == block && efb.ticksLived - 1 == ticksLived && efb.hurtEntities == hurtEntities;
+    }
+
+    @Override
+    protected void respawn() {
+        for (int i = 1, t = stacked; i < t; ++i) {
+            // Use the properties from before we ticked
+            lastProperties(this);
+
+            // This will prevent a loop
+            stacked = 1;
+
+            // and tick!
+            t_();
+        }
+    }
+    // Blossom end
+
     public void t_() {
         Block block = this.block.getBlock();
 
@@ -119,6 +144,7 @@ public class EntityFallingBlock extends Entity {
                                 }
                                 this.world.setTypeAndData(blockposition, this.block, 3);
                                 world.spigotConfig.antiXrayInstance.updateNearbyBlocks(world, blockposition); // Spigot
+                                this.respawn(); // Blossom
                                 // CraftBukkit end
                                 if (block instanceof BlockFalling) {
                                     ((BlockFalling) block).a_(this.world, blockposition);
diff --git a/src/main/java/net/minecraft/server/EntityTNTPrimed.java b/src/main/java/net/minecraft/server/EntityTNTPrimed.java
index 2b94efe5c..0e1319f47 100644
--- a/src/main/java/net/minecraft/server/EntityTNTPrimed.java
+++ b/src/main/java/net/minecraft/server/EntityTNTPrimed.java
@@ -39,6 +39,7 @@ public class EntityTNTPrimed extends Entity {
         this.lastZ = d2;
         this.source = entityliving;
         if (world.paperSpigotConfig.fixCannons) this.motX = this.motZ = 0.0F; // PaperSpigot - Fix cannons
+        this.mergeHistory.spawnLocation(blockposition.asLong()); // Blossom
     }
 
     protected void h() {}
@@ -51,6 +52,55 @@ public class EntityTNTPrimed extends Entity {
         return !this.dead;
     }
 
+    // Blossom start
+    @Override
+    protected boolean isSafeToMergeWith(Entity entity) {
+        return entity instanceof EntityTNTPrimed && ((EntityTNTPrimed) entity).fuseTicks + 1 == fuseTicks;
+    }
+
+    /*
+    @Override
+    protected void respawn() {
+        // If this tnt isn't merged don't try to respawn
+        if (stacked <= 1) {
+            return;
+        }
+
+        EntityTNTPrimed temp = new EntityTNTPrimed(sourceLoc, this.world, this.lastX, this.lastY, this.lastZ, this.source);
+
+        // Update properties
+        temp.lastProperties(this);
+
+        // Add "temp" to the chunk
+        Chunk chunk = world.getChunkAtWorldCoords(new BlockPosition(temp));
+        chunk.a(temp);
+
+        // We should only explode this TNT, otherwise metadata would have to be transferred.
+        for (int i = 1; i < stacked; ++i) {
+            // Explode!
+            explode();
+
+            // This should be fine, it'll reassign during ticking.
+            lastProperties(this);
+
+            // Copy motion across
+            motX = temp.motX;
+            motY = temp.motY;
+            motZ = temp.motZ;
+
+            // Make sure it doesn't explode during ticking
+            fuseTicks = 1;
+
+            // Now, tick this entity
+            t_();
+        }
+
+        // Remove "temp" from the chunk
+        chunk.b(temp);
+    }
+    */
+    // Blossom end
+
     public void t_() {
         if (world.spigotConfig.currentPrimedTnt++ > world.spigotConfig.maxTntTicksPerTick) { return; } // Spigot
         this.lastX = this.locX;
@@ -85,6 +135,7 @@ public class EntityTNTPrimed extends Entity {
             // CraftBukkit start - Need to reverse the order of the explosion and the entity death so we have a location for the event
             // this.die();
             if (!this.world.isClientSide) {
+                this.respawn(); // Blossom
                 this.explode();
             }
             this.die();
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 5e045faef..448597881 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -893,6 +893,13 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
                 worldserver.explosionDensityCache.clear(); // PaperSpigot - Optimize explosions
                 worldserver.minimal.clear(); // Blossom
                 worldserver.densityCache.clear(); // Blossom
+                // Blossom start
+                if (currentTick % 20 == 0) {
+                    worldserver.mergeHistoryMap.values().removeIf((a) -> a.remove());
+                }
+                worldserver.mergeHistory = null;
+                worldserver.mergingEntity = null;
+                // Blossom end
             // } // CraftBukkit
 
             // this.i[i][this.ticks % 100] = System.nanoTime() - j; // CraftBukkit
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 27248a774..78d22fc2b 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -167,6 +167,11 @@ public abstract class World implements IBlockAccess {
     // Blossom end
     public final me.samsuik.blossom.explosions.cache.DensityCache densityCache = new me.samsuik.blossom.explosions.cache.DensityCache(); // Blossom - optimise explosions
     public final it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap<BlockRedstoneTorch.RedstoneUpdateInfo> redstoneTorchMap = new it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap<>(); // Blossom
+    // Blossom start
+    public final it.unimi.dsi.fastutil.longs.Long2ObjectMap<me.samsuik.blossom.entity.MergeHistory> mergeHistoryMap = new it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap<>();
+    public me.samsuik.blossom.entity.MergeHistory mergeHistory;
+    public Entity mergingEntity;
+    // Blossom end
 
     protected World(IDataManager idatamanager, WorldData worlddata, WorldProvider worldprovider, MethodProfiler methodprofiler, boolean flag, ChunkGenerator gen, org.bukkit.World.Environment env) {
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig( worlddata.getName() ); // Spigot
@@ -1580,6 +1585,7 @@ public abstract class World implements IBlockAccess {
 
         int i;
         Entity entity;
+
         CrashReport crashreport;
         CrashReportSystemDetails crashreportsystemdetails;
 
@@ -1648,6 +1654,7 @@ public abstract class World implements IBlockAccess {
         int entitiesThisCycle = 0;
         // PaperSpigot start - Disable tick limiters
         //if (tickPosition < 0) tickPosition = 0;
+        Entity previous = null; // Blossom
         for (tickPosition = 0; tickPosition < entityList.size(); tickPosition++) {
             // PaperSpigot end
             tickPosition = (tickPosition < entityList.size()) ? tickPosition : 0;
@@ -1664,6 +1671,16 @@ public abstract class World implements IBlockAccess {
 
             this.methodProfiler.a("tick");
             if (!entity.dead) {
+                // Blossom start
+                if (me.samsuik.blossom.configuration.BlossomConfig.mergeCannonEntities
+                    && previous != null && !previous.dead && entity.tryMergeInto(previous)
+                ) {
+                    continue;
+                }
+
+                previous = entity;
+                // Blossom end
+
                 try {
                     entity.tickTimer.startTiming(); // Spigot
                     this.g(entity);
-- 
2.40.0.windows.1

