From 84c17574c2024b528e2821c56e23df5a019a9514 Mon Sep 17 00:00:00 2001
From: Samsuik <40902469+Samsuik@users.noreply.github.com>
Date: Sat, 1 Jul 2023 23:41:52 +0100
Subject: [PATCH] Optimise checkBlockCollisions


diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index abfe2a466..73e147f38 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -1237,25 +1237,26 @@ public abstract class Entity implements ICommandListener {
             return;
         }
         // Blossom end
-        BlockPosition blockposition = new BlockPosition(this.getBoundingBox().a + 0.001D, this.getBoundingBox().b + 0.001D, this.getBoundingBox().c + 0.001D);
-        BlockPosition blockposition1 = new BlockPosition(this.getBoundingBox().d - 0.001D, this.getBoundingBox().e - 0.001D, this.getBoundingBox().f - 0.001D);
-
-        if (this.world.areChunksLoadedBetween(blockposition, blockposition1)) {
-            for (int i = blockposition.getX(); i <= blockposition1.getX(); ++i) {
-                for (int j = blockposition.getY(); j <= blockposition1.getY(); ++j) {
-                    for (int k = blockposition.getZ(); k <= blockposition1.getZ(); ++k) {
-                        BlockPosition blockposition2 = new BlockPosition(i, j, k);
-                        IBlockData iblockdata = this.world.getType(blockposition2);
-
-                        try {
-                            iblockdata.getBlock().a(this.world, blockposition2, iblockdata, this);
-                        } catch (Throwable throwable) {
-                            CrashReport crashreport = CrashReport.a(throwable, "Colliding entity with block");
-                            CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Block being collided with");
-
-                            CrashReportSystemDetails.a(crashreportsystemdetails, blockposition2, iblockdata);
-                            throw new ReportedException(crashreport);
-                        }
+        // Blossom start
+        AxisAlignedBB bb = getBoundingBox();
+        int minX = MathHelper.floor(bb.a + 0.001D);
+        int minY = MathHelper.floor(bb.b + 0.001D);
+        int minZ = MathHelper.floor(bb.c + 0.001D);
+        int maxX = MathHelper.floor(bb.d - 0.001D);
+        int maxY = MathHelper.floor(bb.e - 0.001D);
+        int maxZ = MathHelper.floor(bb.f - 0.001D);
+
+        for (int x = minX; x <= maxX; ++x) {
+            for (int z = minZ; z <= maxZ; ++z) {
+                Chunk chunk = getCurrentChunkAt(x >> 4, z >> 4);
+                if (chunk == null) continue;
+                for (int y = minY; y <= maxY; ++y) {
+                    IBlockData iblockdata = chunk.getBlockData(x, y, z);
+                    Block block = iblockdata.getBlock();
+
+                    if (block.requiresBlockCheck) {
+                        iblockdata.getBlock().a(this.world, new BlockPosition(x, y, z), iblockdata, this);
+                        // Blossom end
                     }
                 }
             }
-- 
2.50.1

