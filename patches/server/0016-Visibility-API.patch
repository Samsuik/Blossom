From 12472260945f7204850c522d2fa0a2892bf413ac Mon Sep 17 00:00:00 2001
From: Samsuik <40902469+Samsuik@users.noreply.github.com>
Date: Tue, 15 Sep 2020 19:36:22 +0100
Subject: [PATCH] Visibility API


diff --git a/src/main/java/me/samsuik/blossom/visuals/VisualSettings.java b/src/main/java/me/samsuik/blossom/visuals/VisualSettings.java
new file mode 100644
index 000000000..3d84c8175
--- /dev/null
+++ b/src/main/java/me/samsuik/blossom/visuals/VisualSettings.java
@@ -0,0 +1,72 @@
+package me.samsuik.blossom.visuals;
+
+import net.minecraft.server.NBTTagCompound;
+
+import java.util.EnumSet;
+
+public class VisualSettings implements Visuals {
+
+    private final EnumSet<VisualType> settings = EnumSet.noneOf(VisualType.class);
+
+    public VisualSettings() {
+        for (VisualType visualType : VisualType.values()) {
+            if (visualType.getDefault()) {
+                settings.add(visualType);
+            }
+        }
+    }
+
+    @Override
+    public void toggle(VisualType visualType) {
+        set(visualType, !isEnabled(visualType));
+    }
+
+    @Override
+    public void set(VisualType visualType, boolean enabled) {
+        if (enabled) {
+            settings.add(visualType);
+        } else {
+            settings.remove(visualType);
+        }
+    }
+
+    @Override
+    public boolean isEnabled(VisualType visualType) {
+        return settings.contains(visualType);
+    }
+
+    @Override
+    public boolean isDisabled(VisualType visualType) {
+        return !isEnabled(visualType);
+    }
+
+    @Override
+    public boolean isToggled(VisualType visualType) {
+        return isEnabled(visualType) != visualType.getDefault();
+    }
+
+    @Override
+    public boolean isModified() {
+        return !settings.isEmpty();
+    }
+
+    public boolean requiresBlockUpdate() {
+        return isToggled(VisualType.LIGHTING) || isToggled(VisualType.PISTONS) || isToggled(VisualType.REDSTONE) || isToggled(VisualType.SPAWNERS);
+    }
+
+    public void loadCompound(NBTTagCompound nbtTagCompound) {
+        for (VisualType visualType : VisualType.values()) {
+            if (nbtTagCompound.hasKey(visualType.name())) {
+                set(visualType, nbtTagCompound.getBoolean(visualType.name()));
+            }
+        }
+    }
+
+    public NBTTagCompound getCompound() {
+        NBTTagCompound nbtTagCompound = new NBTTagCompound();
+        for (VisualType visualType : VisualType.values())
+            nbtTagCompound.setBoolean(visualType.name(), isEnabled(visualType));
+        return nbtTagCompound;
+    }
+
+}
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index abd543c71..e8e4fa969 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -140,6 +140,7 @@ public abstract class Entity implements ICommandListener {
     public boolean fromMobSpawner;
     public void inactiveTick() { }
     // Spigot end
+    public boolean isCannoningEntity = this instanceof EntityTNTPrimed || this instanceof EntityFallingBlock;
 
     public int getId() {
         return this.id;
diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java
index a661fdcf8..010bb9063 100644
--- a/src/main/java/net/minecraft/server/EntityHuman.java
+++ b/src/main/java/net/minecraft/server/EntityHuman.java
@@ -61,6 +61,7 @@ public abstract class EntityHuman extends EntityLiving {
     private boolean bI = false;
     public EntityFishingHook hookedFish;
     public boolean affectsSpawning = true; // PaperSpigot
+    public final me.samsuik.blossom.visuals.VisualSettings visualSettings = new me.samsuik.blossom.visuals.VisualSettings(); // Blossom - visibility api
 
     // CraftBukkit start
     public boolean fauxSleeping;
@@ -735,6 +736,11 @@ public abstract class EntityHuman extends EntityLiving {
             this.enderChest.a(nbttaglist1);
         }
 
+        // Blossom start - visibility api
+        if (nbttagcompound.hasKeyOfType("Blossom.Visuals", 10)) {
+            this.visualSettings.loadCompound(nbttagcompound.getCompound("Blossom.Visuals"));
+        }
+        // Blossom end
     }
 
     public void b(NBTTagCompound nbttagcompound) {
@@ -765,6 +771,7 @@ public abstract class EntityHuman extends EntityLiving {
         }
         nbttagcompound.setString("SpawnWorld", spawnWorld); // CraftBukkit - fixes bed spawns for multiworld worlds
 
+        nbttagcompound.set("Blossom.Visuals", this.visualSettings.getCompound()); // Blossom
     }
 
     public boolean damageEntity(DamageSource damagesource, float f) {
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index e144f7c9e..eaa4b489b 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -257,7 +257,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 
             if (!arraylist.isEmpty()) {
                 if (arraylist.size() == 1) {
-                    this.playerConnection.sendPacket(new PacketPlayOutMapChunk((Chunk) arraylist.get(0), true, '\uffff'));
+                    this.playerConnection.sendPacket(new PacketPlayOutMapChunk((Chunk) arraylist.get(0), true, '\uffff', true)); // Blossom
                 } else {
                     this.playerConnection.sendPacket(new PacketPlayOutMapChunkBulk(arraylist));
                 }
diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index 25b8fada2..af2285e78 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -13,6 +13,8 @@ import org.bukkit.entity.Player;
 import org.bukkit.event.player.PlayerVelocityEvent;
 // CraftBukkit end
 
+import me.samsuik.blossom.visuals.Visuals.VisualType; // Blossom
+
 public class EntityTrackerEntry {
 
     private static final Logger p = LogManager.getLogger();
@@ -45,6 +47,30 @@ public class EntityTrackerEntry {
     public java.util.Map<EntityPlayer, Boolean> trackedPlayerMap = new java.util.HashMap<EntityPlayer, Boolean>();
     public Set<EntityPlayer> trackedPlayers = trackedPlayerMap.keySet();
     // PaperSpigot end
+    // Blossom start - visibility api
+    private boolean shouldTrackPlayer(EntityPlayer player) {
+        if (player.visualSettings.isToggled(VisualType.TNT_VISIBILITY)  && this.tracker instanceof EntityTNTPrimed ||
+            player.visualSettings.isToggled(VisualType.SAND_VISIBILITY) && this.tracker instanceof EntityFallingBlock) {
+            return false;
+        } else if (player.visualSettings.isToggled(VisualType.MINIMAL)
+                && (this.tracker instanceof EntityTNTPrimed || this.tracker instanceof EntityFallingBlock)
+        ) {
+            int blockX = MathHelper.floor(this.tracker.locX);
+            int blockY = MathHelper.floor(this.tracker.locY);
+            int blockZ = MathHelper.floor(this.tracker.locZ);
+            long packed = BlockPosition.asLong(blockX, blockY, blockZ);
+            int curr = this.tracker.world.minimal.get(packed);
+
+            if (curr != Integer.MIN_VALUE) {
+                return curr == this.tracker.getId();
+            } else {
+                this.tracker.world.minimal.put(packed, this.tracker.getId());
+            }
+        }
+
+        return true;
+    }
+    // Blossom end
 
     public EntityTrackerEntry(Entity entity, int i, int j, boolean flag) {
         this.tracker = entity;
@@ -336,7 +362,7 @@ public class EntityTrackerEntry {
     public void updatePlayer(EntityPlayer entityplayer) {
         org.spigotmc.AsyncCatcher.catchOp( "player tracker update"); // Spigot
         if (entityplayer != this.tracker) {
-            if (this.c(entityplayer)) {
+            if (this.c(entityplayer) && shouldTrackPlayer(entityplayer)) { // Blossom
                 if (!this.trackedPlayers.contains(entityplayer) && (this.e(entityplayer) || this.tracker.attachedToPlayer)) {
                     // CraftBukkit start - respect vanish API
                     if (this.tracker instanceof EntityPlayer) {
@@ -349,7 +375,7 @@ public class EntityTrackerEntry {
                     entityplayer.removeQueue.remove(Integer.valueOf(this.tracker.getId()));
                     // CraftBukkit end
                     this.trackedPlayerMap.put(entityplayer, true); // PaperBukkit
-                    Packet packet = this.c();
+                    Packet packet = this.createPacket(entityplayer); // Blossom
 
                     entityplayer.playerConnection.sendPacket(packet);
                     if (!this.tracker.getDataWatcher().d()) {
@@ -455,6 +481,11 @@ public class EntityTrackerEntry {
     }
 
     private Packet c() {
+        // Blossom start - visibility api
+        return this.createPacket(null);
+    }
+    private Packet createPacket(EntityPlayer entityPlayer) {
+        // Blossom end
         if (this.tracker.dead) {
             // CraftBukkit start - Remove useless error spam, just return
             // EntityTrackerEntry.p.warn("Fetching addPacket for removed entity");
@@ -523,6 +554,11 @@ public class EntityTrackerEntry {
             } else if (this.tracker instanceof EntityEgg) {
                 return new PacketPlayOutSpawnEntity(this.tracker, 62);
             } else if (this.tracker instanceof EntityTNTPrimed) {
+                // Blossom start - visibility api
+                if (entityPlayer != null && entityPlayer.visualSettings.isToggled(VisualType.FLASHING_TNT)) {
+                    return new PacketPlayOutSpawnEntity(this.tracker, 70, Block.getCombinedId(Blocks.TNT.getBlockData()));
+                }
+                // Blossom end
                 return new PacketPlayOutSpawnEntity(this.tracker, 50);
             } else if (this.tracker instanceof EntityEnderCrystal) {
                 return new PacketPlayOutSpawnEntity(this.tracker, 51);
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index d66c3fb43..8dcead136 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -873,6 +873,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
                 this.methodProfiler.b();
                 this.methodProfiler.b();
                 worldserver.explosionDensityCache.clear(); // PaperSpigot - Optimize explosions
+                worldserver.minimal.clear(); // Blossom
             // } // CraftBukkit
 
             // this.i[i][this.ticks % 100] = System.nanoTime() - j; // CraftBukkit
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutBlockAction.java b/src/main/java/net/minecraft/server/PacketPlayOutBlockAction.java
index cfb92ead8..3c01c0c9b 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutBlockAction.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutBlockAction.java
@@ -7,7 +7,7 @@ public class PacketPlayOutBlockAction implements Packet<PacketListenerPlayOut> {
     private BlockPosition a;
     private int b;
     private int c;
-    private Block d;
+    private Block d; public Block getBlock() { return d; } // Blossom
 
     public PacketPlayOutBlockAction() {}
 
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutBlockChange.java b/src/main/java/net/minecraft/server/PacketPlayOutBlockChange.java
index fae8704b5..abe57872e 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutBlockChange.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutBlockChange.java
@@ -4,15 +4,27 @@ import java.io.IOException;
 
 public class PacketPlayOutBlockChange implements Packet<PacketListenerPlayOut> {
 
-    private BlockPosition a;
+    // Blossom start
+    private BlockPosition a; public BlockPosition getPosition() { return a; }
     public IBlockData block;
+    public boolean dirtyUpdate;
 
     public PacketPlayOutBlockChange() {}
 
+    PacketPlayOutBlockChange(World world, BlockPosition blockposition, boolean dirty) {
+        this(world, blockposition);
+        this.dirtyUpdate = dirty;
+    }
+
     public PacketPlayOutBlockChange(World world, BlockPosition blockposition) {
+        this(world.getType(blockposition), blockposition);
+    }
+
+    PacketPlayOutBlockChange(IBlockData iblockdata, BlockPosition blockposition) {
         this.a = blockposition;
-        this.block = world.getType(blockposition);
+        this.block = iblockdata;
     }
+    // Blossom end
 
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
         this.a = packetdataserializer.c();
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutEntityEquipment.java b/src/main/java/net/minecraft/server/PacketPlayOutEntityEquipment.java
new file mode 100644
index 000000000..1e52ed9e4
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutEntityEquipment.java
@@ -0,0 +1,37 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+
+public class PacketPlayOutEntityEquipment implements Packet<PacketListenerPlayOut> {
+
+    // Blossom start
+    private int a; public int getId() { return a; }
+    private int b; public int getSlot() { return b; }
+    private ItemStack c; public ItemStack getItem() { return c; }
+    // Blossom end
+
+    public PacketPlayOutEntityEquipment() {}
+
+    public PacketPlayOutEntityEquipment(int i, int j, ItemStack itemstack) {
+        this.a = i;
+        this.b = j;
+        this.c = itemstack == null ? null : itemstack.cloneItemStack();
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.e();
+        this.b = packetdataserializer.readShort();
+        this.c = packetdataserializer.i();
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.b(this.a);
+        packetdataserializer.writeShort(this.b);
+        packetdataserializer.a(this.c);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
index a0021fb96..bfda7fb0e 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
@@ -7,14 +7,35 @@ import java.util.Iterator;
 
 public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
 
-    private int a;
-    private int b;
-    private PacketPlayOutMapChunk.ChunkMap c;
-    private boolean d;
+    // Blossom start
+    private int a; public int getX() { return a; }
+    private int b; public int getZ() { return b; }
+    private PacketPlayOutMapChunk.ChunkMap c; public ChunkMap getChunkMap() { return c; }
+    private boolean d; public boolean isUnloading() { return d; }
+    public boolean dirtyUpdate, blockLight, skyLight;
+    public int sectionHeight;
 
     public PacketPlayOutMapChunk() {}
 
+    PacketPlayOutMapChunk(byte[] data, int heightBitmap, int x, int z, boolean unloading) {
+        this.a = x;
+        this.b = z;
+        this.c = new ChunkMap();
+        this.c.a = data;
+        this.c.b = heightBitmap;
+        this.d = unloading;
+    }
+
+    PacketPlayOutMapChunk(Chunk chunk, boolean flag, int i, boolean dirty) {
+        this(chunk, flag, i);
+        this.dirtyUpdate = dirty;
+    }
+
     public PacketPlayOutMapChunk(Chunk chunk, boolean flag, int i) {
+        this.sectionHeight = i;
+        this.blockLight = flag;
+        this.skyLight = !chunk.world.worldProvider.o();
+        // Blossom end
         this.a = chunk.locX;
         this.b = chunk.locZ;
         this.d = flag;
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutMapChunkBulk.java b/src/main/java/net/minecraft/server/PacketPlayOutMapChunkBulk.java
index 00c053850..e9e8101cf 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutMapChunkBulk.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutMapChunkBulk.java
@@ -5,14 +5,24 @@ import java.util.List;
 
 public class PacketPlayOutMapChunkBulk implements Packet<PacketListenerPlayOut> {
 
-    private int[] a;
-    private int[] b;
-    private PacketPlayOutMapChunk.ChunkMap[] c;
-    private boolean d;
-    private World world; // Spigot
+    // Blossom start
+    private int[] a; public int[] getXArr() { return a; }
+    private int[] b; public int[] getZArr() { return b; }
+    private PacketPlayOutMapChunk.ChunkMap[] c; public PacketPlayOutMapChunk.ChunkMap[] getChunkMaps() { return c; }
+    private boolean d; public boolean hasSkyLight() { return d; }
+    private World world; public World getWorld() { return world; } // Spigot
 
     public PacketPlayOutMapChunkBulk() {}
 
+    PacketPlayOutMapChunkBulk(int[] x, int[] z, PacketPlayOutMapChunk.ChunkMap[] chunkMaps, boolean skyLight, World world) {
+        this.a = x;
+        this.b = z;
+        this.c = chunkMaps;
+        this.d = skyLight;
+        this.world = world;
+    }
+    // Blossom end
+
     public PacketPlayOutMapChunkBulk(List<Chunk> list) {
         int i = list.size();
 
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutMultiBlockChange.java b/src/main/java/net/minecraft/server/PacketPlayOutMultiBlockChange.java
new file mode 100644
index 000000000..22b46f140
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutMultiBlockChange.java
@@ -0,0 +1,96 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+
+public class PacketPlayOutMultiBlockChange implements Packet<PacketListenerPlayOut> {
+
+    // Blossom start
+    private ChunkCoordIntPair a; public ChunkCoordIntPair getChunkCoordIntPair() { return a; }
+    private PacketPlayOutMultiBlockChange.MultiBlockChangeInfo[] b; public MultiBlockChangeInfo[] getBlockChangeInfo() { return b; }
+    public boolean dirtyUpdate;
+
+    MultiBlockChangeInfo createMultiChangeInfo(short relative, IBlockData iblockdata) {
+        return new MultiBlockChangeInfo(relative, iblockdata);
+    }
+
+    public PacketPlayOutMultiBlockChange() {}
+
+    PacketPlayOutMultiBlockChange(ChunkCoordIntPair pair, PacketPlayOutMultiBlockChange.MultiBlockChangeInfo[] infos) {
+        this.a = pair;
+        this.b = infos;
+    }
+
+    PacketPlayOutMultiBlockChange(int i, short[] ashort, Chunk chunk, boolean dirty) {
+        this(i, ashort, chunk);
+        this.dirtyUpdate = dirty;
+    }
+    // Blossom end
+
+    public PacketPlayOutMultiBlockChange(int i, short[] ashort, Chunk chunk) {
+        this.a = new ChunkCoordIntPair(chunk.locX, chunk.locZ);
+        this.b = new PacketPlayOutMultiBlockChange.MultiBlockChangeInfo[i];
+
+        for (int j = 0; j < this.b.length; ++j) {
+            this.b[j] = new PacketPlayOutMultiBlockChange.MultiBlockChangeInfo(ashort[j], chunk);
+        }
+
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = new ChunkCoordIntPair(packetdataserializer.readInt(), packetdataserializer.readInt());
+        this.b = new PacketPlayOutMultiBlockChange.MultiBlockChangeInfo[packetdataserializer.e()];
+
+        for (int i = 0; i < this.b.length; ++i) {
+            this.b[i] = new PacketPlayOutMultiBlockChange.MultiBlockChangeInfo(packetdataserializer.readShort(), (IBlockData) Block.d.a(packetdataserializer.e()));
+        }
+
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.writeInt(this.a.x);
+        packetdataserializer.writeInt(this.a.z);
+        packetdataserializer.b(this.b.length);
+        PacketPlayOutMultiBlockChange.MultiBlockChangeInfo[] apacketplayoutmultiblockchange_multiblockchangeinfo = this.b;
+        int i = apacketplayoutmultiblockchange_multiblockchangeinfo.length;
+
+        for (int j = 0; j < i; ++j) {
+            PacketPlayOutMultiBlockChange.MultiBlockChangeInfo packetplayoutmultiblockchange_multiblockchangeinfo = apacketplayoutmultiblockchange_multiblockchangeinfo[j];
+
+            packetdataserializer.writeShort(packetplayoutmultiblockchange_multiblockchangeinfo.b());
+            packetdataserializer.b(Block.d.b(packetplayoutmultiblockchange_multiblockchangeinfo.c()));
+        }
+
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+
+    public class MultiBlockChangeInfo {
+
+        private final short b;
+        private final IBlockData c;
+
+        public MultiBlockChangeInfo(short short0, IBlockData iblockdata) {
+            this.b = short0;
+            this.c = iblockdata;
+        }
+
+        public MultiBlockChangeInfo(short short0, Chunk chunk) {
+            this.b = short0;
+            this.c = chunk.getBlockData(this.a());
+        }
+
+        public BlockPosition a() {
+            return new BlockPosition(PacketPlayOutMultiBlockChange.this.a.a(this.b >> 12 & 15, this.b & 255, this.b >> 8 & 15));
+        }
+
+        public short b() {
+            return this.b;
+        }
+
+        public IBlockData c() {
+            return this.c;
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutTileEntityData.java b/src/main/java/net/minecraft/server/PacketPlayOutTileEntityData.java
new file mode 100644
index 000000000..b83c19766
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutTileEntityData.java
@@ -0,0 +1,37 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+
+public class PacketPlayOutTileEntityData implements Packet<PacketListenerPlayOut> {
+
+    // Blossom start
+    private BlockPosition a; public BlockPosition getPosition() { return a; }
+    private int b; public int getId() { return b; }
+    // Blossom end
+    private NBTTagCompound c;
+
+    public PacketPlayOutTileEntityData() {}
+
+    public PacketPlayOutTileEntityData(BlockPosition blockposition, int i, NBTTagCompound nbttagcompound) {
+        this.a = blockposition;
+        this.b = i;
+        this.c = nbttagcompound;
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.c();
+        this.b = packetdataserializer.readUnsignedByte();
+        this.c = packetdataserializer.h();
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.a(this.a);
+        packetdataserializer.writeByte((byte) this.b);
+        packetdataserializer.a(this.c);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+
+}
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index 38586aad7..d8f2ec0e0 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -496,7 +496,7 @@ public class PlayerChunkMap {
                     k = (this.dirtyBlocks[0] >> 8 & 15) + this.location.z * 16;
                     BlockPosition blockposition = new BlockPosition(i, j, k);
 
-                    this.a((Packet) (new PacketPlayOutBlockChange(PlayerChunkMap.this.world, blockposition)));
+                    this.a((Packet) (new PacketPlayOutBlockChange(PlayerChunkMap.this.world, blockposition, true))); // Blossom
                     if (PlayerChunkMap.this.world.getType(blockposition).getBlock().isTileEntity()) {
                         this.a(PlayerChunkMap.this.world.getTileEntity(blockposition));
                     }
@@ -506,7 +506,7 @@ public class PlayerChunkMap {
                     if (this.dirtyCount == 64) {
                         i = this.location.x * 16;
                         j = this.location.z * 16;
-                        this.a((Packet) (new PacketPlayOutMapChunk(PlayerChunkMap.this.world.getChunkAt(this.location.x, this.location.z), false, this.f)));
+                        this.a((Packet) (new PacketPlayOutMapChunk(PlayerChunkMap.this.world.getChunkAt(this.location.x, this.location.z), false, this.f, true))); // Blossom
 
                         for (k = 0; k < 16; ++k) {
                             if ((this.f & 1 << k) != 0) {
@@ -519,7 +519,7 @@ public class PlayerChunkMap {
                             }
                         }
                     } else {
-                        this.a((Packet) (new PacketPlayOutMultiBlockChange(this.dirtyCount, this.dirtyBlocks, PlayerChunkMap.this.world.getChunkAt(this.location.x, this.location.z))));
+                        this.a((Packet) (new PacketPlayOutMultiBlockChange(this.dirtyCount, this.dirtyBlocks, PlayerChunkMap.this.world.getChunkAt(this.location.x, this.location.z), true))); // Blossom
 
                         for (i = 0; i < this.dirtyCount; ++i) {
                             j = (this.dirtyBlocks[i] >> 12 & 15) + this.location.x * 16;
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 4dfd7d135..3afb56069 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -123,6 +123,209 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
     }
     private final static HashSet<Integer> invalidItems = new HashSet<Integer>(java.util.Arrays.asList(8, 9, 10, 11, 26, 34, 36, 43, 51, 52, 55, 59, 60, 62, 63, 64, 68, 71, 74, 75, 83, 90, 92, 93, 94, 104, 105, 115, 117, 118, 119, 125, 127, 132, 140, 141, 142, 144)); // TODO: Check after every update.
     // CraftBukkit end
+    // Blossom start - visibility api
+    private static final IBlockData SPAWNER_CONVERSION_BLOCK = Blocks.IRON_BLOCK.getBlockData();
+
+    public Packet modifyPacket(Packet packet) {
+        if (!player.visualSettings.isModified()) {
+            // ignored
+        } else if (packet instanceof PacketPlayOutEntityEquipment && player.visualSettings.isToggled(me.samsuik.blossom.visuals.Visuals.VisualType.ENCHANTMENT_GLINT)) {
+            PacketPlayOutEntityEquipment eq = (PacketPlayOutEntityEquipment) packet;
+            ItemStack itemstack = eq.getItem();
+
+            if (itemstack != null && itemstack.hasEnchantments()) {
+                itemstack = itemstack.cloneItemStack();
+
+                itemstack.getTag().remove("ench");
+
+                return new PacketPlayOutEntityEquipment(eq.getId(), eq.getSlot(), itemstack);
+            }
+        } else if (!player.visualSettings.requiresBlockUpdate()) {
+            // ignored
+        } else if (packet instanceof PacketPlayOutBlockChange) {
+            PacketPlayOutBlockChange bc = (PacketPlayOutBlockChange) packet;
+
+            if (!bc.dirtyUpdate) {
+                return packet;
+            }
+
+            IBlockData modified = modifyBlockData(bc.block);
+
+            if (modified == bc.block) {
+                // ignored
+            } else if (modified == null) {
+                return null;
+            } else {
+                return new PacketPlayOutBlockChange(modified, bc.getPosition());
+            }
+        } else if (packet instanceof PacketPlayOutMultiBlockChange) {
+            PacketPlayOutMultiBlockChange bc = (PacketPlayOutMultiBlockChange) packet;
+
+            if (!bc.dirtyUpdate) {
+                return packet;
+            }
+
+            PacketPlayOutMultiBlockChange.MultiBlockChangeInfo[] changeInfoArr = bc.getBlockChangeInfo();
+            List<PacketPlayOutMultiBlockChange.MultiBlockChangeInfo> changeInfoList = null;
+            int changes = 0;
+
+            for (int i = 0; i < changeInfoArr.length; i++) {
+                PacketPlayOutMultiBlockChange.MultiBlockChangeInfo info = changeInfoArr[i];
+                IBlockData modified = modifyBlockData(info.c());
+
+                if (modified == info.c()) {
+                    continue;
+                }
+
+                if (changeInfoList == null) {
+                    changeInfoList = new ArrayList<>(java.util.Arrays.asList(changeInfoArr));
+                }
+
+                int index = i - changes;
+
+                if (modified == null) {
+                    changeInfoList.remove(index);
+                    changes++;
+                } else {
+                    changeInfoList.set(index, bc.createMultiChangeInfo(info.b(), modified));
+                }
+            }
+
+            if (changeInfoList != null) {
+                return new PacketPlayOutMultiBlockChange(bc.getChunkCoordIntPair(), changeInfoList.toArray(new PacketPlayOutMultiBlockChange.MultiBlockChangeInfo[0]));
+            }
+        } else if (packet instanceof PacketPlayOutMapChunk) {
+            PacketPlayOutMapChunk mc = (PacketPlayOutMapChunk) packet;
+
+            if (!mc.dirtyUpdate) {
+                return packet;
+            }
+
+            PacketPlayOutMapChunk.ChunkMap chunkMap = mc.getChunkMap();
+            PacketPlayOutMapChunk.ChunkMap modified = modifyChunkMap(chunkMap, mc.skyLight);
+
+            if (modified != chunkMap) {
+                return new PacketPlayOutMapChunk(modified.a, modified.b, mc.getX(), mc.getZ(), mc.isUnloading());
+            }
+        } else if (packet instanceof PacketPlayOutMapChunkBulk) {
+            PacketPlayOutMapChunkBulk mc = (PacketPlayOutMapChunkBulk) packet;
+            PacketPlayOutMapChunk.ChunkMap[] chunks = mc.getChunkMaps();
+
+            for (int i = 0; i < chunks.length; i++) {
+                PacketPlayOutMapChunk.ChunkMap chunkMap = chunks[i];
+                PacketPlayOutMapChunk.ChunkMap modified = modifyChunkMap(chunkMap, mc.hasSkyLight());
+
+                if (modified == chunkMap) {
+                    continue;
+                }
+
+                if (chunks == mc.getChunkMaps()) {
+                    chunks = java.util.Arrays.copyOf(chunks, chunks.length);
+                }
+
+                chunks[i] = modified;
+            }
+
+            if (chunks != mc.getChunkMaps()) {
+                return new PacketPlayOutMapChunkBulk(mc.getXArr(), mc.getZArr(), chunks, mc.hasSkyLight(), mc.getWorld());
+            }
+        } else if (packet instanceof PacketPlayOutTileEntityData && player.visualSettings.isToggled(me.samsuik.blossom.visuals.Visuals.VisualType.SPAWNERS)) {
+            PacketPlayOutTileEntityData te = (PacketPlayOutTileEntityData) packet;
+
+            if (te.getId() == 1) {
+                return new PacketPlayOutBlockChange(SPAWNER_CONVERSION_BLOCK, te.getPosition());
+            }
+        } else if (packet instanceof PacketPlayOutBlockAction && player.visualSettings.isToggled(me.samsuik.blossom.visuals.Visuals.VisualType.PISTONS)) {
+            PacketPlayOutBlockAction ba = (PacketPlayOutBlockAction) packet;
+
+            if (isPiston(ba.getBlock())) {
+                return null;
+            }
+        }
+
+        return packet;
+    }
+
+    private PacketPlayOutMapChunk.ChunkMap modifyChunkMap(PacketPlayOutMapChunk.ChunkMap chunkMap, boolean skyLight) {
+        byte[] data = chunkMap.a;
+        int bitmap =  chunkMap.b;
+        int height = Integer.bitCount(bitmap & '\uffff');
+
+        int blocks = height * 16 * 16 * 16 * 2;
+        int light  = height * 16 * 16 * 16 / 2;
+
+        if (skyLight) {
+            light *= 2;
+        }
+
+        if (player.visualSettings.isToggled(me.samsuik.blossom.visuals.Visuals.VisualType.SPAWNERS)) {
+            for (int i = 0; i < blocks; i += 2) {
+                int combined = (data[i] & 255) | (data[i + 1] & 255) << 8;
+                IBlockData iblockdata = Block.d.a(combined);
+
+                // can be null for potentially bad blocks
+                // air can also be null sometimes
+                if (iblockdata == null) {
+                    continue;
+                }
+
+                IBlockData modified = modifyBlockData(iblockdata);
+
+                // The previous state was already lost, as a result we cannot preserve the state indicated by modified being null.
+                if (modified == iblockdata || modified == null) {
+                    continue;
+                }
+
+                if (data == chunkMap.a) {
+                    data = java.util.Arrays.copyOf(data, data.length);
+                }
+
+                combined = Block.d.b(iblockdata);
+
+                data[i + 0] = (byte) (combined & 255);
+                data[i + 1] = (byte) (combined >> 8 & 255);
+            }
+        }
+
+        if (player.visualSettings.isToggled(me.samsuik.blossom.visuals.Visuals.VisualType.LIGHTING)) {
+            if (data == chunkMap.a) {
+                data = java.util.Arrays.copyOf(data, data.length);
+            }
+
+            int end = light + blocks;
+            for (int i = blocks; i < end; ++i) {
+                data[i] = -1;
+            }
+        }
+
+        if (data != chunkMap.a) {
+            PacketPlayOutMapChunk.ChunkMap reconstructedMap = new PacketPlayOutMapChunk.ChunkMap();
+            reconstructedMap.a = data;
+            reconstructedMap.b = bitmap;
+            return reconstructedMap;
+        }
+
+        return chunkMap;
+    }
+
+    private IBlockData modifyBlockData(IBlockData iblockdata) {
+        Block block = iblockdata.getBlock();
+
+        if (player.visualSettings.isToggled(me.samsuik.blossom.visuals.Visuals.VisualType.REDSTONE) && (block instanceof BlockRedstoneWire || block instanceof BlockDiodeAbstract)) {
+            return null;
+        } else if (player.visualSettings.isToggled(me.samsuik.blossom.visuals.Visuals.VisualType.PISTONS) && isPiston(block)) {
+            return null;
+        } else if (player.visualSettings.isToggled(me.samsuik.blossom.visuals.Visuals.VisualType.SPAWNERS) && (block instanceof BlockMobSpawner)) {
+            return SPAWNER_CONVERSION_BLOCK;
+        }
+
+        return iblockdata;
+    }
+
+    private static boolean isPiston(Block block) {
+        return (block instanceof BlockPiston || block instanceof BlockPistonExtension || block instanceof BlockPistonMoving);
+    }
+    // Blossom end
 
     public void c() {
         this.h = false;
@@ -785,8 +988,10 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
         }
 
         if (flag) {
-            this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(worldserver, blockposition));
-            this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(worldserver, blockposition.shift(enumdirection)));
+            // Blossom start - visibility api
+            this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(worldserver, blockposition,true));
+            this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(worldserver, blockposition.shift(enumdirection), true));
+            // Blossom end
         }
 
         itemstack = this.player.inventory.getItemInHand();
@@ -930,8 +1135,16 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
         }
         // CraftBukkit end
 
+        // Blossom start - visibility api
+        Packet modifiedPacket = modifyPacket(packet);
+
+        if (modifiedPacket == null) {
+            return;
+        }
+
         try {
-            this.networkManager.handle(packet);
+            this.networkManager.handle(modifiedPacket);
+            // Blossom end
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.a(throwable, "Sending packet");
             CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Packet being sent");
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 384607394..ca782659a 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -184,6 +184,13 @@ public abstract class World implements IBlockAccess {
         return ((ChunkProviderServer) this.chunkProvider).getChunkIfLoaded(x, z);
     }
 
+    // Blossom start - visibility api
+    public final it.unimi.dsi.fastutil.longs.Long2IntMap minimal = new it.unimi.dsi.fastutil.longs.Long2IntOpenHashMap();
+    {
+        minimal.defaultReturnValue(Integer.MIN_VALUE);
+    }
+    // Blossom end
+
     protected World(IDataManager idatamanager, WorldData worlddata, WorldProvider worldprovider, MethodProfiler methodprofiler, boolean flag, ChunkGenerator gen, org.bukkit.World.Environment env) {
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig( worlddata.getName() ); // Spigot
         this.paperSpigotConfig = new org.github.paperspigot.PaperSpigotWorldConfig( worlddata.getName() ); // PaperSpigot
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index f3ddf17f2..ebc5da9e4 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -1072,7 +1072,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         while (iterator.hasNext()) {
             EntityHuman entityhuman = (EntityHuman) iterator.next();
 
-            if (entityhuman.e(d0, d1, d2) < 4096.0D) {
+            if (entityhuman.e(d0, d1, d2) < 4096.0D && entityhuman.visualSettings.isEnabled(me.samsuik.blossom.visuals.Visuals.VisualType.EXPLOSIONS)) { // Blossom
                 ((EntityPlayer) entityhuman).playerConnection.sendPacket(new PacketPlayOutExplosion(d0, d1, d2, f, explosion.getBlocks(), (Vec3D) explosion.b().get(entityhuman)));
             }
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index ad07563d2..f96372d50 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1448,6 +1448,13 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         getHandle().playerConnection.sendPacket(packetReset);
     }
 
+    // Blossom start - visibility api
+    @Override
+    public me.samsuik.blossom.visuals.Visuals getVisuals() {
+        return getHandle().visualSettings;
+    }
+    // Blossom end
+
     // Spigot start
     private final Player.Spigot spigot = new Player.Spigot()
     {
-- 
2.50.1

