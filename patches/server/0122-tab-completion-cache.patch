From 025c63b331df0cfc19c2aedf2217bbbbe13a33b2 Mon Sep 17 00:00:00 2001
From: Samsuik <40902469+Samsuik@users.noreply.github.com>
Date: Sun, 12 May 2024 13:15:59 +0100
Subject: [PATCH] tab completion cache


diff --git a/src/main/java/me/samsuik/blossom/utils/TabCompletionCache.java b/src/main/java/me/samsuik/blossom/utils/TabCompletionCache.java
new file mode 100644
index 000000000..c0b238a68
--- /dev/null
+++ b/src/main/java/me/samsuik/blossom/utils/TabCompletionCache.java
@@ -0,0 +1,70 @@
+package me.samsuik.blossom.utils;
+
+import net.minecraft.server.BlockPosition;
+import net.minecraft.server.PacketPlayInTabComplete;
+import net.minecraft.server.PacketPlayOutTabComplete;
+
+import java.util.Objects;
+import java.util.UUID;
+import java.util.function.Function;
+
+public final class TabCompletionCache {
+
+    private final com.google.common.cache.Cache<RequestKey, PacketPlayOutTabComplete> cache = com.google.common.cache.CacheBuilder.newBuilder()
+            .expireAfterAccess(5000, java.util.concurrent.TimeUnit.MILLISECONDS)
+            .maximumSize(256)
+            .build();
+
+    private final Function<PacketPlayInTabComplete, PacketPlayOutTabComplete> tabCompletion;
+
+    public TabCompletionCache(Function<PacketPlayInTabComplete, PacketPlayOutTabComplete> tabCompletion) {
+        this.tabCompletion = tabCompletion;
+    }
+
+    public PacketPlayOutTabComplete cached(UUID uuid, PacketPlayInTabComplete packet) {
+        String trimmedRequest = trimRequest(packet.a());
+        RequestKey key = new RequestKey(uuid, trimmedRequest, packet.b());
+        PacketPlayOutTabComplete completion = this.cache.getIfPresent(key);
+        if (completion != null)
+            return completion;
+        this.cache.put(key, completion = this.tabCompletion.apply(packet));
+        return completion;
+    }
+
+    private static String trimRequest(String request) {
+        int index = request.lastIndexOf(" ");
+        if (index == -1 || index + 2 >= request.length())
+            return request;
+        return request.substring(0, index + 2);
+    }
+
+    private static class RequestKey {
+        private final UUID uuid;
+        private final String request;
+        private final BlockPosition position;
+
+        private RequestKey(UUID uuid, String request, BlockPosition position) {
+            this.uuid = uuid;
+            this.request = request;
+            this.position = position;
+        }
+
+        @Override
+        public final boolean equals(Object o) {
+            if (this == o) return true;
+            if (!(o instanceof RequestKey)) return false;
+
+            RequestKey that = (RequestKey) o;
+            return uuid.equals(that.uuid) && request.equals(that.request) && Objects.equals(position, that.position);
+        }
+
+        @Override
+        public int hashCode() {
+            int result = uuid.hashCode();
+            result = 31 * result + request.hashCode();
+            result = 31 * result + Objects.hashCode(position);
+            return result;
+        }
+    }
+
+}
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index ff0cfc0a8..d5bc7372b 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -154,6 +154,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
         return this.isPlayerLookingAt(packet.b());
     }
     // Blossom end
+    private final me.samsuik.blossom.utils.TabCompletionCache tabCompletions = new me.samsuik.blossom.utils.TabCompletionCache(this::tabCompletionResult); // Blossom - tab completion cache
 
     public PlayerConnection(MinecraftServer minecraftserver, NetworkManager networkmanager, EntityPlayer entityplayer) {
         this.minecraftServer = minecraftserver;
@@ -2334,15 +2335,22 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
 
     public void a(PacketPlayInTabComplete packetplayintabcomplete) {
         if (ensureMainThread(packetplayintabcomplete)) return; // Blossom
+        // Blossom start - tab completion cache
+        this.player.playerConnection.sendPacket(this.tabCompletions.cached(this.player.getUniqueID(), packetplayintabcomplete));
+    }
+    private PacketPlayOutTabComplete tabCompletionResult(PacketPlayInTabComplete packet) {
+        return new PacketPlayOutTabComplete(this.tabCompletionResultRaw(packet));
+    }
+    private String[] tabCompletionResultRaw(PacketPlayInTabComplete packetplayintabcomplete) {
         // CraftBukkit start
         if (chatSpamField.addAndGet(this, 10) > 500 && !this.minecraftServer.getPlayerList().isOp(this.player.getProfile())) {
             this.disconnect("disconnect.spam");
-            return;
+            return new String[0];
         }
         // CraftBukkit end
         // Blossom start - validate tab completions
         if (packetplayintabcomplete.b() != null && !this.isValidTabCompletion(packetplayintabcomplete)) {
-            return;
+            return new String[0];
         }
         // Blossom end
         ArrayList arraylist = Lists.newArrayList();
@@ -2353,8 +2361,8 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
 
             arraylist.add(s);
         }
-
-        this.player.playerConnection.sendPacket(new PacketPlayOutTabComplete((String[]) arraylist.toArray(new String[arraylist.size()])));
+        return (String[]) arraylist.toArray(new String[arraylist.size()]);
+        // Blossom end - tab completion cache
     }
 
     public void a(PacketPlayInSettings packetplayinsettings) {
-- 
2.40.0.windows.1

