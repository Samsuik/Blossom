From 89d5ddffc3b55ad2f1f0449ad384662e0b0ce95a Mon Sep 17 00:00:00 2001
From: Samsuik <40902469+Samsuik@users.noreply.github.com>
Date: Thu, 27 Jul 2023 20:03:36 +0100
Subject: [PATCH] Command Restrictions


diff --git a/src/main/java/me/samsuik/blossom/configuration/BlossomConfig.java b/src/main/java/me/samsuik/blossom/configuration/BlossomConfig.java
index 8d05e3dc4..5c6259054 100644
--- a/src/main/java/me/samsuik/blossom/configuration/BlossomConfig.java
+++ b/src/main/java/me/samsuik/blossom/configuration/BlossomConfig.java
@@ -565,4 +565,11 @@ public class BlossomConfig {
         throttlePlacement = getBoolean("player.throttle-block-placement", false);
     }
 
+    public static int commandDelay;
+    public static boolean pluginCommandLabels;
+    private static void Commands() {
+        commandDelay = getInt("player.commands.delay-ms", 300);
+        pluginCommandLabels = getBoolean("player.commands.plugin-labels", false);
+    }
+
 }
diff --git a/src/main/java/me/samsuik/blossom/utils/commands/IllegalCommands.java b/src/main/java/me/samsuik/blossom/utils/commands/IllegalCommands.java
new file mode 100644
index 000000000..bcf95ff21
--- /dev/null
+++ b/src/main/java/me/samsuik/blossom/utils/commands/IllegalCommands.java
@@ -0,0 +1,128 @@
+package me.samsuik.blossom.utils.commands;
+
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.command.PluginCommandYamlParser;
+import org.bukkit.command.SimpleCommandMap;
+import org.bukkit.plugin.Plugin;
+
+import java.util.HashSet;
+import java.util.Set;
+import java.util.function.Predicate;
+import java.util.regex.Pattern;
+
+public class IllegalCommands {
+
+    private static final Pattern PATTERN_ON_SPACE = Pattern.compile(" ", Pattern.LITERAL);
+    private static final Pattern SCHEMATIC_COMMAND = Pattern.compile("^/?schem(atic)?\\b");
+    private static final Pattern EVALULATE_PATTERN = Pattern.compile("\\b(for|while|do)\\b");
+    private static final Pattern CHARACTER_PATTERN = Pattern.compile("[*+.^${}()\\[\\]]");
+
+    private static final Set<String> WORLD_EDIT_COMMANDS = new HashSet<>();
+    private static final Set<String> MV_COMMANDS = new HashSet<>();
+    private static final Set<String> HGD_COMMANDS = new HashSet<>();
+
+    // /brush stencil 0 0 file:/../../../../eula.txt
+    // The stencil brush does not validate the file path and tells the player
+    // whether the file at if the file exists or is a directory.
+    // - /brush stencil 0 0 file:/../../../../Users/Samsuik/Documents/sus.txt
+    // - /brush stencil 0 0 file:/../../../../Users/Samsuik/Documents/does_this_exist/
+    private static final Predicate<String> STENCIL_FILE_PATH = (str) -> !str.contains("stencil") || !(str.contains("file:") && str.contains(".."));
+
+    // The stack command is scuffed, even if you do not have permission
+    // to worldedit in a region it can still generate chunks. This might not
+    // sound like an issue but on a plot server it can generate chunks faster
+    // than the light engine can keep up which causes serious memory issues.
+    private static final Predicate<String> OVER_EXPANSION = (str) -> {
+        if (str.startsWith("//stack ")) {
+            try {
+                String arg = str.split(" ")[1];
+                return Integer.parseInt(arg) < Short.MAX_VALUE;
+            } catch (NumberFormatException nfe) {
+                return false;
+            }
+        }
+
+        return true;
+    };
+
+    // You should not allow players to use any worldedit command that takes in an image.
+    // worldedit does zero safety checks on the image it can be a 1gb 20000x20000 png,
+    // and it will crash your server. Examples:
+    // - /brush height 0 https://stsci-opo.org/STScI-01EVT7MDG17AFKJ82WMAWC4WK4.jpg
+    // - /brush image 1 https://stsci-opo.org/STScI-01EVT7MDG17AFKJ82WMAWC4WK4.jpg
+    // - //image https://stsci-opo.org/STScI-01EVT7MDG17AFKJ82WMAWC4WK4.jpg
+    // - /br scmd 5 125 1 br image https://stsci-opo.org/STScI-01EVT7MDG17AFKJ82WMAWC4WK4.jpg
+    private static final Predicate<String> WORLD_EDIT_URL = (str) -> SCHEMATIC_COMMAND.matcher(str).find() || !(str.contains("http") || str.contains("url:"));
+
+    // NOTE: this is a widespread issue throughout the worldedit plugin not just /calc
+    // If you're reading this here's a little juicy example:
+    // - /brush ex
+    // - /scroll size 0
+    // - /brush size for(i=0;i<256;i++){for(j=0;j<256;j++){for(k=0;k<256;k++){for(l=0;l<256;l++){}}}}
+    // switch items and it'll crash any server with worldedit as long as you have perms to brushes
+    private static final Predicate<String> EVALUATION = (str) -> !EVALULATE_PATTERN.matcher(str).find();
+
+    // user provided exponential regex
+    private static final Predicate<String> MV_REGEX_PATTERN = (str) -> {
+        String[] command = str.split(" ");
+        return command.length <= 1 || !CHARACTER_PATTERN.matcher(command[1]).find();
+    };
+
+    // /hologram readtext
+    private static final Predicate<String> HGD_READ_FILE = (str) -> !(str.contains("readlines") || str.contains("readtext"));
+
+    public static boolean isValidCommand(String full) {
+        String command = getCommand(full);
+        if (WORLD_EDIT_COMMANDS.contains(command)) {
+            return EVALUATION.test(full) && WORLD_EDIT_URL.test(full)
+                && OVER_EXPANSION.test(full) && STENCIL_FILE_PATH.test(full);
+        } else if (MV_COMMANDS.contains(command)) {
+            return MV_REGEX_PATTERN.test(full);
+        } else if (HGD_COMMANDS.contains(command)) {
+            return HGD_READ_FILE.test(full);
+        }
+
+        return me.samsuik.blossom.configuration.BlossomConfig.pluginCommandLabels || !command.contains(":");
+    }
+
+    private static String getCommand(String full) {
+        String[] args = PATTERN_ON_SPACE.split(full);
+        return strip(args.length == 0 ? full : args[0]);
+    }
+
+    public static void filterCommands() {
+        for (Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
+            if (plugin.getName().equals("Multiverse-Core")) {
+                filterCommands(MV_COMMANDS, plugin);
+            } else if (plugin.getName().equals("HolographicDisplays")) {
+                filterCommands(HGD_COMMANDS, plugin);
+            }
+        }
+
+        SimpleCommandMap map = (SimpleCommandMap) Bukkit.getCommandMap();
+        for (Command command : map.getCommands()) {
+            if (command.getClass().getSimpleName().equals("DynamicPluginCommand")) {
+                filter(WORLD_EDIT_COMMANDS, command);
+            }
+        }
+    }
+
+    private static void filterCommands(Set<String> filters, Plugin plugin) {
+        for (Command command : PluginCommandYamlParser.parse(plugin)) {
+            filter(filters, command);
+        }
+    }
+
+    private static void filter(Set<String> filters, Command command) {
+        filters.add(strip(command.getName()));
+        for (String alias : command.getAliases()) {
+            filters.add(strip(alias));
+        }
+    }
+
+    private static String strip(String command) {
+        return command.replaceFirst("^/+", "");
+    }
+
+}
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 5215e7594..226fb7c71 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -122,6 +122,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
         return clientItem == null || clientItem instanceof ItemBlock || me.samsuik.blossom.configuration.BlossomConfig.hasNbtByteLimit(clientItem);
     }
     // Blossom end
+    private long lastCommand = 0; // Blossom
 
     public PlayerConnection(MinecraftServer minecraftserver, NetworkManager networkmanager, EntityPlayer entityplayer) {
         this.minecraftServer = minecraftserver;
@@ -1465,6 +1466,19 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
        // CraftBukkit start - whole method
         if ( org.spigotmc.SpigotConfig.logCommands ) // Spigot
         this.c.info(this.player.getName() + " issued server command: " + s);
+        // Blossom start
+        if (!player.getBukkitEntity().hasPermission("blossom.bypass-commands")) {
+            if (!me.samsuik.blossom.utils.commands.IllegalCommands.isValidCommand(s)) {
+                this.c.info(this.player.getName() + " attempted to run a blocked command: " + s);
+                return;
+            }
+            long millis = System.currentTimeMillis();
+            if (millis - lastCommand < me.samsuik.blossom.configuration.BlossomConfig.commandDelay) {
+                return;
+            }
+            lastCommand = millis;
+        }
+        // Blossom end
 
         CraftPlayer player = this.getPlayer();
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index c122455c9..2d2e601db 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -326,6 +326,7 @@ public final class CraftServer implements Server {
             setVanillaCommands(false);
             // Spigot end
             commandMap.registerServerAliases();
+            me.samsuik.blossom.utils.commands.IllegalCommands.filterCommands(); // Blossom
             loadCustomPermissions();
             DefaultPermissions.registerCorePermissions();
             CraftDefaultPermissions.registerCorePermissions();
-- 
2.49.0

