From 7d333af69161e10f98fa9effba924f2b87410dcf Mon Sep 17 00:00:00 2001
From: Samsuik <40902469+Samsuik@users.noreply.github.com>
Date: Tue, 28 Jun 2022 23:06:32 +0100
Subject: [PATCH] Optimise NextTickList Unloading


diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 0e1610710..2fbe39515 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -76,6 +76,7 @@ public class Chunk {
     protected gnu.trove.map.hash.TObjectIntHashMap<Class> entityCount = new gnu.trove.map.hash.TObjectIntHashMap<Class>(); // Spigot
     protected it.unimi.dsi.fastutil.objects.Reference2ObjectOpenHashMap<Class<?>, List<Entity>>[] classToEntityListMap = new it.unimi.dsi.fastutil.objects.Reference2ObjectOpenHashMap[16]; // Blossom
     public List<Entity>[] hardColliding = new me.samsuik.blossom.utils.collections.UnorderedIndexedList[16]; // Blossom
+    public java.util.Set<NextTickListEntry> scheduledToTick = new it.unimi.dsi.fastutil.objects.ObjectOpenHashSet<>(); // Blossom
     // PaperSpigot start - Asynchronous light updates
     public AtomicInteger pendingLightUpdates = new AtomicInteger();
     public long lightUpdateTime;
diff --git a/src/main/java/net/minecraft/server/ChunkRegionLoader.java b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
index e867a944f..2a1103cbd 100644
--- a/src/main/java/net/minecraft/server/ChunkRegionLoader.java
+++ b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
@@ -464,7 +464,7 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
                         block = Block.getById(nbttagcompound5.getInt("i"));
                     }
 
-                    world.b(new BlockPosition(nbttagcompound5.getInt("x"), nbttagcompound5.getInt("y"), nbttagcompound5.getInt("z")), block, nbttagcompound5.getInt("t"), nbttagcompound5.getInt("p"));
+                    world.scheduleUponLoading(chunk, new BlockPosition(nbttagcompound5.getInt("x"), nbttagcompound5.getInt("y"), nbttagcompound5.getInt("z")), block, nbttagcompound5.getInt("t"), nbttagcompound5.getInt("p"));
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 3a4a074ed..e8056f78c 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -1595,6 +1595,8 @@ public abstract class World implements IBlockAccess {
 
     public void b(BlockPosition blockposition, Block block, int i, int j) {}
 
+    public void scheduleUponLoading(Chunk chunk, BlockPosition blockposition, Block block, int i, int j) {} // Blossom
+
     public void tickEntities() {
         this.methodProfiler.a("entities");
         this.methodProfiler.a("global");
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index bc603bfba..e5d821625 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -567,6 +567,11 @@ public class WorldServer extends World implements IAsyncTaskHandler {
 
             // CraftBukkit - use M, PAIL: Rename nextTickList
             if (!this.M.contains(nextticklistentry)) {
+                // Blossom start - optimise nextticklist unloading
+                Chunk chunk = getChunkAtWorldCoords(blockposition);
+                if (!chunk.isEmpty()) {
+                    chunk.scheduledToTick.add(nextticklistentry);
+                }
                 this.M.add(nextticklistentry);
             }
         }
@@ -574,6 +579,9 @@ public class WorldServer extends World implements IAsyncTaskHandler {
     }
 
     public void b(BlockPosition blockposition, Block block, int i, int j) {
+        scheduleUponLoading(null, blockposition, block, i, j);
+    }
+    public void scheduleUponLoading(Chunk chunk, BlockPosition blockposition, Block block, int i, int j) {
         NextTickListEntry nextticklistentry = new NextTickListEntry(blockposition, block);
 
         nextticklistentry.a(j);
@@ -583,6 +591,10 @@ public class WorldServer extends World implements IAsyncTaskHandler {
 
         // CraftBukkit - use M, PAIL: Rename nextTickList
         if (!this.M.contains(nextticklistentry)) {
+            if (!chunk.isEmpty()) {
+                chunk.scheduledToTick.add(nextticklistentry);
+            }
+            // Blossom end
             this.M.add(nextticklistentry);
         }
 
@@ -674,8 +686,15 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                     iterator.remove();
                     byte b0 = 0;
 
-                    if (this.areChunksLoadedBetween(nextticklistentry.a.a(-b0, -b0, -b0), nextticklistentry.a.a(b0, b0, b0))) {
-                        IBlockData iblockdata = this.getType(nextticklistentry.a);
+                    // Blossom start - optimise nextticklist unloading
+                    BlockPosition position = nextticklistentry.a;
+                    Chunk chunk = this.getChunkIfLoaded(position.getX() >> 4, position.getZ() >> 4);
+                    if (chunk != null) {
+                        chunk.scheduledToTick.remove(nextticklistentry);
+                    }
+                    if (chunk != null && this.areChunksLoadedBetween(nextticklistentry.a.a(-b0, -b0, -b0), nextticklistentry.a.a(b0, b0, b0))) {
+                        IBlockData iblockdata = chunk.getBlockData(nextticklistentry.a);
+                        // Blossom end
                         co.aikar.timings.Timing timing = iblockdata.getBlock().getTiming(); // Spigot
                         timing.startTiming(); // Spigot
 
@@ -715,18 +734,22 @@ public class WorldServer extends World implements IAsyncTaskHandler {
     }
 
     public List<NextTickListEntry> a(StructureBoundingBox structureboundingbox, boolean flag) {
-        ArrayList arraylist = null;
-
-        for (int i = 0; i < 2; ++i) {
-            Iterator iterator;
-
-            if (i == 0) {
-                iterator = this.M.iterator();
-            } else {
-                iterator = this.V.iterator();
+        // Blossom start - optimise nextticklist unloading
+        List<NextTickListEntry> arraylist = null;
+        int minX = structureboundingbox.a >> 4;
+        int minZ = structureboundingbox.c >> 4;
+        int maxX = structureboundingbox.d >> 4;
+        int maxZ = structureboundingbox.f >> 4;
+
+        for (int chunkX = minX; chunkX <= maxX; ++chunkX) {
+            for (int chunkZ = minZ; chunkZ <= maxZ; ++chunkZ) {
+            Chunk chunk = getChunkIfLoaded(chunkX, chunkZ);
+
+            if (chunk == null) {
+                continue;
             }
 
-            while (iterator.hasNext()) {
+            for (Iterator<NextTickListEntry> iterator = chunk.scheduledToTick.iterator(); iterator.hasNext(); ) {
                 NextTickListEntry nextticklistentry = (NextTickListEntry) iterator.next();
                 BlockPosition blockposition = nextticklistentry.a;
 
@@ -737,14 +760,21 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                     }
 
                     if (arraylist == null) {
-                        arraylist = Lists.newArrayList();
+                        arraylist = new me.samsuik.blossom.utils.collections.UnorderedIndexedList<>();
                     }
 
                     arraylist.add(nextticklistentry);
                 }
+                }
             }
         }
 
+        // "quickly" unload from M and V
+        if (flag) {
+            this.M.removeAll(arraylist);
+            this.V.removeAll(arraylist);
+        }
+        // Blossom end
         return arraylist;
     }
 
-- 
2.40.0.windows.1

