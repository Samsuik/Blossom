From 05f51903a4d5af2090f0c12d9fa500f716416f27 Mon Sep 17 00:00:00 2001
From: Samsuik <40902469+Samsuik@users.noreply.github.com>
Date: Mon, 12 Jun 2023 21:18:02 +0100
Subject: [PATCH] Optimise Hopper Logic


diff --git a/src/main/java/me/samsuik/blossom/configuration/BlossomConfig.java b/src/main/java/me/samsuik/blossom/configuration/BlossomConfig.java
index bc2175047..7182a2718 100644
--- a/src/main/java/me/samsuik/blossom/configuration/BlossomConfig.java
+++ b/src/main/java/me/samsuik/blossom/configuration/BlossomConfig.java
@@ -359,4 +359,11 @@ public class BlossomConfig {
         playerObjectiveUpdates = getBoolean("player.scoreboard-objective-updates", true);
     }
 
+    public static int hopperSearchLimit;
+    public static boolean hopperOnlyPushIntoEmptyContainer;
+    private static void Hoppers() {
+        hopperSearchLimit = getInt("hoppers.entity-search-limit", 8);
+        hopperOnlyPushIntoEmptyContainer = getBoolean("hoppers.only-push-into-empty-containers", false);
+    }
+
 }
diff --git a/src/main/java/net/minecraft/server/TileEntity.java b/src/main/java/net/minecraft/server/TileEntity.java
index e8107fcc3..8161caf06 100644
--- a/src/main/java/net/minecraft/server/TileEntity.java
+++ b/src/main/java/net/minecraft/server/TileEntity.java
@@ -14,6 +14,7 @@ public abstract class TileEntity {
 
     public Timing tickTimer = SpigotTimings.getTileEntityTimings(this); // Spigot
     private static final Logger a = LogManager.getLogger();
+    static boolean IGNORE_TILE_UPDATES = false;
     private static Map<String, Class<? extends TileEntity>> f = Maps.newHashMap();
     private static Map<Class<? extends TileEntity>, String> g = Maps.newHashMap();
     protected World world;
@@ -110,6 +111,7 @@ public abstract class TileEntity {
 
     public void update() {
         if (this.world != null) {
+            if (IGNORE_TILE_UPDATES) return; // Blossom
             IBlockData iblockdata = this.world.getType(this.position);
 
             this.h = iblockdata.getBlock().toLegacyData(iblockdata);
diff --git a/src/main/java/net/minecraft/server/TileEntityHopper.java b/src/main/java/net/minecraft/server/TileEntityHopper.java
index 8d00cd0a2..b0e75e739 100644
--- a/src/main/java/net/minecraft/server/TileEntityHopper.java
+++ b/src/main/java/net/minecraft/server/TileEntityHopper.java
@@ -173,11 +173,11 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
 
     public void c() {
         if (this.world != null && !this.world.isClientSide) {
-            --this.g;
             if (!this.n()) {
                 this.d(0);
                 this.m();
             }
+            --this.g; // Blossom - moved down
 
         }
     }
@@ -258,57 +258,37 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
         } else {
             EnumDirection enumdirection = BlockHopper.b(this.u()).opposite();
 
-            if (this.a(iinventory, enumdirection)) {
+            if (me.samsuik.blossom.configuration.BlossomConfig.hopperOnlyPushIntoEmptyContainer ? !canInsertIntoContainer(iinventory, enumdirection) : this.a(iinventory, enumdirection)) { // Blossom
                 return false;
             } else {
                 for (int i = 0; i < this.getSize(); ++i) {
-                    if (this.getItem(i) != null) {
-                        ItemStack itemstack = this.getItem(i).cloneItemStack();
-                        // ItemStack itemstack1 = addItem(iinventory, this.splitStack(i, 1), enumdirection);
-
-                        // CraftBukkit start - Call event when pushing items into other inventories
-                        CraftItemStack oitemstack = CraftItemStack.asCraftMirror(this.splitStack(i, world.spigotConfig.hopperAmount)); // Spigot
-                        // TacoSpigot start - add an option to turn of InventoryMoveItemEvent
-                        final org.bukkit.inventory.ItemStack stack;
-                        if (HopperHelper.isFireInventoryMoveItemEvent(this)) {
-                        // TacoSpigot end
-
-                        Inventory destinationInventory;
-                        // Have to special case large chests as they work oddly
-                        if (iinventory instanceof InventoryLargeChest) {
-                            destinationInventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest((InventoryLargeChest) iinventory);
-                        } else {
-                            destinationInventory = iinventory.getOwner().getInventory();
+                    // Blossom start - optimise hopper logic
+                    ItemStack itemstack = getItem(i);
+
+                    if (itemstack != null) {
+                        int moving = Math.min(itemstack.count, world.spigotConfig.hopperAmount);
+
+                        int response = callItemMoveEvent(this, this, iinventory, itemstack, moving);
+                        if (response == -1) {
+                            d(world.spigotConfig.hopperTransfer);
+                            continue;
+                        } else if (response != moving) {
+                            moving = response;
                         }
 
-                        InventoryMoveItemEvent event = new InventoryMoveItemEvent(this.getOwner().getInventory(), oitemstack.clone(), destinationInventory, true);
-                        this.getWorld().getServer().getPluginManager().callEvent(event);
-                        if (event.isCancelled()) {
-                            this.setItem(i, itemstack);
-                            this.d(world.spigotConfig.hopperTransfer); // Spigot
-                            return false;
-                        }
-                        // TacoSpigot start
-                        stack = event.getItem();
-                        // handle cases where the event is not fired
-                        } else {
-                            stack = oitemstack;
+                        int count = itemstack.count;
+                        int moved = addItemFast(iinventory, itemstack, moving, enumdirection);
+
+                        if (count == moved) {
+                            IGNORE_TILE_UPDATES = true;
+                            setItem(i, null);
+                            IGNORE_TILE_UPDATES = false;
                         }
-                        int origCount = stack.getAmount(); // Spigot
-                        ItemStack itemstack1 = addItem(iinventory, CraftItemStack.asNMSCopy(stack), enumdirection);
-                        // TacoSpigot end
-
-                        if (itemstack1 == null || itemstack1.count == 0) {
-                            if (stack.equals(oitemstack)) { // TacoSpigot - event.getItem() -> stack
-                                iinventory.update();
-                            } else {
-                                this.setItem(i, itemstack);
-                            }
-                            // CraftBukkit end
+
+                        if (moved >= 0) {
                             return true;
                         }
-                        itemstack.count -= origCount - itemstack1.count; // Spigot
-                        this.setItem(i, itemstack);
+                        // Blossom end - optimise hopper logic
                     }
                 }
 
@@ -367,6 +347,130 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
         return true;
     }
 
+    // Blossom start - optimise hopper logic
+    private static boolean canInsertIntoContainer(IInventory iinventory, EnumDirection enumdirection) {
+        if (iinventory instanceof IWorldInventory) {
+            IWorldInventory iworldinventory = (IWorldInventory) iinventory;
+            int[] accessible = iworldinventory.getSlotsForFace(enumdirection);
+
+            for (int i = 0; i < accessible.length; ++i) {
+                if (iworldinventory.getItem(accessible[i]) == null) {
+                    return true;
+                }
+            }
+        } else {
+            int j = iinventory.getSize();
+
+            for (int k = 0; k < j; ++k) {
+                if (iinventory.getItem(k) == null) {
+                    return true;
+                }
+            }
+        }
+
+        return false;
+    }
+
+    private static int callItemMoveEvent(IHopper ihopper, IInventory from, IInventory to, ItemStack itemstack, int moving) {
+        if (!HopperHelper.isFireInventoryMoveItemEvent(ihopper)) {
+            return moving;
+        }
+        // todo: lazily clone nbt
+        ItemStack newItemStack = itemstack.cloneItemStack();
+        newItemStack.count = moving;
+        return callItemMoveEvent(ihopper, from, to, newItemStack);
+    }
+
+    private static Inventory bukkitInventory(IInventory inventory) {
+        Inventory bukkitInventory;
+        // Have to special case large chests as they work oddly
+        if (inventory instanceof InventoryLargeChest) {
+            bukkitInventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest((InventoryLargeChest) inventory);
+        } else {
+            bukkitInventory = inventory.getOwner().getInventory();
+        }
+        return bukkitInventory;
+    }
+
+    private static int callItemMoveEvent(IHopper ihopper, IInventory from, IInventory to, ItemStack itemstack) {
+        Inventory sourceInventory = bukkitInventory(from);
+        Inventory destinationInventory = bukkitInventory(to);
+
+        CraftItemStack mirroredItem = CraftItemStack.asCraftMirror(itemstack); // Spigot
+        InventoryMoveItemEvent event = new InventoryMoveItemEvent(sourceInventory, mirroredItem.clone(), destinationInventory, true);
+        ihopper.getWorld().getServer().getPluginManager().callEvent(event);
+
+        return event.isCancelled() ? -1 : event.getItem().getAmount();
+    }
+
+    public static int addItemFast(IInventory iinventory, ItemStack itemstack, int moving, EnumDirection enumdirection) {
+        int moved = 0;
+        if (iinventory instanceof IWorldInventory && enumdirection != null) {
+            IWorldInventory iworldinventory = (IWorldInventory) iinventory;
+            int[] accessible = iworldinventory.getSlotsForFace(enumdirection);
+
+            for (int i = 0; i < accessible.length && moved < moving; ++i) {
+                moved += insertItemFast(iinventory, itemstack, accessible[i], moving - moved, enumdirection);
+            }
+        } else {
+            int j = iinventory.getSize();
+
+            for (int k = 0; k < j && moved < moving; ++k) {
+                moved += insertItemFast(iinventory, itemstack, k, moving - moved, enumdirection);
+            }
+        }
+        return moved;
+    }
+
+    private static int insertItemFast(IInventory iinventory, ItemStack itemstack, int i, int moving, EnumDirection enumdirection) {
+        int moved = 0;
+
+        if (a(iinventory, itemstack, i, enumdirection)) {
+            moved = mergeItemStacks(iinventory, itemstack, i, moving, iinventory.getItem(i));
+
+            if (moved == 0) {
+                updateInventory(iinventory);
+            }
+        }
+
+        return moved;
+    }
+
+    private static void updateInventory(IInventory iinventory) {
+        if (iinventory instanceof TileEntityHopper) {
+            TileEntityHopper tileentityhopper = (TileEntityHopper) iinventory;
+
+            if (tileentityhopper.o()) {
+                tileentityhopper.d(tileentityhopper.world.spigotConfig.hopperTransfer); // Spigot
+            }
+        }
+
+        iinventory.update();
+    }
+
+    private static int mergeItemStacks(IInventory iinventory, ItemStack itemstack, int i, int moving, ItemStack into) {
+        if (into == null) {
+            IGNORE_TILE_UPDATES = true;
+            if (itemstack.count != moving) {
+                itemstack = itemstack.cloneAndSubtract(moving);
+            }
+            iinventory.setItem(i, itemstack);
+            IGNORE_TILE_UPDATES = false;
+            return moving;
+        } else if (a(into, itemstack)) {
+            int required = itemstack.getMaxStackSize() - into.count;
+            int available = Math.min(itemstack.count, required);
+            int move = Math.min(available, moving);
+
+            itemstack.count -= move;
+            into.count += move;
+            return move;
+        }
+
+        return 0;
+    }
+    // Blossom end - optimise hopper logic
+
     // TacoSpigot start - Split methods, one that pushes and one that pulls
     @Deprecated
     public static boolean a(IHopper ihopper) {
@@ -426,58 +530,32 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
         ItemStack itemstack = iinventory.getItem(i);
 
         if (itemstack != null && b(iinventory, itemstack, i, enumdirection)) {
-            ItemStack itemstack1 = itemstack.cloneItemStack();
-            // ItemStack itemstack2 = addItem(ihopper, iinventory.splitStack(i, 1), (EnumDirection) null);
-            // CraftBukkit start - Call event on collection of items from inventories into the hopper
-            CraftItemStack oitemstack = CraftItemStack.asCraftMirror(iinventory.splitStack(i, ihopper.getWorld().spigotConfig.hopperAmount)); // Spigot
-            // TacoSpigot start - add an option to turn of InventoryMoveItemEvent
-            final org.bukkit.inventory.ItemStack stack;
-            if (HopperHelper.isFireInventoryMoveItemEvent(ihopper)) {
-            // TacoSpigot end
-
-            Inventory sourceInventory;
-            // Have to special case large chests as they work oddly
-            if (iinventory instanceof InventoryLargeChest) {
-                sourceInventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest((InventoryLargeChest) iinventory);
-            } else {
-                sourceInventory = iinventory.getOwner().getInventory();
-            }
-
-            InventoryMoveItemEvent event = new InventoryMoveItemEvent(sourceInventory, oitemstack.clone(), ihopper.getOwner().getInventory(), false);
-
-            ihopper.getWorld().getServer().getPluginManager().callEvent(event);
-            if (event.isCancelled()) {
-                iinventory.setItem(i, itemstack1);
+            // Blossom start - optimise hopper logic
+            int moving = Math.min(itemstack.count, ihopper.getWorld().spigotConfig.hopperAmount);
 
+            int response = callItemMoveEvent(ihopper, iinventory, ihopper, itemstack, moving);
+            if (response == -1) {
                 if (ihopper instanceof TileEntityHopper) {
                     ((TileEntityHopper) ihopper).d(ihopper.getWorld().spigotConfig.hopperTransfer); // Spigot
                 } else if (ihopper instanceof EntityMinecartHopper) {
                     ((EntityMinecartHopper) ihopper).m(ihopper.getWorld().spigotConfig.hopperTransfer / 2); // Spigot
                 }
                 return false;
+            } else if (response != moving) {
+                moving = response;
             }
-            // TacoSpigot start
-            stack = event.getItem();
-            // handle cases where the event is not fired
-            } else {
-                stack = oitemstack;
-            }
-            int origCount = stack.getAmount(); // Spigot
-            ItemStack itemstack2 = addItem(ihopper, CraftItemStack.asNMSCopy(stack), null);
-            // TacoSpigot end
 
-            if (itemstack2 == null || itemstack2.count == 0) {
-                if (stack.equals(oitemstack)) {
-                    iinventory.update();
-                } else {
-                    iinventory.setItem(i, itemstack1);
-                }
-                // CraftBukkit end
-                return true;
+            int count = itemstack.count;
+            int moved = addItemFast(ihopper, itemstack, moving, null);
+
+            if (moved == count) {
+                IGNORE_TILE_UPDATES = true;
+                iinventory.setItem(i, null);
+                IGNORE_TILE_UPDATES = false;
             }
-            itemstack1.count -= origCount - itemstack2.count; // Spigot
 
-            iinventory.setItem(i, itemstack1);
+            return moved >= 0;
+            // Blossom end - optimise hopper logic
         }
 
         return false;
@@ -548,7 +626,9 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
             boolean flag = false;
 
             if (itemstack1 == null) {
+                IGNORE_TILE_UPDATES = true; // Blossom
                 iinventory.setItem(i, itemstack);
+                IGNORE_TILE_UPDATES = false; // Blossom
                 itemstack = null;
                 flag = true;
             } else if (a(itemstack1, itemstack)) {
@@ -568,7 +648,7 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
                         tileentityhopper.d(tileentityhopper.world.spigotConfig.hopperTransfer); // Spigot
                     }
 
-                    iinventory.update();
+                    // Blossom
                 }
 
                 iinventory.update();
@@ -589,7 +669,7 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
     }
 
     public static List<EntityItem> a(World world, double d0, double d1, double d2) {
-        return world.a(EntityItem.class, new AxisAlignedBB(d0 - 0.5D, d1 - 0.5D, d2 - 0.5D, d0 + 0.5D, d1 + 0.5D, d2 + 0.5D), IEntitySelector.a);
+        return world.getEntitiesLimitedByType(EntityItem.class, new AxisAlignedBB(d0 - 0.5D, d1 - 0.5D, d2 - 0.5D, d0 + 0.5D, d1 + 0.5D, d2 + 0.5D), IEntitySelector.a, me.samsuik.blossom.configuration.BlossomConfig.hopperSearchLimit, me.samsuik.blossom.configuration.BlossomConfig.hopperSearchLimit * 2); // Blossom
     }
 
     public static IInventory b(World world, double d0, double d1, double d2) {
@@ -613,7 +693,7 @@ public class TileEntityHopper extends TileEntityContainer implements IHopper, IU
         }
 
         if (object == null) {
-            List list = world.a((Entity) null, new AxisAlignedBB(d0 - 0.5D, d1 - 0.5D, d2 - 0.5D, d0 + 0.5D, d1 + 0.5D, d2 + 0.5D), IEntitySelector.c);
+            List list = world.getEntitiesLimited((Entity) null, new AxisAlignedBB(d0 - 0.5D, d1 - 0.5D, d2 - 0.5D, d0 + 0.5D, d1 + 0.5D, d2 + 0.5D), IEntitySelector.c, me.samsuik.blossom.configuration.BlossomConfig.hopperSearchLimit, me.samsuik.blossom.configuration.BlossomConfig.hopperSearchLimit * 2); // Blossom
 
             if (list.size() > 0) {
                 object = (IInventory) list.get(world.random.nextInt(list.size()));
diff --git a/src/main/java/net/techcable/tacospigot/HopperHelper.java b/src/main/java/net/techcable/tacospigot/HopperHelper.java
index 630a81bea..9000a9ddb 100644
--- a/src/main/java/net/techcable/tacospigot/HopperHelper.java
+++ b/src/main/java/net/techcable/tacospigot/HopperHelper.java
@@ -1,14 +1,6 @@
 package net.techcable.tacospigot;
 
-import net.minecraft.server.Block;
-import net.minecraft.server.BlockChest;
-import net.minecraft.server.BlockPosition;
-import net.minecraft.server.Blocks;
-import net.minecraft.server.IHopper;
-import net.minecraft.server.IInventory;
-import net.minecraft.server.TileEntity;
-import net.minecraft.server.TileEntityHopper;
-import net.minecraft.server.World;
+import net.minecraft.server.*;
 
 import org.bukkit.event.inventory.InventoryMoveItemEvent;
 
-- 
2.50.1

