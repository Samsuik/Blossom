From aaf7fd5b917111086b038670576f5e88c2b0e330 Mon Sep 17 00:00:00 2001
From: Samsuik <kfian294ma4@gmail.com>
Date: Thu, 31 Jul 2025 00:09:11 +0100
Subject: [PATCH] temp


diff --git a/pom.xml b/pom.xml
index 4e5b87d18..1dd3a46a7 100644
--- a/pom.xml
+++ b/pom.xml
@@ -33,7 +33,7 @@
         <dependency>
             <groupId>io.netty</groupId>
             <artifactId>netty-all</artifactId>
-            <version>4.1.77.Final</version>
+            <version>4.2.3.Final</version>
         </dependency>
         <dependency>
             <groupId>net.sf.trove4j</groupId>
diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index 5041d8a4c..1610cc510 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -223,7 +223,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
     private void writePacket(Packet<?> packet, final GenericFutureListener<? extends Future<? super Void>>[] agenericfuturelistener, Boolean flushConditional) {
         this.packetWrites.getAndIncrement(); // must be befeore using canFlush
         boolean effectiveFlush = flushConditional == null ? this.canFlush : flushConditional.booleanValue();
-        final boolean flush = effectiveFlush || packet instanceof PacketPlayOutKeepAlive || packet instanceof PacketLoginOutDisconnect; // no delay for certain packets
+        final boolean flush = effectiveFlush || InnerUtil.canSendImmediate(this, packet); // no delay for certain packets
         // Tuinity end - add flush parameter
         final EnumProtocol enumprotocol = EnumProtocol.a(packet);
         final EnumProtocol enumprotocol1 = (EnumProtocol) this.channel.attr(NetworkManager.c).get();
@@ -272,7 +272,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
     // Tuinity end - add flush parameter
 
     private void m() {
-        if (this.channel != null && this.channel.isOpen() && !this.i.isEmpty()) { // Blossom - don't lock when the packet queue is empty
+        if (this.channel != null && this.channel.isOpen()/* && !this.i.isEmpty()*/) { // Blossom - don't lock when the packet queue is empty
             this.j.readLock().lock();
 
             // Tuinity start - make only one flush call per sendPacketQueue() call
@@ -420,4 +420,17 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
         return this.channel.remoteAddress();
     }
     // Spigot End
+
+    private static class InnerUtil { // Attempt to hide these methods from ProtocolLib, so it doesn't accidently pick them up.
+        private static boolean canSendImmediate(final NetworkManager networkManager, final Packet<?> packet) {
+            return networkManager.preparing || networkManager.channel.attr(NetworkManager.c).get() != EnumProtocol.PLAY ||
+                    packet instanceof PacketPlayOutKeepAlive||
+                    packet instanceof PacketPlayOutChat ||
+                    packet instanceof PacketPlayOutTabComplete ||
+                    packet instanceof PacketPlayOutTitle ||
+                    packet instanceof PacketPlayOutPlayerInfo ||
+                    packet instanceof PacketPlayOutPlayerListHeaderFooter ||
+                    packet instanceof PacketPlayOutTransaction;
+        }
+    }
 }
-- 
2.50.1

