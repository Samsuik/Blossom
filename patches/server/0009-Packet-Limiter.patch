From bdda3bb655251c808cc48b9d900cb91081fac574 Mon Sep 17 00:00:00 2001
From: Samsuik <40902469+Samsuik@users.noreply.github.com>
Date: Tue, 9 May 2023 17:48:29 +0100
Subject: [PATCH] Packet Limiter

kind of scuffed packet limiter

diff --git a/src/main/java/me/samsuik/blossom/configuration/BlossomConfig.java b/src/main/java/me/samsuik/blossom/configuration/BlossomConfig.java
index 2fadc5298..29335ea37 100644
--- a/src/main/java/me/samsuik/blossom/configuration/BlossomConfig.java
+++ b/src/main/java/me/samsuik/blossom/configuration/BlossomConfig.java
@@ -118,5 +118,16 @@ public class BlossomConfig {
         config.addDefault(path, def);
         return config.getString(path, config.getString(path));
     }
+
+    public static boolean packetLimiter;
+    public static int ppsThreshold;
+    public static int ppsViolations;
+    public static int ppsMax;
+    private static void PacketLimiter() {
+        packetLimiter = getBoolean("packet-limiter.enabled", true);
+        ppsThreshold = getInt("packet-limiter.threshold", 120);
+        ppsViolations = getInt("packet-limiter.violations", 7);
+        ppsMax = getInt("packet-limiter.max-pps", 400);
+    }
     
 }
diff --git a/src/main/java/me/samsuik/blossom/utils/PacketLimiter.java b/src/main/java/me/samsuik/blossom/utils/PacketLimiter.java
new file mode 100644
index 000000000..49264cca1
--- /dev/null
+++ b/src/main/java/me/samsuik/blossom/utils/PacketLimiter.java
@@ -0,0 +1,40 @@
+package me.samsuik.blossom.utils;
+
+import me.samsuik.blossom.configuration.BlossomConfig;
+
+public class PacketLimiter {
+
+    private final int[] samples;
+    private int vio = 0;
+    private long last = 0;
+
+    public PacketLimiter() {
+        this.samples = new int[BlossomConfig.ppsViolations + 1];
+    }
+
+    public boolean handle() {
+        long curr = System.currentTimeMillis();
+
+        // is this thread safe?
+        if (curr - this.last >= 1000) {
+            this.recalculate();
+            this.last = curr;
+        }
+
+        return ++this.samples[0] >= BlossomConfig.ppsMax || vio >= BlossomConfig.ppsViolations;
+    }
+
+    private void recalculate() {
+        this.vio = 0;
+
+        for (int sample : samples) {
+            if (sample >= BlossomConfig.ppsThreshold) {
+                vio += 1;
+            }
+        }
+
+        System.arraycopy(samples, 0, samples, 1, samples.length - 1);
+        this.samples[0] = 0;
+    }
+
+}
diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index fb230bac3..56c6b77de 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -119,9 +119,23 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
         if (MinecraftServer.getServer().isDebugging()) throwable.printStackTrace(); // Spigot
     }
 
+    // Blossom start - packet limiter
+    private final me.samsuik.blossom.utils.PacketLimiter packetLimiter = new me.samsuik.blossom.utils.PacketLimiter();
+
+    private void kickPlayer(String message) {
+        IChatBaseComponent reason = new ChatMessage("disconnect.genericReason", message);
+        this.handle(new PacketPlayOutKickDisconnect(reason));
+        this.close(reason);
+    }
+
     protected void a(ChannelHandlerContext channelhandlercontext, Packet packet) throws Exception {
         if (this.channel.isOpen()) {
             try {
+                if (packetLimiter.handle()) {
+                    this.kickPlayer("Sending packets too quickly!");
+                    return;
+                }
+                // Blossom end
                 packet.a(this.m);
             } catch (CancelledPacketHandleException cancelledpackethandleexception) {
                 ;
-- 
2.50.1

