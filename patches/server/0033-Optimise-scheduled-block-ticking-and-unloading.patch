From 01e72d217fe887520f7bdf4e252c07091ae7203c Mon Sep 17 00:00:00 2001
From: Samsuik <40902469+Samsuik@users.noreply.github.com>
Date: Tue, 28 Jun 2022 23:06:32 +0100
Subject: [PATCH] Optimise scheduled block ticking and unloading


diff --git a/src/main/java/me/samsuik/blossom/utils/ScheduledBlockSet.java b/src/main/java/me/samsuik/blossom/utils/ScheduledBlockSet.java
new file mode 100644
index 000000000..98886b4aa
--- /dev/null
+++ b/src/main/java/me/samsuik/blossom/utils/ScheduledBlockSet.java
@@ -0,0 +1,33 @@
+package me.samsuik.blossom.utils;
+
+import net.minecraft.server.NextTickListEntry;
+import org.bukkit.craftbukkit.util.HashTreeSet;
+
+import java.util.Collection;
+
+public final class ScheduledBlockSet extends HashTreeSet<NextTickListEntry> {
+    @Override
+    public int size() {
+        return this.tree.size();
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return this.tree.isEmpty();
+    }
+
+    @Override
+    public boolean add(NextTickListEntry scheduledBlock) {
+        return this.tree.add(scheduledBlock);
+    }
+
+    @Override
+    public boolean addAll(Collection c) {
+        return this.tree.addAll(c);
+    }
+
+    @Override
+    public boolean remove(Object object) {
+        return this.tree.remove(object);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 0e1610710..26eb46e5b 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -76,6 +76,7 @@ public class Chunk {
     protected gnu.trove.map.hash.TObjectIntHashMap<Class> entityCount = new gnu.trove.map.hash.TObjectIntHashMap<Class>(); // Spigot
     protected it.unimi.dsi.fastutil.objects.Reference2ObjectOpenHashMap<Class<?>, List<Entity>>[] classToEntityListMap = new it.unimi.dsi.fastutil.objects.Reference2ObjectOpenHashMap[16]; // Blossom
     public List<Entity>[] hardColliding = new me.samsuik.blossom.utils.collections.UnorderedIndexedList[16]; // Blossom
+    public final java.util.Set<NextTickListEntry> scheduledToTick = new it.unimi.dsi.fastutil.objects.ObjectOpenHashSet<>(); // Blossom - optimise scheduled block ticking
     // PaperSpigot start - Asynchronous light updates
     public AtomicInteger pendingLightUpdates = new AtomicInteger();
     public long lightUpdateTime;
diff --git a/src/main/java/net/minecraft/server/ChunkRegionLoader.java b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
index e867a944f..3eb29e754 100644
--- a/src/main/java/net/minecraft/server/ChunkRegionLoader.java
+++ b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
@@ -464,7 +464,7 @@ public class ChunkRegionLoader implements IChunkLoader, IAsyncChunkSaver {
                         block = Block.getById(nbttagcompound5.getInt("i"));
                     }
 
-                    world.b(new BlockPosition(nbttagcompound5.getInt("x"), nbttagcompound5.getInt("y"), nbttagcompound5.getInt("z")), block, nbttagcompound5.getInt("t"), nbttagcompound5.getInt("p"));
+                    world.scheduleUponLoading(chunk, new BlockPosition(nbttagcompound5.getInt("x"), nbttagcompound5.getInt("y"), nbttagcompound5.getInt("z")), block, nbttagcompound5.getInt("t"), nbttagcompound5.getInt("p")); // Blossom - optimise scheduled block ticking
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 3225ef38c..002fa12f7 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -1595,6 +1595,8 @@ public abstract class World implements IBlockAccess {
 
     public void b(BlockPosition blockposition, Block block, int i, int j) {}
 
+    public void scheduleUponLoading(Chunk chunk, BlockPosition blockposition, Block block, int i, int j) {} // Blossom
+
     public void tickEntities() {
         this.methodProfiler.a("entities");
         this.methodProfiler.a("global");
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index bc603bfba..5e41dc4fe 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -36,7 +36,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
     public EntityTracker tracker;
     private final PlayerChunkMap manager;
     // private final Set<NextTickListEntry> L = Sets.newHashSet(); // PAIL: Rename nextTickListHash
-    private final HashTreeSet<NextTickListEntry> M = new HashTreeSet<NextTickListEntry>(); // CraftBukkit - HashTreeSet // PAIL: Rename nextTickList
+    private final HashTreeSet<NextTickListEntry> M = new me.samsuik.blossom.utils.ScheduledBlockSet(); // Blossom - optimise scheduled block ticking // CraftBukkit - HashTreeSet // PAIL: Rename nextTickList
     private final Map<UUID, Entity> entitiesByUUID = Maps.newHashMap();
     public ChunkProviderServer chunkProviderServer;
     public boolean savingDisabled;
@@ -48,7 +48,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
     private WorldServer.BlockActionDataList[] S = new WorldServer.BlockActionDataList[] { new WorldServer.BlockActionDataList(null), new WorldServer.BlockActionDataList(null)};
     private int T;
     private static final List<StructurePieceTreasure> U = Lists.newArrayList(new StructurePieceTreasure[] { new StructurePieceTreasure(Items.STICK, 0, 1, 3, 10), new StructurePieceTreasure(Item.getItemOf(Blocks.PLANKS), 0, 1, 3, 10), new StructurePieceTreasure(Item.getItemOf(Blocks.LOG), 0, 1, 3, 10), new StructurePieceTreasure(Items.STONE_AXE, 0, 1, 1, 3), new StructurePieceTreasure(Items.WOODEN_AXE, 0, 1, 1, 5), new StructurePieceTreasure(Items.STONE_PICKAXE, 0, 1, 1, 3), new StructurePieceTreasure(Items.WOODEN_PICKAXE, 0, 1, 1, 5), new StructurePieceTreasure(Items.APPLE, 0, 2, 3, 5), new StructurePieceTreasure(Items.BREAD, 0, 2, 3, 3), new StructurePieceTreasure(Item.getItemOf(Blocks.LOG2), 0, 1, 3, 10)});
-    private List<NextTickListEntry> V = Lists.newArrayList();
+    private final ArrayDeque<NextTickListEntry> V = new ArrayDeque<>(); // Blossom - optimise scheduled block ticking
 
     // CraftBukkit start
     public final int dimension;
@@ -559,21 +559,29 @@ public class WorldServer extends World implements IAsyncTaskHandler {
             i = 1;
         }
 
-        if (this.areChunksLoadedBetween(blockposition.a(-b0, -b0, -b0), blockposition.a(b0, b0, b0))) {
+        // Blossom start - optimise scheduled block ticking
+        Chunk chunk = this.getChunkIfLoaded(blockposition);
+        if (chunk != null/*this.areChunksLoadedBetween(blockposition.a(-b0, -b0, -b0), blockposition.a(b0, b0, b0))*/) {
             if (block.getMaterial() != Material.AIR) {
                 nextticklistentry.a((long) i + this.worldData.getTime());
                 nextticklistentry.a(j);
             }
 
             // CraftBukkit - use M, PAIL: Rename nextTickList
-            if (!this.M.contains(nextticklistentry)) {
+            if (chunk.scheduledToTick.add(nextticklistentry)/*!this.M.contains(nextticklistentry)*/) {
                 this.M.add(nextticklistentry);
+                // Blossom end - optimise scheduled block ticking
             }
         }
 
     }
 
     public void b(BlockPosition blockposition, Block block, int i, int j) {
+        // Blossom start - optimise scheduled block ticking
+        scheduleUponLoading(null, blockposition, block, i, j);
+    }
+    public void scheduleUponLoading(Chunk chunk, BlockPosition blockposition, Block block, int i, int j) {
+        // Blossom end - optimise scheduled block ticking
         NextTickListEntry nextticklistentry = new NextTickListEntry(blockposition, block);
 
         nextticklistentry.a(j);
@@ -582,8 +590,10 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         }
 
         // CraftBukkit - use M, PAIL: Rename nextTickList
-        if (!this.M.contains(nextticklistentry)) {
+        // Blossom start - optimise scheduled block ticking
+        if (chunk != null && chunk.scheduledToTick.add(nextticklistentry)/*!this.M.contains(nextticklistentry)*/) {
             this.M.add(nextticklistentry);
+            // Blossom end - optimise scheduled block ticking
         }
 
     }
@@ -635,47 +645,53 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                 timings.scheduledBlocksCleanup.startTiming(); // Spigot
                 NextTickListEntry nextticklistentry;
 
-                for (int j = 0; j < i; ++j) {
-                    nextticklistentry = (NextTickListEntry) this.M.first();
+                // Blossom start - optimise scheduled block ticking
+                Iterator<NextTickListEntry> scheduledBlockItr = this.M.iterator();
+                int count = 0;
+                while (scheduledBlockItr.hasNext()) {
+                    nextticklistentry = scheduledBlockItr.next();
                     if (!flag && nextticklistentry.b > this.worldData.getTime()) {
                         break;
                     }
 
-                    // CraftBukkit - use M, PAIL: Rename nextTickList
-                    this.M.remove(nextticklistentry);
-                    this.V.add(nextticklistentry);
-                }
-                timings.scheduledBlocksCleanup.stopTiming(); // Spigot
+                    boolean tickBlock = count < i;
 
-                // PaperSpigot start - Allow redstone ticks to bypass the tickNextTickListCap
-                if (paperSpigotConfig.tickNextTickListCapIgnoresRedstone) {
-                    Iterator<NextTickListEntry> iterator = this.M.iterator();
-                    while (iterator.hasNext()) {
-                        NextTickListEntry next = iterator.next();
-                        if (!flag && next.b > this.worldData.getTime()) {
-                            break;
-                        }
+                    // PaperSpigot start - Allow redstone ticks to bypass the tickNextTickListCap
+                    if (paperSpigotConfig.tickNextTickListCapIgnoresRedstone) {
+                        Block block = nextticklistentry.a();
+                        tickBlock |= block.isPowerSource() || block instanceof IContainer || block instanceof BlockFalling; // Blossom - falling blocks should bypass tick cap
+                    } else if (!tickBlock) {
+                        break;
+                    }
+                    // PaperSpigot end - Allow redstone ticks to bypass the tickNextTickListCap
 
-                        if (next.a().isPowerSource() || next.a() instanceof IContainer || next.a() instanceof BlockFalling) { // Blossom - falling blocks should bypass tick cap
-                            iterator.remove();
-                            this.V.add(next);
+                    if (tickBlock) {
+                        Chunk chunk = this.getChunkIfLoaded(nextticklistentry.a);
+                        if (chunk != null) {
+                            chunk.scheduledToTick.remove(nextticklistentry);
                         }
+                        scheduledBlockItr.remove();
+                        this.V.add(nextticklistentry);
+                        count++;
                     }
                 }
-                // PaperSpigot end
+                // Blossom end - optimise scheduled block ticking
+                timings.scheduledBlocksCleanup.stopTiming(); // Spigot
+
+                // Blossom - optimise scheduled block ticking; moved up
 
                 this.methodProfiler.b();
                 this.methodProfiler.a("ticking");
                 timings.scheduledBlocksTicking.startTiming(); // Spigot
-                Iterator iterator = this.V.iterator();
 
-                while (iterator.hasNext()) {
-                    nextticklistentry = (NextTickListEntry) iterator.next();
-                    iterator.remove();
-                    byte b0 = 0;
-
-                    if (this.areChunksLoadedBetween(nextticklistentry.a.a(-b0, -b0, -b0), nextticklistentry.a.a(b0, b0, b0))) {
-                        IBlockData iblockdata = this.getType(nextticklistentry.a);
+                // Blossom start - optimise scheduled block ticking
+                while ((nextticklistentry = this.V.poll()) != null) {
+                    BlockPosition position = nextticklistentry.a;
+                    Chunk chunk = this.getChunkIfLoaded(position.getX() >> 4, position.getZ() >> 4);
+                    if (chunk != null/*this.areChunksLoadedBetween(nextticklistentry.a.a(-b0, -b0, -b0), nextticklistentry.a.a(b0, b0, b0))*/) {
+                        //chunk.scheduledToTick.remove(nextticklistentry);
+                        IBlockData iblockdata = chunk.getBlockData(nextticklistentry.a);
+                        // Blossom end - optimise scheduled block ticking
                         co.aikar.timings.Timing timing = iblockdata.getBlock().getTiming(); // Spigot
                         timing.startTiming(); // Spigot
 
@@ -714,7 +730,56 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         return this.a(new StructureBoundingBox(i, 0, k, j, 256, l), flag);
     }
 
+    // Blossom start - optimise nextticklist unloading
+    private List<NextTickListEntry> getScheduledBlocksInsideBoundingBox(
+            StructureBoundingBox boundingBox,
+            int minChunkX, int minChunkZ,
+            int maxChunkX, int maxChunkZ,
+            boolean remove
+    ) {
+        List<NextTickListEntry> scheduledTickingBlocks = new it.unimi.dsi.fastutil.objects.ReferenceArrayList<>();
+        for (int chunkX = minChunkX; chunkX <= maxChunkX; ++chunkX) {
+            for (int chunkZ = minChunkZ; chunkZ <= maxChunkZ; ++chunkZ) {
+                Chunk chunk = this.getChunkIfLoaded(chunkX, chunkZ);
+                if (chunk == null) {
+                    continue;
+                }
+
+                for (Iterator<NextTickListEntry> itr = chunk.scheduledToTick.iterator(); itr.hasNext(); ) {
+                    NextTickListEntry scheduledBlock = itr.next();
+                    BlockPosition position = scheduledBlock.a;
+
+                    if (position.getX() >= boundingBox.a && position.getX() < boundingBox.d && position.getZ() >= boundingBox.c && position.getZ() < boundingBox.f) {
+                        if (remove) {
+                            itr.remove();
+                        }
+                        scheduledTickingBlocks.add(scheduledBlock);
+                    }
+                }
+            }
+        }
+
+        if (remove) {
+            // Might be worth adding a flag to NextTickListEntry to indicate it shouldn't be ticked.
+            for (NextTickListEntry scheduledBlock : scheduledTickingBlocks) {
+                this.M.remove(scheduledBlock);
+                this.V.remove(scheduledBlock);
+            }
+        }
+
+        return scheduledTickingBlocks;
+    }
+
     public List<NextTickListEntry> a(StructureBoundingBox structureboundingbox, boolean flag) {
+        int minChunkX = structureboundingbox.a >> 4;
+        int minChunkZ = structureboundingbox.c >> 4;
+        int maxChunkX = structureboundingbox.d >> 4;
+        int maxChunkZ = structureboundingbox.f >> 4;
+        int totalChunks = (maxChunkX - minChunkX + 1) * (maxChunkZ - minChunkZ + 1);
+        if (totalChunks < 16 * 16) {
+            return this.getScheduledBlocksInsideBoundingBox(structureboundingbox, minChunkX, minChunkZ, maxChunkX, maxChunkZ, flag);
+        }
+        // Blossom end - optimise scheduled block ticking
         ArrayList arraylist = null;
 
         for (int i = 0; i < 2; ++i) {
diff --git a/src/main/java/org/bukkit/craftbukkit/util/HashTreeSet.java b/src/main/java/org/bukkit/craftbukkit/util/HashTreeSet.java
index 80a5c29f3..f4b4690f8 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/HashTreeSet.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/HashTreeSet.java
@@ -9,7 +9,7 @@ import java.util.TreeSet;
 public class HashTreeSet<V> implements Set<V> {
 
     private HashSet<V> hash = new HashSet<V>();
-    private TreeSet<V> tree = new TreeSet<V>();
+    protected TreeSet<V> tree = new TreeSet<V>(); // Blossom - optimise scheduled block ticking; private -> protected
 
     public HashTreeSet() {
 
-- 
2.50.1

