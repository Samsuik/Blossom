From b195e58c0a0013dc81386f21536207c5fc5a0dc4 Mon Sep 17 00:00:00 2001
From: Samsuik <40902469+Samsuik@users.noreply.github.com>
Date: Tue, 20 Jun 2023 00:20:03 +0100
Subject: [PATCH] Reduce Vehicle Logic


diff --git a/src/main/java/net/minecraft/server/EntityArmorStand.java b/src/main/java/net/minecraft/server/EntityArmorStand.java
index 7be0351a8..55fb294b7 100644
--- a/src/main/java/net/minecraft/server/EntityArmorStand.java
+++ b/src/main/java/net/minecraft/server/EntityArmorStand.java
@@ -245,8 +245,10 @@ public class EntityArmorStand extends EntityLiving {
     protected void s(Entity entity) {}
 
     protected void bL() {
-        List list = this.world.getEntities(this, this.getBoundingBox());
-
+        // Blossom start
+        int r = world.spigotConfig.maxCollisionsPerEntity;
+        List list = world.getEntitiesLimitedByType(EntityMinecartAbstract.class, getBoundingBox(), null, r, r*r);
+        // Blossom end
         if (list != null && !list.isEmpty()) {
             for (int i = 0; i < list.size(); ++i) {
                 Entity entity = (Entity) list.get(i);
diff --git a/src/main/java/net/minecraft/server/EntityBoat.java b/src/main/java/net/minecraft/server/EntityBoat.java
index b6bb13339..44585b6bd 100644
--- a/src/main/java/net/minecraft/server/EntityBoat.java
+++ b/src/main/java/net/minecraft/server/EntityBoat.java
@@ -49,6 +49,7 @@ public class EntityBoat extends Entity {
         return true;
     }
     // Blossom end
+    private List<EntityBoat> validColliding = java.util.Collections.emptyList(); // Blossom
 
     public EntityBoat(World world) {
         super(world);
@@ -193,7 +194,7 @@ public class EntityBoat extends Entity {
         double d5;
         int j;
 
-        if (d3 > 0.2975D) {
+        if (false && d3 > 0.2975D) { // Blossom
             d4 = Math.cos((double) this.yaw * 3.141592653589793D / 180.0D);
             d5 = Math.sin((double) this.yaw * 3.141592653589793D / 180.0D);
 
@@ -300,6 +301,7 @@ public class EntityBoat extends Entity {
 
             int k;
 
+            if (onGround && lastPosition != blockposition) { // Blossom
             for (k = 0; k < 4; ++k) {
                 int l = MathHelper.floor(this.locX + ((double) (k % 2) - 0.5D) * 0.8D);
 
@@ -329,6 +331,7 @@ public class EntityBoat extends Entity {
                     }
                 }
             }
+            } // Blossom
 
             if (this.onGround && !this.landBoats) { // CraftBukkit
                 this.motX *= 0.5D;
@@ -392,8 +395,30 @@ public class EntityBoat extends Entity {
                 server.getPluginManager().callEvent(event);
             }
             // CraftBukkit end
-            if (!this.world.isClientSide) {
-                List list = this.world.getEntities(this, this.getBoundingBox().grow(0.20000000298023224D, 0.0D, 0.20000000298023224D));
+            // Blossom start
+            if (!this.world.isClientSide && onGround) {
+                // Reduce collide searches
+                // List list = this.world.getEntities(this, this.getBoundingBox().grow(0.20000000298023224D, 0.0D, 0.20000000298023224D));
+                AxisAlignedBB possiblyColliding = getBoundingBox().grow(0.3, 0.0, 0.3);
+
+                boolean flag = lastPosition != blockposition || validColliding.isEmpty() && ticksLived % 5 == 0;
+
+                if (!flag) {
+                    for (Entity entity : validColliding) {
+                        if (!entity.getBoundingBox().b(possiblyColliding)) {
+                            // no longer colliding
+                            flag = true;
+                        }
+                    }
+                }
+
+                if (flag) {
+                    int r = world.spigotConfig.maxCollisionsPerEntity;
+                    validColliding = world.getEntitiesLimitedByType(EntityBoat.class, getBoundingBox().grow(0.2, 0.0, 0.2), (ent) -> ent != this, r, r*r);
+                }
+
+                List list = validColliding;
+                // Blossom end
 
                 if (list != null && !list.isEmpty()) {
                     for (int k1 = 0; k1 < list.size(); ++k1) {
diff --git a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
index 98864383a..8fac552a8 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
@@ -48,6 +48,7 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
         return !BlockMinecartTrackAbstract.d(iblockdata);
     }
     // Blossom end
+    private java.util.List<EntityMinecartAbstract> validColliding = java.util.Collections.emptyList(); // Blossom
 
     public EntityMinecartAbstract(World world) {
         super(world);
@@ -336,7 +337,28 @@ public abstract class EntityMinecartAbstract extends Entity implements INamableT
             }
             // CraftBukkit end
 
-            Iterator iterator = this.world.getEntities(this, this.getBoundingBox().grow(0.20000000298023224D, 0.0D, 0.20000000298023224D)).iterator();
+            // Blossom start
+            // Iterator iterator = this.world.getEntities(this, this.getBoundingBox().grow(0.20000000298023224D, 0.0D, 0.20000000298023224D)).iterator();
+            AxisAlignedBB possiblyColliding = getBoundingBox().grow(0.3, 0.0, 0.3);
+
+            boolean flag = !onGround || lastPosition != blockposition || validColliding.isEmpty() && ticksLived % 5 == 0;
+
+            if (!flag) {
+                for (Entity entity : validColliding) {
+                    if (!entity.getBoundingBox().b(possiblyColliding)) {
+                        // no longer colliding
+                        flag = true;
+                    }
+                }
+            }
+
+            if (flag) {
+                int r = world.spigotConfig.maxCollisionsPerEntity;
+                validColliding = world.getEntitiesLimitedByType(EntityMinecartAbstract.class, getBoundingBox().grow(0.2, 0.0, 0.2), (ent) -> ent != this, r, r*r);
+            }
+
+            Iterator iterator = validColliding.iterator();
+            // Blossom end
 
             while (iterator.hasNext()) {
                 Entity entity = (Entity) iterator.next();
-- 
2.40.0.windows.1

