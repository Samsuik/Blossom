From 2c9d5b7cc280e50aa7845e9bb89e69c91498fd9d Mon Sep 17 00:00:00 2001
From: Samsuik <40902469+Samsuik@users.noreply.github.com>
Date: Sat, 8 Jul 2023 21:49:22 +0100
Subject: [PATCH] Configure Durable Blocks


diff --git a/src/main/java/me/samsuik/blossom/configuration/BlossomConfig.java b/src/main/java/me/samsuik/blossom/configuration/BlossomConfig.java
index 2fde7e673..ab298de7f 100644
--- a/src/main/java/me/samsuik/blossom/configuration/BlossomConfig.java
+++ b/src/main/java/me/samsuik/blossom/configuration/BlossomConfig.java
@@ -417,4 +417,9 @@ public class BlossomConfig {
         projectileTimeout = getInt("projectiles.time-out", 1200);
     }
 
+    public static boolean requireTNTToBlowUpDurableBlocks;
+    private static void BlockDurability() {
+        requireTNTToBlowUpDurableBlocks = getBoolean("explosions.durability.require-tnt-to-blow-up-durable-blocks", true);
+    }
+
 }
diff --git a/src/main/java/me/samsuik/blossom/configuration/BlossomWorldConfig.java b/src/main/java/me/samsuik/blossom/configuration/BlossomWorldConfig.java
index 0f6c4871f..a94402436 100644
--- a/src/main/java/me/samsuik/blossom/configuration/BlossomWorldConfig.java
+++ b/src/main/java/me/samsuik/blossom/configuration/BlossomWorldConfig.java
@@ -1,8 +1,11 @@
 package me.samsuik.blossom.configuration;
 
 import java.util.List;
+import java.util.Map;
 
+import net.minecraft.server.Block;
 import org.bukkit.Bukkit;
+import org.bukkit.configuration.ConfigurationSection;
 import org.bukkit.configuration.file.YamlConfiguration;
 
 public class BlossomWorldConfig {
@@ -78,4 +81,34 @@ public class BlossomWorldConfig {
         me.samsuik.blossom.antixray.AntiXrayEngine.setEngine(new me.samsuik.blossom.antixray.DuskBerry(hiddenBlocks, berryIntensity, sections, radius));
     }
 
+    public Map<Block, Map.Entry<Integer, Double>> durabilityMap;
+    private void BlockDurability() {
+        durabilityMap = new java.util.HashMap<>();
+
+        // init config
+        if (!config.contains("explosions.durability.obsidian")) {
+            defaultDura("obsidian", 5, 0.0);
+            defaultDura("enchanting_table", 0, 0.0);
+            defaultDura("ender_chest", 0, 0.0);
+            defaultDura("anvil", 0, 0.0);
+        }
+
+        ConfigurationSection section = config.getConfigurationSection("explosions.durability");
+
+        for (String name : section.getValues(false).keySet()) {
+            Block block = Block.getByName(name);
+            if (block != null) {
+                int durability = section.getInt(name + ".durability", 0);
+                double resistance = section.getDouble(name + ".resistance", block.durability());
+
+                durabilityMap.put(block, new java.util.AbstractMap.SimpleEntry<>(durability, resistance));
+            }
+        }
+    }
+
+    private void defaultDura(String name, int durability, double resistance) {
+        config.addDefault("explosions.durability." + name + ".durability", durability);
+        config.addDefault("explosions.durability." + name + ".resistance", resistance);
+    }
+
 }
diff --git a/src/main/java/me/samsuik/blossom/explosions/durability/DurableManager.java b/src/main/java/me/samsuik/blossom/explosions/durability/DurableManager.java
new file mode 100644
index 000000000..f1926c262
--- /dev/null
+++ b/src/main/java/me/samsuik/blossom/explosions/durability/DurableManager.java
@@ -0,0 +1,121 @@
+package me.samsuik.blossom.explosions.durability;
+
+import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
+import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
+import me.samsuik.blossom.events.durability.BlockDurabilityEvent;
+import net.minecraft.server.Block;
+import net.minecraft.server.BlockPosition;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.World;
+import org.bukkit.Bukkit;
+
+import java.util.Map;
+import java.util.concurrent.locks.StampedLock;
+
+public class DurableManager {
+
+    private final Long2ObjectMap<DurableBlock> posToDurableMap = new Long2ObjectOpenHashMap<>();
+    private final StampedLock lock = new StampedLock();
+    private final World world;
+
+    public DurableManager(World world) {
+        this.world = world;
+    }
+
+    public boolean damage(Block block, BlockPosition position, boolean tnt) {
+        if (world.blossomConfig.durabilityMap.containsKey(block)) {
+            DurableBlock durable = getDurableBlock(block, position.getX(), position.getY(), position.getZ());
+            return durable.getDurability() <= 0 || (tnt || !me.samsuik.blossom.configuration.BlossomConfig.requireTNTToBlowUpDurableBlocks) && durable.damage();
+        }
+
+        return true;
+    }
+
+    public float getResistance(Block block, int x, int y, int z) {
+        if (world.blossomConfig.durabilityMap.containsKey(block)) {
+            return getDurableBlock(block, x, y, z).getResistance();
+        }
+
+        return -1.0f;
+    }
+
+    public int getDurability(Block block, int x, int y, int z) {
+        if (world.blossomConfig.durabilityMap.containsKey(block)) {
+            return getDurableBlock(block, x, y, z).getDurability();
+        }
+
+        return -1;
+    }
+
+    public void removeExpired() {
+        posToDurableMap.values().removeIf(DurableBlock::expired);
+    }
+
+    private DurableBlock getDurableBlock(Block block, int x, int y, int z) {
+        long stamp, pack = BlockPosition.asLong(x, y, z);
+        DurableBlock durable = null;
+
+        do {
+            stamp = lock.tryOptimisticRead();
+
+            try {
+                durable = posToDurableMap.get(pack);
+            } catch (Exception ignored) {}
+        } while (!lock.validate(stamp));
+
+        if (durable == null) {
+            stamp = lock.writeLock();
+            posToDurableMap.put(pack, durable = createDurableBlock(block, x, y, z));
+            lock.unlockWrite(stamp);
+        }
+
+        return durable;
+    }
+
+    private DurableBlock createDurableBlock(Block block, int x, int y, int z) {
+        Map.Entry<Integer, Double> entry = world.blossomConfig.durabilityMap.get(block);
+        int durability = entry.getKey();
+        float resistance = entry.getValue().floatValue();
+        if (BlockDurabilityEvent.getHandlerList().getRegisteredListeners().length != 0) {
+            org.bukkit.block.Block bukkitBlock = world.getWorld().getBlockAt(x, y, z);
+            BlockDurabilityEvent event = new BlockDurabilityEvent(bukkitBlock, durability, resistance);
+            Bukkit.getPluginManager().callEvent(event);
+            durability = event.getDurability();
+            resistance = event.getResistance();
+        }
+        return new DurableBlock(durability, resistance);
+    }
+
+    private static class DurableBlock {
+        private int durability;
+        private final float resistance;
+        private int expireAt;
+
+        public DurableBlock(int durability, float resistance) {
+            this.durability = durability;
+            this.resistance = resistance;
+            this.updateExpiry();
+        }
+
+        public float getResistance() {
+            return resistance;
+        }
+
+        public int getDurability() {
+            return durability;
+        }
+
+        boolean damage() {
+            updateExpiry();
+            return --durability <= 0;
+        }
+
+        boolean expired() {
+            return MinecraftServer.currentTick >= expireAt;
+        }
+
+        void updateExpiry() {
+            expireAt = MinecraftServer.currentTick + 60*20;
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Block.java b/src/main/java/net/minecraft/server/Block.java
index f035df0cb..a886c8937 100644
--- a/src/main/java/net/minecraft/server/Block.java
+++ b/src/main/java/net/minecraft/server/Block.java
@@ -61,7 +61,7 @@ public class Block {
     protected int u;
     protected boolean v;
     protected float strength;
-    protected float durability;
+    protected float durability; public float durability() { return durability; } // Blossom
     // Blossom start
     public float getBlastResistance() {
         return ((durability / 5.0f) + 0.3f) * 0.3f;
diff --git a/src/main/java/net/minecraft/server/Explosion.java b/src/main/java/net/minecraft/server/Explosion.java
index 696480d9b..d232f7cca 100644
--- a/src/main/java/net/minecraft/server/Explosion.java
+++ b/src/main/java/net/minecraft/server/Explosion.java
@@ -176,6 +176,10 @@ public class Explosion {
         IBlockData iblockdata = chunk.getBlockData(x, y, z);
         Block block = iblockdata.getBlock();
         float resistance = block.getBlastResistance();
+        // Blossom start
+        float durableResistance = world.durableManager.getResistance(block, x, y, z);
+        if (durableResistance != -1.0f) resistance = durableResistance;
+        // Blossom end
 
         if (block != Blocks.AIR && strength - resistance > 0.0f) {
             long pack = BlockPosition.asLong(x, y, z);
@@ -338,12 +342,19 @@ public class Explosion {
             }
             // CraftBukkit end
             iterator = this.blocks.iterator();
+            boolean isTNT = source instanceof EntityTNTPrimed; // Blossom
 
             while (iterator.hasNext()) {
                 blockposition = (BlockPosition) iterator.next();
                 Block block = this.world.getType(blockposition).getBlock();
 
                 me.samsuik.blossom.antixray.AntiXrayEngine.getEngine().updateNearbyBlocks(world, blockposition, false); // Blossom // Spigot
+                // Blossom start
+                if (!world.durableManager.damage(block, blockposition, isTNT)) {
+                    iterator.remove();
+                    continue;
+                }
+                // Blossom end
                 // Blossom - unnecessary
 
                 if (block.getMaterial() != Material.AIR) {
diff --git a/src/main/java/net/minecraft/server/ItemSeedFood.java b/src/main/java/net/minecraft/server/ItemSeedFood.java
index 3229add95..44ebffffe 100644
--- a/src/main/java/net/minecraft/server/ItemSeedFood.java
+++ b/src/main/java/net/minecraft/server/ItemSeedFood.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import org.bukkit.ChatColor;
+
 public class ItemSeedFood extends ItemFood {
 
     private Block b;
@@ -12,6 +14,15 @@ public class ItemSeedFood extends ItemFood {
     }
 
     public boolean interactWith(ItemStack itemstack, EntityHuman entityhuman, World world, BlockPosition blockposition, EnumDirection enumdirection, float f, float f1, float f2) {
+        // Blossom start
+        if (itemstack.getItem() == Items.POTATO) {
+            Block block = world.getType(blockposition).getBlock();
+            int durability = world.durableManager.getDurability(block, blockposition.getX(), blockposition.getY(), blockposition.getZ());
+            if (durability > 0) {
+                entityhuman.getBukkitEntity().sendMessage(ChatColor.DARK_GRAY + " * " + ChatColor.WHITE + "Durability: " + durability);
+            }
+        }
+        // Blossom end
         if (enumdirection != EnumDirection.UP) {
             return false;
         } else if (!entityhuman.a(blockposition.shift(enumdirection), enumdirection, itemstack)) {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index d508018a4..e013ab636 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -910,6 +910,11 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
                 worldserver.mergeHistory = null;
                 worldserver.mergingEntity = null;
                 // Blossom end
+                // Blossom start
+                if (currentTick % 200 == 0) {
+                    worldserver.durableManager.removeExpired();
+                }
+                // Blossom end
             // } // CraftBukkit
 
             // this.i[i][this.ticks % 100] = System.nanoTime() - j; // CraftBukkit
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 00579836c..f1b6a7f52 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -173,6 +173,7 @@ public abstract class World implements IBlockAccess {
     public me.samsuik.blossom.entity.MergeHistory mergeHistory;
     public Entity mergingEntity;
     // Blossom end
+    public final me.samsuik.blossom.explosions.durability.DurableManager durableManager = new me.samsuik.blossom.explosions.durability.DurableManager(this); // Blossom
 
     protected World(IDataManager idatamanager, WorldData worlddata, WorldProvider worldprovider, MethodProfiler methodprofiler, boolean flag, ChunkGenerator gen, org.bukkit.World.Environment env) {
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig( worlddata.getName() ); // Spigot
-- 
2.49.0

