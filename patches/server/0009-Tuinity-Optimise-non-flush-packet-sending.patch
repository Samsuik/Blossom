From a7b60099152cda50bd3beaf8a00f3ba1cae7a648 Mon Sep 17 00:00:00 2001
From: Spottedleaf <spottedleaf@spottedleaf.dev>
Date: Tue, 22 Sep 2020 01:49:19 -0700
Subject: [PATCH] Tuinity Optimise non-flush packet sending

Places like entity tracking make heavy use of packet sending,
and internally netty will use some very expensive thread wakeup
calls when scheduling.

Thanks to various hacks in ProtocolLib as well as other
plugins, we cannot simply use a queue of packets to group
send on execute. We have to call execute for each packet.

Tux's suggestion here is exactly what was needed - tag
the Runnable indicating it should not make a wakeup call.

Big thanks to Tux for making this possible as I had given
up on this optimisation before he came along.

Locally this patch drops the entity tracker tick by a full 1.5x.

diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index 4a6d5dc12..8a88a9aaf 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -27,6 +27,7 @@ import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.Marker;
 import org.apache.logging.log4j.MarkerManager;
 
+import io.netty.util.concurrent.AbstractEventExecutor; // Tuinity
 public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
 
     private static final Logger g = LogManager.getLogger();
@@ -222,11 +223,21 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
             // Tuinity start - add flush parameter
             this.writePacket(packet, agenericfuturelistener, enumprotocol, enumprotocol1, flush);
         } else {
+            // Tuinity start - optimise packets that are not flushed
+            // note: since the type is not dynamic here, we need to actually copy the old executor code
+            // into two branches. On conflict, just re-copy - no changes were made inside the executor code.
+            if (!flush) {
+                AbstractEventExecutor.LazyRunnable run = () -> {
+                    this.writePacket(packet, agenericfuturelistener, enumprotocol, enumprotocol1, flush);
+                };
+                this.channel.eventLoop().execute(run);
+            } else { // Tuinity end - optimise packets that are not flushed
             this.channel.eventLoop().execute(new Runnable() {
                 public void run() {
                     NetworkManager.this.writePacket(packet, agenericfuturelistener, enumprotocol, enumprotocol1, flush);
                 }
             });
+            } // Tuinity
         }
 
     }
-- 
2.40.0.windows.1

