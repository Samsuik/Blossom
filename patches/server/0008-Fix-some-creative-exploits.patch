From 181540d9edaf9f707cadcc700dfc6479110aa4b0 Mon Sep 17 00:00:00 2001
From: Samsuik <40902469+Samsuik@users.noreply.github.com>
Date: Tue, 9 May 2023 16:43:24 +0100
Subject: [PATCH] Fix some creative exploits


diff --git a/src/main/java/net/minecraft/server/AttributeBase.java b/src/main/java/net/minecraft/server/AttributeBase.java
index 9ef9bfec0..a679b2d0f 100644
--- a/src/main/java/net/minecraft/server/AttributeBase.java
+++ b/src/main/java/net/minecraft/server/AttributeBase.java
@@ -10,7 +10,7 @@ public abstract class AttributeBase implements IAttribute {
     protected AttributeBase(IAttribute iattribute, String s, double d0) {
         this.a = iattribute;
         this.b = s;
-        this.c = d0;
+        this.c = Double.isNaN(d0) ? 0.0 : d0; // Blossom
         if (s == null) {
             throw new IllegalArgumentException("Name cannot be null!");
         }
diff --git a/src/main/java/net/minecraft/server/AttributeRanged.java b/src/main/java/net/minecraft/server/AttributeRanged.java
index 838daeda8..f68bdb9bf 100644
--- a/src/main/java/net/minecraft/server/AttributeRanged.java
+++ b/src/main/java/net/minecraft/server/AttributeRanged.java
@@ -29,6 +29,7 @@ public class AttributeRanged extends AttributeBase {
     }
 
     public double a(double d0) {
+        if (Double.isNaN(d0)) return a; // Blossom - may be a good idea to do a NaN check here
         d0 = MathHelper.a(d0, this.a, this.b);
         return d0;
     }
diff --git a/src/main/java/net/minecraft/server/EnchantmentManager.java b/src/main/java/net/minecraft/server/EnchantmentManager.java
index 98656815f..0e408507f 100644
--- a/src/main/java/net/minecraft/server/EnchantmentManager.java
+++ b/src/main/java/net/minecraft/server/EnchantmentManager.java
@@ -209,7 +209,7 @@ public class EnchantmentManager {
     }
 
     public static int getBonusBlockLootEnchantmentLevel(EntityLiving entityliving) {
-        return getEnchantmentLevel(Enchantment.LOOT_BONUS_BLOCKS.id, entityliving.bA());
+        return Math.min(getEnchantmentLevel(Enchantment.LOOT_BONUS_BLOCKS.id, entityliving.bA()), 10); // Blossom - restrict fortune to a reason number
     }
 
     public static int g(EntityLiving entityliving) {
@@ -221,7 +221,7 @@ public class EnchantmentManager {
     }
 
     public static int getBonusMonsterLootEnchantmentLevel(EntityLiving entityliving) {
-        return getEnchantmentLevel(Enchantment.LOOT_BONUS_MOBS.id, entityliving.bA());
+        return Math.min(getEnchantmentLevel(Enchantment.LOOT_BONUS_MOBS.id, entityliving.bA()), 10); // Blossom - restrict looting to a reason number
     }
 
     public static boolean j(EntityLiving entityliving) {
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index b8c750a22..abd543c71 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -1426,7 +1426,7 @@ public abstract class Entity implements ICommandListener {
             // CraftBukkit end
 
             // CraftBukkit start - Exempt Vehicles from notch's sanity check
-            if (!(getBukkitEntity() instanceof Vehicle)) {
+            if (true || !(getBukkitEntity() instanceof Vehicle)) { // Blossom - allow me to state my opinion on the comment above, that is stupid.
                 if (Math.abs(this.motX) > 10.0D) {
                     this.motX = 0.0D;
                 }
diff --git a/src/main/java/net/minecraft/server/EntityFireworks.java b/src/main/java/net/minecraft/server/EntityFireworks.java
index d7be6c268..f08c8a2f8 100644
--- a/src/main/java/net/minecraft/server/EntityFireworks.java
+++ b/src/main/java/net/minecraft/server/EntityFireworks.java
@@ -36,8 +36,25 @@ public class EntityFireworks extends Entity {
             NBTTagCompound nbttagcompound1 = nbttagcompound.getCompound("Fireworks");
 
             if (nbttagcompound1 != null) {
-                i += nbttagcompound1.getByte("Flight");
+                // Blossom start
+                i += Math.min(nbttagcompound1.getByte("Flight"), 3);
             }
+
+            NBTTagList explosions = nbttagcompound1.getList("Explosions", 10);
+
+            // This cannot crash the server, but it can crash and lag clients.
+            if (explosions.size() > 16) {
+                NBTTagList capped = new NBTTagList();
+
+                for (int j = 0; j < 16; ++j) {
+                    capped.add(explosions.get(i));
+                }
+
+                nbttagcompound1.set("Explosions", capped);
+                itemstack.setTag(nbttagcompound);
+                this.datawatcher.watch(8, itemstack);
+            }
+            // Blossom end
         }
 
         this.motX = this.random.nextGaussian() * 0.001D;
@@ -108,8 +125,8 @@ public class EntityFireworks extends Entity {
     }
 
     public void a(NBTTagCompound nbttagcompound) {
-        this.ticksFlown = nbttagcompound.getInt("Life");
-        this.expectedLifespan = nbttagcompound.getInt("LifeTime");
+        this.ticksFlown = Math.max(nbttagcompound.getInt("Life"), 0); // Blossom - make sure this is never negative
+        this.expectedLifespan = Math.max(nbttagcompound.getInt("LifeTime"), 60); // Blossom - and cap this to a reasonable number
         NBTTagCompound nbttagcompound1 = nbttagcompound.getCompound("FireworksItem");
 
         if (nbttagcompound1 != null) {
diff --git a/src/main/java/net/minecraft/server/EntityLargeFireball.java b/src/main/java/net/minecraft/server/EntityLargeFireball.java
index b62c0376b..8f63ed2e5 100644
--- a/src/main/java/net/minecraft/server/EntityLargeFireball.java
+++ b/src/main/java/net/minecraft/server/EntityLargeFireball.java
@@ -46,7 +46,7 @@ public class EntityLargeFireball extends EntityFireball {
         super.a(nbttagcompound);
         if (nbttagcompound.hasKeyOfType("ExplosionPower", 99)) {
             // CraftBukkit - set bukkitYield when setting explosionpower
-            bukkitYield = this.yield = nbttagcompound.getInt("ExplosionPower");
+            bukkitYield = Math.min(this.yield = nbttagcompound.getInt("ExplosionPower"), 10); // Blossom - limit this to a reasonable number
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index 5ac052c80..a72956075 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -585,6 +585,12 @@ public abstract class EntityLiving extends Entity {
 
     public void addEffect(MobEffect mobeffect) {
         org.spigotmc.AsyncCatcher.catchOp( "effect add"); // Spigot
+        // Blossom start - prevent health boost being able to cause the respawn screen to visually show up
+        int amplifier = mobeffect.getAmplifier();
+        if (mobeffect.getEffectId() == MobEffectList.HEALTH_BOOST.getId() && (amplifier < 0 || amplifier > 127)) {
+            return;
+        }
+        // Blossom end
         // CraftBukkit start
         if (isTickingEffects) {
             effectsToProcess.add(mobeffect);
diff --git a/src/main/java/net/minecraft/server/EntitySlime.java b/src/main/java/net/minecraft/server/EntitySlime.java
index c927832b6..bb1b27111 100644
--- a/src/main/java/net/minecraft/server/EntitySlime.java
+++ b/src/main/java/net/minecraft/server/EntitySlime.java
@@ -49,7 +49,7 @@ public class EntitySlime extends EntityInsentient implements IMonster {
 
     public void a(NBTTagCompound nbttagcompound) {
         super.a(nbttagcompound);
-        int i = nbttagcompound.getInt("Size");
+        int i = Math.min(nbttagcompound.getInt("Size"), 20); // Blossom - limit this to a reasonable number
 
         if (i < 0) {
             i = 0;
diff --git a/src/main/java/net/minecraft/server/GameProfileSerializer.java b/src/main/java/net/minecraft/server/GameProfileSerializer.java
index 998cf70e3..5e9562c9d 100644
--- a/src/main/java/net/minecraft/server/GameProfileSerializer.java
+++ b/src/main/java/net/minecraft/server/GameProfileSerializer.java
@@ -30,6 +30,12 @@ public final class GameProfileSerializer {
                 uuid = null;
             }
 
+            // Blossom start - prevent blank game profiles
+            if (uuid == null && org.apache.commons.lang3.StringUtils.isBlank(s)) {
+                return null;
+            }
+            // Blossom end
+
             GameProfile gameprofile = new GameProfile(uuid, s);
 
             if (nbttagcompound.hasKeyOfType("Properties", 10)) {
diff --git a/src/main/java/net/minecraft/server/GenericAttributes.java b/src/main/java/net/minecraft/server/GenericAttributes.java
index 0cc3e2fb6..1016072cf 100644
--- a/src/main/java/net/minecraft/server/GenericAttributes.java
+++ b/src/main/java/net/minecraft/server/GenericAttributes.java
@@ -107,7 +107,24 @@ public class GenericAttributes {
         UUID uuid = new UUID(nbttagcompound.getLong("UUIDMost"), nbttagcompound.getLong("UUIDLeast"));
 
         try {
-            return new AttributeModifier(uuid, nbttagcompound.getString("Name"), nbttagcompound.getDouble("Amount"), nbttagcompound.getInt("Operation"));
+            // Blossom start - fill in name and operation for bad attribute modifiers
+            // Modifiers should have sane defaults but as you might be able to notice from this existing they don't.
+            // What I think is the best part here is that every malformed attribute you have spams console,
+            // and if you set the amount to an infinite value it will be run every server tick.
+            String name = nbttagcompound.getString("Name");
+
+            // "Name" is the description
+            if (name == null || name.length() == 0) {
+                name = uuid.toString();
+            }
+
+            int operation = nbttagcompound.getInt("Operation");
+            if (operation < 0 || operation > 2L) {
+                operation = 0;
+            }
+
+            return new AttributeModifier(uuid, name, nbttagcompound.getDouble("Amount"), operation);
+            // Blossom end    
         } catch (Exception exception) {
             GenericAttributes.f.warn("Unable to create attribute: " + exception.getMessage());
             return null;
diff --git a/src/main/java/net/minecraft/server/ItemArmorStand.java b/src/main/java/net/minecraft/server/ItemArmorStand.java
index d8de61902..37d6580c6 100644
--- a/src/main/java/net/minecraft/server/ItemArmorStand.java
+++ b/src/main/java/net/minecraft/server/ItemArmorStand.java
@@ -44,6 +44,7 @@ public class ItemArmorStand extends Item {
                             this.a(entityarmorstand, world.random);
                             NBTTagCompound nbttagcompound = itemstack.getTag();
 
+                            /* // Blossom start - this can easily be exploited
                             if (nbttagcompound != null && nbttagcompound.hasKeyOfType("EntityTag", 10)) {
                                 NBTTagCompound nbttagcompound1 = new NBTTagCompound();
 
@@ -51,6 +52,7 @@ public class ItemArmorStand extends Item {
                                 nbttagcompound1.a(nbttagcompound.getCompound("EntityTag"));
                                 entityarmorstand.f(nbttagcompound1);
                             }
+                            */ // Blossom end
 
                             world.addEntity(entityarmorstand);
                         }
diff --git a/src/main/java/net/minecraft/server/ItemSkull.java b/src/main/java/net/minecraft/server/ItemSkull.java
index 519574bcb..a236e10cf 100644
--- a/src/main/java/net/minecraft/server/ItemSkull.java
+++ b/src/main/java/net/minecraft/server/ItemSkull.java
@@ -117,7 +117,7 @@ public class ItemSkull extends Item {
 
     public boolean a(final NBTTagCompound nbttagcompound) { // Spigot - make final
         super.a(nbttagcompound);
-        if (nbttagcompound.hasKeyOfType("SkullOwner", 8) && nbttagcompound.getString("SkullOwner").length() > 0) {
+        if (nbttagcompound.hasKeyOfType("SkullOwner", 8) && !org.apache.commons.lang3.StringUtils.isBlank(nbttagcompound.getString("SkullOwner"))) { // Blossom - prevent blank game profiles
             GameProfile gameprofile = new GameProfile((UUID) null, nbttagcompound.getString("SkullOwner"));
 
             // Spigot start
diff --git a/src/main/java/net/minecraft/server/MobEffectList.java b/src/main/java/net/minecraft/server/MobEffectList.java
index 863e9d8e9..0b3fe9930 100644
--- a/src/main/java/net/minecraft/server/MobEffectList.java
+++ b/src/main/java/net/minecraft/server/MobEffectList.java
@@ -119,7 +119,7 @@ public class MobEffectList {
             }
         } else if ((this.id != MobEffectList.HEAL.id || entityliving.bm()) && (this.id != MobEffectList.HARM.id || !entityliving.bm())) {
             if (this.id == MobEffectList.HARM.id && !entityliving.bm() || this.id == MobEffectList.HEAL.id && entityliving.bm()) {
-                entityliving.damageEntity(DamageSource.MAGIC, (float) (6 << i));
+                entityliving.damageEntity(DamageSource.MAGIC, (float) Math.abs(6 << i)); // Blossom - prevent "creative kill" potions
             }
         } else {
             entityliving.heal((float) Math.max(4 << i, 0), RegainReason.MAGIC); // CraftBukkit
@@ -132,7 +132,7 @@ public class MobEffectList {
 
         if ((this.id != MobEffectList.HEAL.id || entityliving.bm()) && (this.id != MobEffectList.HARM.id || !entityliving.bm())) {
             if (this.id == MobEffectList.HARM.id && !entityliving.bm() || this.id == MobEffectList.HEAL.id && entityliving.bm()) {
-                j = (int) (d0 * (double) (6 << i) + 0.5D);
+                j = (int) (d0 * (double) Math.abs(6 << i) + 0.5D); // Blossom - prevent "creative kill" potions
                 if (entity == null) {
                     entityliving.damageEntity(DamageSource.MAGIC, (float) j);
                 } else {
@@ -140,7 +140,7 @@ public class MobEffectList {
                 }
             }
         } else {
-            j = (int) (d0 * (double) (4 << i) + 0.5D);
+            j = (int) (d0 * (double) Math.abs(4 << i) + 0.5D); // Blossom - prevent "creative kill" potions
             entityliving.heal((float) j, RegainReason.MAGIC); // CraftBukkit
         }
 
diff --git a/src/main/java/net/minecraft/server/TileEntityBanner.java b/src/main/java/net/minecraft/server/TileEntityBanner.java
index aa5ad2ef0..8778e1ce9 100644
--- a/src/main/java/net/minecraft/server/TileEntityBanner.java
+++ b/src/main/java/net/minecraft/server/TileEntityBanner.java
@@ -19,11 +19,7 @@ public class TileEntityBanner extends TileEntity {
             NBTTagCompound nbttagcompound = itemstack.getTag().getCompound("BlockEntityTag");
 
             if (nbttagcompound.hasKey("Patterns")) {
-                this.patterns = (NBTTagList) nbttagcompound.getList("Patterns", 10).clone();
-                // CraftBukkit start
-                while (this.patterns.size() > 20) {
-                    this.patterns.a(20); // PAIL Rename remove
-                }
+                this.patterns = loadPatternsFromCompound(nbttagcompound); // Blossom - avoid o(n^2) removal of unnecessary patterns
                 // CraftBukkit end
             }
 
@@ -42,6 +38,18 @@ public class TileEntityBanner extends TileEntity {
         this.g = true;
     }
 
+    // Blossom start
+    private NBTTagList loadPatternsFromCompound(NBTTagCompound nbttagcompound) {
+        NBTTagList list = nbttagcompound.getList("Patterns", 10);
+        NBTTagList patterns = new NBTTagList();
+        int min = Math.min(list.size(), 20);
+        for (int i = 0; i < min; ++i) {
+            patterns.add(list.get(i));
+        }
+        return patterns;
+    }
+    // Blossom end
+
     public void b(NBTTagCompound nbttagcompound) {
         super.b(nbttagcompound);
         a(nbttagcompound, this.color, this.patterns);
@@ -58,12 +66,7 @@ public class TileEntityBanner extends TileEntity {
     public void a(NBTTagCompound nbttagcompound) {
         super.a(nbttagcompound);
         this.color = nbttagcompound.getInt("Base");
-        this.patterns = nbttagcompound.getList("Patterns", 10);
-        // CraftBukkit start
-        while (this.patterns.size() > 20) {
-            this.patterns.a(20); // PAIL Rename remove
-        }
-        // CraftBukkit end
+        this.patterns = loadPatternsFromCompound(nbttagcompound); // Blossom - avoid o(n^2) removal of unnecessary patterns
         this.h = null;
         this.i = null;
         this.j = null;
diff --git a/src/main/java/net/minecraft/server/TileEntitySkull.java b/src/main/java/net/minecraft/server/TileEntitySkull.java
index 58014c5f1..51b7cc90a 100644
--- a/src/main/java/net/minecraft/server/TileEntitySkull.java
+++ b/src/main/java/net/minecraft/server/TileEntitySkull.java
@@ -103,7 +103,7 @@ public class TileEntitySkull extends TileEntity {
             } else if (nbttagcompound.hasKeyOfType("ExtraType", 8)) {
                 String s = nbttagcompound.getString("ExtraType");
 
-                if (!UtilColor.b(s)) {
+                if (!UtilColor.b(s) && !org.apache.commons.lang3.StringUtils.isBlank(s)) { // Blossom - prevent blank game profiles
                     this.g = new GameProfile((UUID) null, s);
                     this.e();
                 }
diff --git a/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java b/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java
index ad47bdd4d..ecd1b3b28 100644
--- a/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java
+++ b/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java
@@ -43,7 +43,7 @@ public class CraftMapRenderer extends MapRenderer {
             }
       
             MapIcon decoration = (MapIcon) worldMap.decorations.get(key);
-            cursors.addCursor(decoration.getX(), decoration.getY(), (byte) (decoration.getRotation() & 15), decoration.getType());
+            cursors.addCursor(decoration.getX(), decoration.getY(), (byte) (decoration.getRotation() & 15), (byte) (decoration.getType() & 15)); // Blossom
         }
     }
 
-- 
2.50.1

